{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SQLDelight generates typesafe kotlin APIs from your SQL statements. It verifies your schema, statements, and migrations at compile-time and provides IDE features like autocomplete and refactoring which make writing and maintaining SQL simple. SQLDelight understands your existing SQL schema. CREATE TABLE hockey_player ( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT , name TEXT NOT NULL , number INTEGER NOT NULL ); It generates typesafe code for any labeled SQL statements. SQLDelight supports a variety of dialects and platforms: SQLite Android Native (iOS, macOS, or Windows) JVM Javascript Multiplatform MySQL (JVM) PostgreSQL (JVM) (Experimental) HSQL/H2 (JVM) (Experimental) Snapshots Snapshots of the development version (including the IDE plugin zip) are available in Sonatype's snapshots repository .","title":"Overview"},{"location":"#snapshots","text":"Snapshots of the development version (including the IDE plugin zip) are available in Sonatype's snapshots repository .","title":"Snapshots"},{"location":"changelog/","text":"Change Log [1.5.2] - 2021-10-12 Added [Gradle Plugin] HMPP support (#2548 by Martin Bonnin ) [IDE Plugin] Add NULL comparison inspection (by Alexander Perfilyev ) [IDE Plugin] Add inspection suppressor (#2519 by Alexander Perfilyev ) [IDE Plugin] Mixed named and positional parameters inspection (by Alexander Perfilyev ) [SQLite Driver] Add mingwX86 target. (#2558 by Nikita Kozhemyakin ) [SQLite Driver] Add M1 targets [SQLite Driver] Add linuxX64 support (#2456 by Cedric Hippmann ) [MySQL Dialect] Add ROW_COUNT function to mysql (#2523) [PostgreSQL Dialect] postgres rename, drop column (by Juan Liska ) [PostgreSQL Dialect] PostgreSQL grammar doesn't recognize CITEXT [PostgreSQL Dialect] Include TIMESTAMP WITH TIME ZONE and TIMESTAMPTZ [PostgreSQL Dialect] Add grammar for PostgreSQL GENERATED columns [Runtime] Provide SqlDriver as a parameter to AfterVersion (#2534, 2614 by Ahmed El-Helw ) Changed [Gradle Plugin] explicitely require Gradle 7.0 (#2572 by Martin Bonnin ) [Gradle Plugin] Make VerifyMigrationTask support Gradle's up-to-date checks (#2533 by Matthew Haughton ) [IDE Plugin] Don't warn with \"Join compares two columns of different types\" when joining nullable with non-nullable type (#2550 by Piotr Chmielowski ) [IDE Plugin] Clarify the error for the lowercase 'as' in column type (by Alexander Perfilyev ) Fixed [IDE Plugin] Do not reparse under a new dialect if the project is already disposed (#2609) [IDE Plugin] If the associated virtual file is null, the module is null (#2607) [IDE Plugin] Avoid crashing during the unused query inspection (#2610) [IDE Plugin] Run the database sync write inside of a write action (#2605) [IDE Plugin] Let the IDE schedule SQLDelight syncronization [IDE Plugin] Fix npe in JavaTypeMixin (#2603 by Alexander Perfilyev ) [IDE Plugin] Fix IndexOutOfBoundsException in MismatchJoinColumnInspection (#2602 by Alexander Perfilyev ) [IDE Plugin] Add description for UnusedColumnInspection (#2600 by Alexander Perfilyev ) [IDE Plugin] Wrap PsiElement.generatedVirtualFiles into read action (#2599 by Alexander Perfilyev ) [IDE Plugin] Remove unnecessary nonnull cast (#2596) [IDE Plugin] Properly handle nulls for find usages (#2595) [IDE Plugin] Fix IDE autocomplete for generated files for Android (#2573 by Martin Bonnin ) [IDE Plugin] Fix npe in SqlDelightGotoDeclarationHandler (by Alexander Perfilyev ) [IDE Plugin] Mangle kotlin keywords in arguments inside insert stmt (#2433 by Alexander Perfilyev ) [IDE Plugin] Fix npe in SqlDelightFoldingBuilder (#2382 by Alexander Perfilyev ) [IDE Plugin] Catch ClassCastException in CopyPasteProcessor (#2369 by Alexander Perfilyev ) [IDE Plugin] Fix update live template (by Ilias Redissi ) [IDE Plugin] Adds descriptions to intention actions (#2489 by Alexander Perfilyev ) [IDE Plugin] Fix exception in CreateTriggerMixin if table is not found (by Alexander Perfilyev ) [Compiler] Topologically sort table creation statemenets [Compiler] Stop invoking forDatabaseFiles callback on directories (#2532) [Gradle Plugin] Propagate generateDatabaseInterface task dependency to potential consumers (#2518 by Martin Bonnin ) [1.5.1] - 2021-07-16 Added [PostgreSQL Dialect] PostgreSQL JSONB and ON Conflict Do Nothing (by Andrew Stewart ) [PostgreSQL Dialect] Adds support for PostgreSQL ON CONFLICT (column, ...) DO UPDATE (by Andrew Stewart ) [MySQL Dialect] Support MySQL generated columns (by Jeff Gulbronson ) [Native Driver] Add watchosX64 support [IDE Plugin] Add parameter types and annotations (by Alexander Perfilyev ) [IDE Plugin] Add action to generate 'select all' query (by Alexander Perfilyev ) [IDE Plugin] Show column types in autocomplete (by Alexander Perfilyev ) [IDE Plugin] Add icons to autocomplete (by Alexander Perfilyev ) [IDE Plugin] Add action to generate 'select by primary key' query (by Alexander Perfilyev ) [IDE Plugin] Add action to generate 'insert into' query (by Alexander Perfilyev ) [IDE Plugin] Add highlighting for column names, stmt identifiers, function names (by Alexander Perfilyev ) [IDE Plugin] Add remaining query generation actions (#489 by Alexander Perfilyev ) [IDE Plugin] Show parameter hints from insert-stmt (by Alexander Perfilyev ) [IDE Plugin] Table alias intention action (by Alexander Perfilyev ) [IDE Plugin] Qualify column name intention (by Alexander Perfilyev ) [IDE Plugin] Go to declaration for kotlin property (by Alexander Perfilyev ) Changed [Native Driver] Improve native transaction performance by avoiding freezing and shareable data structures when possible (by Anders Ha ) [Paging 3] Bump Paging3 version to 3.0.0 stable [JS Driver] Upgrade sql.js to 1.5.0 Fixed [JDBC SQLite Driver] Call close() on connection before clearing the ThreadLocal (#2444 by Hannes Stru\u00df ) [RX extensions] Fix subscription / disposal race leak (#2403 by Pierre Yves Ricau ) [Coroutines extension] Ensure we register query listener before notifying [Compiler] Sort notifyQueries to have consistent kotlin output file (by Jiayu Chen ) [Compiler] Don't annotate select query class properties with @JvmField (by Eliezer Graber ) [IDE Plugin] Fix import optimizer (#2350 by Alexander Perfilyev ) [IDE Plugin] Fix unused column inspection (by Alexander Perfilyev ) [IDE Plugin] Add nested classes support to import inspection and class annotator (by Alexander Perfilyev ) [IDE Plugin] Fix npe in CopyPasteProcessor (#2363 by Alexander Perfilyev ) [IDE Plugin] Fix crash in InlayParameterHintsProvider (#2359 by Alexander Perfilyev ) [IDE Plugin] Fix insertion of blank lines when copy-pasting any text into create table stmt (#2431 by Alexander Perfilyev ) [1.5.0] - 2021-04-23 Added [SQLite Javascript Driver] Enable sqljs-driver publication (#1667 by Derek Ellis ) [Paging3 Extension] Extension for Android Paging 3 Library (#1786 by Kevin Cianfarini ) [1.5.0] - 2021-04-23 Added [SQLite Javascript Driver] Enable sqljs-driver publication (#1667 by Derek Ellis ) [Paging3 Extension] Extension for Android Paging 3 Library (#1786 by Kevin Cianfarini ) [MySQL Dialect] Adds support for mysql's ON DUPLICATE KEY UPDATE conflict resolution. (by Ryan Harter ) [SQLite Dialect] Add compiler support for SQLite offsets() (by Quinton Roberts ) [IDE Plugin] Add import quick fix for unknown type (#683 by Alexander Perfilyev ) [IDE Plugin] Add unused import inspection (#1161 by Alexander Perfilyev ) [IDE Plugin] Add unused query inspection (by Alexander Perfilyev ) [IDE Plugin] Add unused column inspection (#569 by Alexander Perfilyev ) [IDE Plugin] Automatically bring imports on copy/paste (#684 by Alexander Perfilyev ) [IDE Plugin] Pop a balloon when there are incompatibilities between gradle/intellij plugin versions [IDE Plugin] Insert Into ... VALUES(?) parameter hints (#506 by Alexander Perfilyev ) [IDE Plugin] Inline parameter hints (by Alexander Perfilyev ) [Runtime] Include an API in the runtime for running migrations with callbacks (#1844) Changed [Compiler] Smart cast \"IS NOT NULL\" queries (#867) [Compiler] Protect against keywords that will fail at runtime (#1471, #1629) [Gradle Plugin] Reduce size of gradle plugin from 60mb -> 13mb. [Gradle Plugin] Properly support android variants, and remove support for KMM target-specific sql (#1039) [Gradle Plugin] Pick a minimum sqlite version based on minsdk (#1684) [Native Driver] Native driver connection pool and performance updates Fixed [Compiler] NBSP before lambdas (by Beno\u00eet Quenaudon ) [Compiler] Fix incompatible types in generated bind and cursor.get statements [Compiler] SQL clause should persist adapted type (#2067) [Compiler] Column with only NULL keyword should be nullable [Compiler] Dont generate mapper lambda with type annotations (#1957) [Compiler] If custom queries would clash, use the file name as an additional package suffix (#1057, #1278) [Compiler] Ensure foreign key cascades cause query listeners to be notified (#1325, #1485) [Compiler] If unioning two of the same type, return the table type (#1342) [Compiler] Ensure params to ifnull and coalesce can be nullable (#1263) [Compiler] Correctly use query-imposed nullability for expressions [MySQL Dialect] Support MySQL if statements [PostgreSQL Dialect] Retrieve NUMERIC and DECIMAL as Double in PostgreSQL (#2118) [SQLite Dialect] UPSERT notifications should account for BEFORE/AFTER UPDATE triggers. (#2198 by Anders Ha ) [SQLite Driver] Use multiple connections for threads in the SqliteDriver unless we are in memory (#1832) [JDBC Driver] JDBC Driver assumes autoCommit is true (#2041) [JDBC Driver] Ensure that we close connections on exception (#2306) [IDE Plugin] Fix GoToDeclaration/FindUsages being broken on Windows due to path separator bug (#2054 by Angus Holder ) [IDE Plugin] Ignore gradle errors instead of crashing in the IDE. [IDE Plugin] If a sqldelight file is moved to a non-sqldelight module, do not attempt codegen [IDE Plugin] Ignore codegen errors in IDE [IDE Plugin] Ensure that we dont try to negatively substring (#2068) [IDE Plugin] Also ensure project is not disposed before running gradle action (#2155) [IDE Plugin] Arithmetic on nullable types should also be nullable (#1853) [IDE Plugin] Make 'expand * intention' work with additional projections (#2173 by Alexander Perfilyev ) [IDE Plugin] If kotlin resolution fails during GoTo, dont attempt to go to sqldelight files [IDE Plugin] If IntelliJ encounters an exception while sqldelight is indexing, dont crash [IDE Plugin] Handle exceptions that happen while detecting errors before codegen in the IDE [IDE Plugin] Make the IDE plugin compatible with Dynamic Plugins (#1536) [Gradle Plugin] Race condition generating a database using WorkerApi (#2062 by St\u00e9phane Nicolas ) [Gradle Plugin] classLoaderIsolation prevents custom jdbc usage (#2048 by Ben Asher ) [Gradle Plugin] Improve missing packageName error message (by Niklas Baudy ) [Gradle Plugin] SQLDelight bleeds IntelliJ dependencies onto buildscript class path (#1998) [Gradle Plugin] Fix gradle build caching (#2075) [Gradle Plugin] Do not depend on kotlin-native-utils in Gradle plugin (by Ilya Matveev ) [Gradle Plugin] Also write the database if there are only migration files (#2094) [Gradle Plugin] Ensure diamond dependencies only get picked up once in the final compilation unit (#1455) Also just a general shoutout to Matthew Haughton who did a lot of work to improve the SQLDelight infrastructure this release. [1.4.4] - 2020-10-08 Added [PostgreSQL Dialect] Support data-modifying statements in WITH [PostgreSQL Dialect] Support substring function [Gradle Plugin] Added verifyMigrations flag for validating migrations during SQLDelight compilation (#1872) Changed [Compiler] Flag SQLite specific functions as unknown in non-SQLite dialects [Gradle Plugin] Provide a warning when the sqldelight plugin is applied but no databases are configured (#1421) Fixed [Compiler] Report an error when binding a column name in an ORDER BY clause (#1187 by Eliezer Graber ) [Compiler] Registry warnings appear when generating the db interface (#1792) [Compiler] Incorrect type inference for case statement (#1811) [Compiler] Provide better errors for migration files with no version (#2006) [Compiler] Required database type to marshal is incorrect for some database type ColumnAdapter's (#2012) [Compiler] Nullability of CAST (#1261) [Compiler] Lots of name shadowed warnings in query wrappers (#1946 by Eliezer Graber ) [Compiler] Generated code is using full qualifier names (#1939) [IDE Plugin] Trigger sqldelight code gen from gradle syncs [IDE Plugin] Plugin not regenerating database interface when changing .sq files (#1945) [IDE Plugin] Issue when moving files to new packages (#444) [IDE Plugin] If theres nowhere to move the cursor, do nothing instead of crashing (#1994) [IDE Plugin] Use empty package name for files outside of a gradle project (#1973) [IDE Plugin] Fail gracefully for invalid types (#1943) [IDE Plugin] Throw a better error message when encountering an unknown expression (#1958) [Gradle Plugin] SQLDelight bleeds IntelliJ dependencies onto buildscript class path (#1998) [Gradle Plugin] \"JavadocIntegrationKt not found\" compilation error when adding method doc in *.sq file (#1982) [Gradle Plugin] SqlDeslight gradle plugin doesn't support Configuration Caching (CoCa). (#1947 by St\u00e9phane Nicolas ) [SQLite JDBC Driver] SQLException: database in auto-commit mode (#1832) [Coroutines Extension] Fix IR backend for coroutines-extensions (#1918 by Derek Ellis ) [1.4.3] - 2020-09-04 Added [MySQL Dialect] Add support for MySQL last_insert_id function (by Kelvin Law ) [PostgreSQL Dialect] Support SERIAL data type (by Veyndan Stuart & Felipe Lima ) [PostgreSQL Dialect] Support PostgreSQL RETURNING (by Veyndan Stuart ) Fixed [MySQL Dialect] Treat MySQL AUTO_INCREMENT as having a default value (#1823) [Compiler] Fix Upsert statement compiler error (#1809 by Eliezer Graber ) [Compiler] Fix issue with invalid Kotlin being generated (#1925 by Eliezer Graber ) [Compiler] Have a better error message for unknown functions (#1843) [Compiler] Expose string as the type for the second parameter of instr [IDE Plugin] Fix daemon bloat and UI thread stalling for IDE plugin (#1916) [IDE Plugin] Handle null module scenario (#1902) [IDE Plugin] In unconfigured sq files return empty string for the package name (#1920) [IDE Plugin] Fix grouped statements and add an integration test for them (#1820) [IDE Plugin] Use built in ModuleUtil to find the module for an element (#1854) [IDE Plugin] Only add valid elements to lookups (#1909) [IDE Plugin] Parent can be null (#1857) [1.4.2] - 2020-08-27 Added [Runtime] Support new JS IR backend [Gradle Plugin] Add generateSqlDelightInterface Gradle task. (by Niklas Baudy ) [Gradle Plugin] Add verifySqlDelightMigration Gradle task. (by Niklas Baudy ) Fixed [IDE Plugin] Use the gradle tooling API to facilitate data sharing between the IDE and gradle [IDE Plugin] Default to false for schema derivation [IDE Plugin] Properly retrieve the commonMain source set [MySQL Dialect] Added minute to mySqlFunctionType() (by MaaxGr ) [1.4.1] - 2020-08-21 Added [Runtime] Support Kotlin 1.4.0 (#1859) Changed [Gradle Plugin] Make AGP dependency compileOnly (#1362) Fixed [Compiler] Add optional javadoc to column defintion rule and to table interface generator (#1224 by Daniel Eke ) [SQLite Dialect] Add support for sqlite fts5 auxiliary functions highlight, snippet, and bm25 (by Daniel Rampelt ) [MySQL Dialect] Support MySQL bit data type [MySQL Dialect] Support MySQL binary literals [PostgreSQL Dialect] Expose SERIAL from sql-psi (by Veyndan Stuart ) [PostgreSQL Dialect] Add BOOLEAN data type (by Veyndan Stuart ) [PostgreSQL Dialect] Add NULL column constraint (by Veyndan Stuart ) [HSQL Dialect] Adds AUTO_INCREMENT support to HSQL (by Ryan Harter ) [1.4.0] - 2020-06-22 Added [MySQL Dialect] MySQL support (by Jeff Gulbronson & Veyndan Stuart ) [PostgreSQL Dialect] Experimental PostgreSQL support (by Veyndan Stuart ) [HSQL Dialect] Experimental H2 support (by Marius Volkhart ) [SQLite Dialect] SQLite FTS5 support (by Ben Asher & James Palawaga ) [SQLite Dialect] Support alter table rename column (#1505 by Angus Holder ) [IDE] IDE support for migration (.sqm) files [IDE] Add SQLDelight Live Templates that mimic built-in SQL Live Templates (#1154 by Veyndan Stuart ) [IDE] Add new SqlDelight file action (#42 by Roman Zavarnitsyn ) [Runtime] transactionWithReturn API for transactions that return results [Compiler] Syntax for grouping multiple SQL statements together in a .sq file [Compiler] Support generating schemas from migration files [Gradle Plugin] Add a task for outputting migration files as valid sql Changed [Documentation] Overhaul of the documentation website (by Saket Narayan ) [Gradle Plugin] Improve unsupported dialect error message (by Veyndan Stuart ) [IDE] Dynamically change file icon based on dialect (by Veyndan Stuart ) [JDBC Driver] Expose a JdbcDriver constructor off of javax.sql.DataSource (#1614) Fixed [Compiler]Support Javadoc on tables and fix multiple javadoc in one file (#1224) [Compiler] Enable inserting a value for synthesized columns (#1351) [Compiler] Fix inconsistency in directory name sanitizing (by Zac Sweers ) [Compiler] Synthesized columns should retain nullability across joins (#1656) [Compiler] Pin the delete statement on the delete keyword (#1643) [Compiler] Fix quoting (#1525 by Angus Holder ) [Compiler] Fix the between operator to properly recurse into expressions (#1279) [Compiler] Give better error for missing table/column when creating an index (#1372) [Compiler] Enable using the outer querys projection in join constraints (#1346) [Native Driver] Make execute use transationPool (by Ben Asher ) [JDBC Driver] Use the jdbc transaction APIs instead of sqlite (#1693) [IDE] Fix virtualFile references to always be the original file (#1782) [IDE] Use the correct throwable when reporting errors to bugsnag (#1262) [Paging Extension] Fix leaky DataSource (#1628) [Gradle Plugin] If the output db file already exists when generating a schema, delete it (#1645) [Gradle Plugin] Fail migration validation if there are gaps [Gradle Plugin] Explicitely use the file index we set (#1644) [1.3.0] - 2020-04-03 New: [Gradle] Dialect property to specify with sql dialect to compile against. New: [Compiler] #1009 Experimental support of the mysql dialect. New: [Compiler] #1436 Support of sqlite:3.24 dialect and upsert. New: [JDBC Driver] Split out JDBC driver from sqlite jvm driver. Fix: [Compiler] #1199 Support lambdas of any length. Fix: [Compiler] #1610 Fix the return type of avg() to be nullable. Fix: [IntelliJ] #1594 Fix path separator handling which broke Goto and Find Usages on Windows. [1.2.2] - 2020-01-22 New: [Runtime] Support for Windows (mingW), tvOS, watchOS, and macOS architectures. Fix: [Compiler] Return type of sum() should be nullable. Fix: [Paging] Pass Transacter into QueryDataSourceFactory to avoid race conditions. Fix: [IntelliJ Plugin] Don't search through dependencies when looking for a file's package name. Fix: [Gradle] #862 Change validator logs in Gradle to debug level. Enhancement: [Gradle] Convert GenerateSchemaTask to use Gradle worker. Note: sqldelight-runtime artifact renamed to runtime. [1.2.1] - 2019-12-11 Fix: [Gradle] Kotlin Native 1.3.60 support. Fix: [Gradle] #1287 Warning when syncing. Fix: [Compiler] #1469 SynetheticAccessor creation for query. Fix: [JVM Driver] Fixed memory leak. NOTE: The coroutine extension artifact requires kotlinx bintray maven repository be added to your buildscript. [1.2.0] - 2019-08-30 New: [Runtime] Stable Flow api. Fix: [Gradle] Kotlin Native 1.3.50 support. Fix: [Gradle] #1380 Clean build sometimes fails. Fix: [Gradle] #1348 Running verify tasks prints \"Could not retrieve functions\". Fix: [Compile] #1405 Can't build project if query contains FTS table joined. Fix: [Gradle] #1266 Sporadic gradle build failure while having multiple database modules. [1.1.4] - 2019-07-11 New: [Runtime] Experimental kotlin Flow api. Fix: [Gradle] Kotlin/Native 1.3.40 compatibility. Fix: [Gradle] #1243 Fix for usage of SQLDelight with Gradle configure on demand. Fix: [Gradle] #1385 Fix for usage of SQLDelight with incremental annotation processing. Fix: [Gradle] Allow gradle tasks to cache. Fix: [Gradle] #1274 Enable usage of sqldelight extension with kotlin dsl. Fix: [Compiler] Unique ids are generated for each query deterministically. Fix: [Compiler] Only notify listening queries when a transaction is complete. Fix: [JVM Driver] #1370 Force JdbcSqliteDriver users to supply a DB URL. [1.1.3] - 2019-04-14 Gradle Metadata 1.0 release. [1.1.2] - 2019-04-14 New: [Runtime] #1267 Logging driver decorator. Fix: [Compiler] #1254 Split string literals which are longer than 2^16 characters. Fix: [Gradle] #1260 generated sources are recognized as iOS source in Multiplatform Project. Fix: [IDE] #1290 kotlin.KotlinNullPointerException in CopyAsSqliteAction.kt:43. Fix: [Gradle] #1268 Running linkDebugFrameworkIos* tasks fail in recent versions. [1.1.1] - 2019-03-01 Fix: [Gradle] Fix module dependency compilation for android projects. Fix: [Gradle] #1246 Set up api dependencies in afterEvaluate. Fix: [Compiler] Array types are properly printed. [1.1.0] - 2019-02-27 New: [Gradle] #502 Allow specifying schema module dependencies. Enhancement: [Compiler] #1111 Table errors are sorted before other errors. Fix: [Compiler] #1225 Return the correct type for REAL literals. Fix: [Compiler] #1218 docid propagates through triggers. [1.0.3] - 2019-01-30 Enhancement: [Runtime] #1195 Native Driver/Runtime Arm32. Enhancement: [Runtime] #1190 Expose the mapper from the Query type. [1.0.2] - 2019-01-26 Fix: [Gradle Plugin] Update to kotlin 1.3.20. Fix: [Runtime] Transactions no longer swallow exceptions. [1.0.1] - 2019-01-21 Enhancement: [Native Driver] Allow passing directory name to DatabaseConfiguration. Enhancement: [Compiler] #1173 Files without a package fail compilation. Fix: [IDE] Properly report IDE errors to Square. Fix: [IDE] #1162 Types in the same package show as error but work fine. Fix: [IDE] #1166 Renaming a table fails with NPE. Fix: [Compiler] #1167 Throws an exception when trying to parse complex SQL statements with UNION and SELECT. [1.0.0] - 2019-01-08 New: Complete overhaul of generated code, now in kotlin. New: RxJava2 extensions artifact. New: Android Paging extensions artifact. New: Kotlin Multiplatform support. New: Android, iOS and JVM SQLite driver artifacts. New: Transaction API. [0.7.0] - 2018-02-12 New: Generated code has been updated to use the Support SQLite library only. All queries now generate statement objects instead of a raw strings. New: Statement folding in the IDE. New: Boolean types are now automatically handled. Fix: Remove deprecated marshals from code generation. Fix: Correct 'avg' SQL function type mapping to be REAL. Fix: Correctly detect 'julianday' SQL function. [0.6.1] - 2017-03-22 New: Delete Update and Insert statements without arguments get compiled statements generated. Fix: Using clause within a view used in a subquery doesn't error. Fix: Duplicate types on generated Mapper removed. Fix: Subqueries can be used in expressions that check against arguments. [0.6.0] - 2017-03-06 New: Select queries are now exposed as a SqlDelightStatement factory instead of string constants. New: Query JavaDoc is now copied to statement and mapper factories. New: Emit string constants for view names. Fix: Queries on views which require factories now correctly require those factories are arguments. Fix: Validate the number of arguments to an insert matches the number of columns specified. Fix: Properly encode blob literals used in where clauses. Gradle 3.3 or newer is required for this release. [0.5.1] - 2016-10-24 New: Compiled statements extend an abstract type. Fix: Primitive types in parameters will be boxed if nullable. Fix: All required factories for bind args are present in factory method. Fix: Escaped column names are marshalled correctly. [0.5.0] - 2016-10-19 New: SQLite arguments can be passed typesafely through the Factory New: IntelliJ plugin performs formatting on .sq files New: Support for SQLite timestamp literals Fix: Parameterized types can be clicked through in IntelliJ Fix: Escaped column names no longer throw RuntimeExceptions if grabbed from Cursor. Fix: Gradle plugin doesn't crash trying to print exceptions. [0.4.4] - 2016-07-20 New: Native support for shorts as column java type New: Javadoc on generated mappers and factory methods Fix: group_concat and nullif functions have proper nullability Fix: Compatibility with Android Studio 2.2-alpha Fix: WITH RECURSIVE no longer crashes plugin [0.4.3] - 2016-07-07 New: Compilation errors link to source file. New: Right-click to copy SQLDelight code as valid SQLite. New: Javadoc on named statements will appear on generated Strings. Fix: Generated view models include nullability annotations. Fix: Generated code from unions has proper type and nullability to support all possible columns. Fix: sum and round SQLite functions have proper type in generated code. Fix: CAST's, inner selects bugfixes. Fix: Autocomplete in CREATE TABLE statements. Fix: SQLite keywords can be used in packages. [0.4.2] - 2016-06-16 New: Marshal can be created from the factory. Fix: IntelliJ plugin generates factory methods with proper generic order. Fix: Function names can use any casing. [0.4.1] - 2016-06-14 Fix: IntelliJ plugin generates classes with proper generic order. Fix: Column definitions can use any casing. [0.4.0] - 2016-06-14 New: Mappers are generated per query instead of per table. New: Java types can be imported in .sq files. New: SQLite functions are validated. Fix: Remove duplicate errors. Fix: Uppercase column names and java keyword column names do not error. [0.3.2] - 2016-05-14 New: Autocompletion and find usages now work for views and aliases. Fix: Compile-time validation now allows functions to be used in selects. Fix: Support insert statements which only declare default values. Fix: Plugin no longer crashes when a project not using SQLDelight is imported. [0.3.1] - 2016-04-27 Fix: Interface visibility changed back to public to avoid Illegal Access runtime exceptions from method references. Fix: Subexpressions are evaluated properly. [0.3.0] - 2016-04-26 New: Column definitions use SQLite types and can have additional 'AS' constraint to specify java type. New: Bug reports can be sent from the IDE. Fix: Autocomplete functions properly. Fix: SQLDelight model files update on .sq file edit. Removed: Attached databases no longer supported. [0.2.2] - 2016-03-07 New: Compile-time validation of the columns used by insert, update, delete, index, and trigger statements. Fix: Don't crash IDE plugin on file move/create. [0.2.1] - 2016-03-07 New: Ctrl+ / (Cmd+ / on OSX) toggles comment of the selected line(s). New: Compile-time validation of the columns used by SQL queries. Fix: Support Windows paths in both the IDE and Gradle plugin. [0.2.0] - 2016-02-29 New: Added copy constructor to Marshal class. New: Update to Kotlin 1.0 final. Fix: Report 'sqldelight' folder structure problems in a non-failing way. Fix: Forbid columns named table_name . Their generated constant clashes with the table name constant. Fix: Ensure IDE plugin generates model classes immediately and regardless of whether .sq files were opened. Fix: Support Windows paths in both the IDE and Gradle plugin. [0.1.2] - 2016-02-13 Fix: Remove code which prevented the Gradle plugin from being used in most projects. Fix: Add missing compiler dependency on the Antlr runtime. [0.1.1] - 2016-02-12 Fix: Ensure the Gradle plugin points to the same version of the runtime as itself. [0.1.0] - 2016-02-12 Initial release.","title":"Changelog"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#152-2021-10-12","text":"","title":"[1.5.2] - 2021-10-12"},{"location":"changelog/#added","text":"[Gradle Plugin] HMPP support (#2548 by Martin Bonnin ) [IDE Plugin] Add NULL comparison inspection (by Alexander Perfilyev ) [IDE Plugin] Add inspection suppressor (#2519 by Alexander Perfilyev ) [IDE Plugin] Mixed named and positional parameters inspection (by Alexander Perfilyev ) [SQLite Driver] Add mingwX86 target. (#2558 by Nikita Kozhemyakin ) [SQLite Driver] Add M1 targets [SQLite Driver] Add linuxX64 support (#2456 by Cedric Hippmann ) [MySQL Dialect] Add ROW_COUNT function to mysql (#2523) [PostgreSQL Dialect] postgres rename, drop column (by Juan Liska ) [PostgreSQL Dialect] PostgreSQL grammar doesn't recognize CITEXT [PostgreSQL Dialect] Include TIMESTAMP WITH TIME ZONE and TIMESTAMPTZ [PostgreSQL Dialect] Add grammar for PostgreSQL GENERATED columns [Runtime] Provide SqlDriver as a parameter to AfterVersion (#2534, 2614 by Ahmed El-Helw )","title":"Added"},{"location":"changelog/#changed","text":"[Gradle Plugin] explicitely require Gradle 7.0 (#2572 by Martin Bonnin ) [Gradle Plugin] Make VerifyMigrationTask support Gradle's up-to-date checks (#2533 by Matthew Haughton ) [IDE Plugin] Don't warn with \"Join compares two columns of different types\" when joining nullable with non-nullable type (#2550 by Piotr Chmielowski ) [IDE Plugin] Clarify the error for the lowercase 'as' in column type (by Alexander Perfilyev )","title":"Changed"},{"location":"changelog/#fixed","text":"[IDE Plugin] Do not reparse under a new dialect if the project is already disposed (#2609) [IDE Plugin] If the associated virtual file is null, the module is null (#2607) [IDE Plugin] Avoid crashing during the unused query inspection (#2610) [IDE Plugin] Run the database sync write inside of a write action (#2605) [IDE Plugin] Let the IDE schedule SQLDelight syncronization [IDE Plugin] Fix npe in JavaTypeMixin (#2603 by Alexander Perfilyev ) [IDE Plugin] Fix IndexOutOfBoundsException in MismatchJoinColumnInspection (#2602 by Alexander Perfilyev ) [IDE Plugin] Add description for UnusedColumnInspection (#2600 by Alexander Perfilyev ) [IDE Plugin] Wrap PsiElement.generatedVirtualFiles into read action (#2599 by Alexander Perfilyev ) [IDE Plugin] Remove unnecessary nonnull cast (#2596) [IDE Plugin] Properly handle nulls for find usages (#2595) [IDE Plugin] Fix IDE autocomplete for generated files for Android (#2573 by Martin Bonnin ) [IDE Plugin] Fix npe in SqlDelightGotoDeclarationHandler (by Alexander Perfilyev ) [IDE Plugin] Mangle kotlin keywords in arguments inside insert stmt (#2433 by Alexander Perfilyev ) [IDE Plugin] Fix npe in SqlDelightFoldingBuilder (#2382 by Alexander Perfilyev ) [IDE Plugin] Catch ClassCastException in CopyPasteProcessor (#2369 by Alexander Perfilyev ) [IDE Plugin] Fix update live template (by Ilias Redissi ) [IDE Plugin] Adds descriptions to intention actions (#2489 by Alexander Perfilyev ) [IDE Plugin] Fix exception in CreateTriggerMixin if table is not found (by Alexander Perfilyev ) [Compiler] Topologically sort table creation statemenets [Compiler] Stop invoking forDatabaseFiles callback on directories (#2532) [Gradle Plugin] Propagate generateDatabaseInterface task dependency to potential consumers (#2518 by Martin Bonnin )","title":"Fixed"},{"location":"changelog/#151-2021-07-16","text":"","title":"[1.5.1] - 2021-07-16"},{"location":"changelog/#added_1","text":"[PostgreSQL Dialect] PostgreSQL JSONB and ON Conflict Do Nothing (by Andrew Stewart ) [PostgreSQL Dialect] Adds support for PostgreSQL ON CONFLICT (column, ...) DO UPDATE (by Andrew Stewart ) [MySQL Dialect] Support MySQL generated columns (by Jeff Gulbronson ) [Native Driver] Add watchosX64 support [IDE Plugin] Add parameter types and annotations (by Alexander Perfilyev ) [IDE Plugin] Add action to generate 'select all' query (by Alexander Perfilyev ) [IDE Plugin] Show column types in autocomplete (by Alexander Perfilyev ) [IDE Plugin] Add icons to autocomplete (by Alexander Perfilyev ) [IDE Plugin] Add action to generate 'select by primary key' query (by Alexander Perfilyev ) [IDE Plugin] Add action to generate 'insert into' query (by Alexander Perfilyev ) [IDE Plugin] Add highlighting for column names, stmt identifiers, function names (by Alexander Perfilyev ) [IDE Plugin] Add remaining query generation actions (#489 by Alexander Perfilyev ) [IDE Plugin] Show parameter hints from insert-stmt (by Alexander Perfilyev ) [IDE Plugin] Table alias intention action (by Alexander Perfilyev ) [IDE Plugin] Qualify column name intention (by Alexander Perfilyev ) [IDE Plugin] Go to declaration for kotlin property (by Alexander Perfilyev )","title":"Added"},{"location":"changelog/#changed_1","text":"[Native Driver] Improve native transaction performance by avoiding freezing and shareable data structures when possible (by Anders Ha ) [Paging 3] Bump Paging3 version to 3.0.0 stable [JS Driver] Upgrade sql.js to 1.5.0","title":"Changed"},{"location":"changelog/#fixed_1","text":"[JDBC SQLite Driver] Call close() on connection before clearing the ThreadLocal (#2444 by Hannes Stru\u00df ) [RX extensions] Fix subscription / disposal race leak (#2403 by Pierre Yves Ricau ) [Coroutines extension] Ensure we register query listener before notifying [Compiler] Sort notifyQueries to have consistent kotlin output file (by Jiayu Chen ) [Compiler] Don't annotate select query class properties with @JvmField (by Eliezer Graber ) [IDE Plugin] Fix import optimizer (#2350 by Alexander Perfilyev ) [IDE Plugin] Fix unused column inspection (by Alexander Perfilyev ) [IDE Plugin] Add nested classes support to import inspection and class annotator (by Alexander Perfilyev ) [IDE Plugin] Fix npe in CopyPasteProcessor (#2363 by Alexander Perfilyev ) [IDE Plugin] Fix crash in InlayParameterHintsProvider (#2359 by Alexander Perfilyev ) [IDE Plugin] Fix insertion of blank lines when copy-pasting any text into create table stmt (#2431 by Alexander Perfilyev )","title":"Fixed"},{"location":"changelog/#150-2021-04-23","text":"","title":"[1.5.0] - 2021-04-23"},{"location":"changelog/#added_2","text":"[SQLite Javascript Driver] Enable sqljs-driver publication (#1667 by Derek Ellis ) [Paging3 Extension] Extension for Android Paging 3 Library (#1786 by Kevin Cianfarini )","title":"Added"},{"location":"changelog/#150-2021-04-23_1","text":"","title":"[1.5.0] - 2021-04-23"},{"location":"changelog/#added_3","text":"[SQLite Javascript Driver] Enable sqljs-driver publication (#1667 by Derek Ellis ) [Paging3 Extension] Extension for Android Paging 3 Library (#1786 by Kevin Cianfarini ) [MySQL Dialect] Adds support for mysql's ON DUPLICATE KEY UPDATE conflict resolution. (by Ryan Harter ) [SQLite Dialect] Add compiler support for SQLite offsets() (by Quinton Roberts ) [IDE Plugin] Add import quick fix for unknown type (#683 by Alexander Perfilyev ) [IDE Plugin] Add unused import inspection (#1161 by Alexander Perfilyev ) [IDE Plugin] Add unused query inspection (by Alexander Perfilyev ) [IDE Plugin] Add unused column inspection (#569 by Alexander Perfilyev ) [IDE Plugin] Automatically bring imports on copy/paste (#684 by Alexander Perfilyev ) [IDE Plugin] Pop a balloon when there are incompatibilities between gradle/intellij plugin versions [IDE Plugin] Insert Into ... VALUES(?) parameter hints (#506 by Alexander Perfilyev ) [IDE Plugin] Inline parameter hints (by Alexander Perfilyev ) [Runtime] Include an API in the runtime for running migrations with callbacks (#1844)","title":"Added"},{"location":"changelog/#changed_2","text":"[Compiler] Smart cast \"IS NOT NULL\" queries (#867) [Compiler] Protect against keywords that will fail at runtime (#1471, #1629) [Gradle Plugin] Reduce size of gradle plugin from 60mb -> 13mb. [Gradle Plugin] Properly support android variants, and remove support for KMM target-specific sql (#1039) [Gradle Plugin] Pick a minimum sqlite version based on minsdk (#1684) [Native Driver] Native driver connection pool and performance updates","title":"Changed"},{"location":"changelog/#fixed_2","text":"[Compiler] NBSP before lambdas (by Beno\u00eet Quenaudon ) [Compiler] Fix incompatible types in generated bind and cursor.get statements [Compiler] SQL clause should persist adapted type (#2067) [Compiler] Column with only NULL keyword should be nullable [Compiler] Dont generate mapper lambda with type annotations (#1957) [Compiler] If custom queries would clash, use the file name as an additional package suffix (#1057, #1278) [Compiler] Ensure foreign key cascades cause query listeners to be notified (#1325, #1485) [Compiler] If unioning two of the same type, return the table type (#1342) [Compiler] Ensure params to ifnull and coalesce can be nullable (#1263) [Compiler] Correctly use query-imposed nullability for expressions [MySQL Dialect] Support MySQL if statements [PostgreSQL Dialect] Retrieve NUMERIC and DECIMAL as Double in PostgreSQL (#2118) [SQLite Dialect] UPSERT notifications should account for BEFORE/AFTER UPDATE triggers. (#2198 by Anders Ha ) [SQLite Driver] Use multiple connections for threads in the SqliteDriver unless we are in memory (#1832) [JDBC Driver] JDBC Driver assumes autoCommit is true (#2041) [JDBC Driver] Ensure that we close connections on exception (#2306) [IDE Plugin] Fix GoToDeclaration/FindUsages being broken on Windows due to path separator bug (#2054 by Angus Holder ) [IDE Plugin] Ignore gradle errors instead of crashing in the IDE. [IDE Plugin] If a sqldelight file is moved to a non-sqldelight module, do not attempt codegen [IDE Plugin] Ignore codegen errors in IDE [IDE Plugin] Ensure that we dont try to negatively substring (#2068) [IDE Plugin] Also ensure project is not disposed before running gradle action (#2155) [IDE Plugin] Arithmetic on nullable types should also be nullable (#1853) [IDE Plugin] Make 'expand * intention' work with additional projections (#2173 by Alexander Perfilyev ) [IDE Plugin] If kotlin resolution fails during GoTo, dont attempt to go to sqldelight files [IDE Plugin] If IntelliJ encounters an exception while sqldelight is indexing, dont crash [IDE Plugin] Handle exceptions that happen while detecting errors before codegen in the IDE [IDE Plugin] Make the IDE plugin compatible with Dynamic Plugins (#1536) [Gradle Plugin] Race condition generating a database using WorkerApi (#2062 by St\u00e9phane Nicolas ) [Gradle Plugin] classLoaderIsolation prevents custom jdbc usage (#2048 by Ben Asher ) [Gradle Plugin] Improve missing packageName error message (by Niklas Baudy ) [Gradle Plugin] SQLDelight bleeds IntelliJ dependencies onto buildscript class path (#1998) [Gradle Plugin] Fix gradle build caching (#2075) [Gradle Plugin] Do not depend on kotlin-native-utils in Gradle plugin (by Ilya Matveev ) [Gradle Plugin] Also write the database if there are only migration files (#2094) [Gradle Plugin] Ensure diamond dependencies only get picked up once in the final compilation unit (#1455) Also just a general shoutout to Matthew Haughton who did a lot of work to improve the SQLDelight infrastructure this release.","title":"Fixed"},{"location":"changelog/#144-2020-10-08","text":"","title":"[1.4.4] - 2020-10-08"},{"location":"changelog/#added_4","text":"[PostgreSQL Dialect] Support data-modifying statements in WITH [PostgreSQL Dialect] Support substring function [Gradle Plugin] Added verifyMigrations flag for validating migrations during SQLDelight compilation (#1872)","title":"Added"},{"location":"changelog/#changed_3","text":"[Compiler] Flag SQLite specific functions as unknown in non-SQLite dialects [Gradle Plugin] Provide a warning when the sqldelight plugin is applied but no databases are configured (#1421)","title":"Changed"},{"location":"changelog/#fixed_3","text":"[Compiler] Report an error when binding a column name in an ORDER BY clause (#1187 by Eliezer Graber ) [Compiler] Registry warnings appear when generating the db interface (#1792) [Compiler] Incorrect type inference for case statement (#1811) [Compiler] Provide better errors for migration files with no version (#2006) [Compiler] Required database type to marshal is incorrect for some database type ColumnAdapter's (#2012) [Compiler] Nullability of CAST (#1261) [Compiler] Lots of name shadowed warnings in query wrappers (#1946 by Eliezer Graber ) [Compiler] Generated code is using full qualifier names (#1939) [IDE Plugin] Trigger sqldelight code gen from gradle syncs [IDE Plugin] Plugin not regenerating database interface when changing .sq files (#1945) [IDE Plugin] Issue when moving files to new packages (#444) [IDE Plugin] If theres nowhere to move the cursor, do nothing instead of crashing (#1994) [IDE Plugin] Use empty package name for files outside of a gradle project (#1973) [IDE Plugin] Fail gracefully for invalid types (#1943) [IDE Plugin] Throw a better error message when encountering an unknown expression (#1958) [Gradle Plugin] SQLDelight bleeds IntelliJ dependencies onto buildscript class path (#1998) [Gradle Plugin] \"JavadocIntegrationKt not found\" compilation error when adding method doc in *.sq file (#1982) [Gradle Plugin] SqlDeslight gradle plugin doesn't support Configuration Caching (CoCa). (#1947 by St\u00e9phane Nicolas ) [SQLite JDBC Driver] SQLException: database in auto-commit mode (#1832) [Coroutines Extension] Fix IR backend for coroutines-extensions (#1918 by Derek Ellis )","title":"Fixed"},{"location":"changelog/#143-2020-09-04","text":"","title":"[1.4.3] - 2020-09-04"},{"location":"changelog/#added_5","text":"[MySQL Dialect] Add support for MySQL last_insert_id function (by Kelvin Law ) [PostgreSQL Dialect] Support SERIAL data type (by Veyndan Stuart & Felipe Lima ) [PostgreSQL Dialect] Support PostgreSQL RETURNING (by Veyndan Stuart )","title":"Added"},{"location":"changelog/#fixed_4","text":"[MySQL Dialect] Treat MySQL AUTO_INCREMENT as having a default value (#1823) [Compiler] Fix Upsert statement compiler error (#1809 by Eliezer Graber ) [Compiler] Fix issue with invalid Kotlin being generated (#1925 by Eliezer Graber ) [Compiler] Have a better error message for unknown functions (#1843) [Compiler] Expose string as the type for the second parameter of instr [IDE Plugin] Fix daemon bloat and UI thread stalling for IDE plugin (#1916) [IDE Plugin] Handle null module scenario (#1902) [IDE Plugin] In unconfigured sq files return empty string for the package name (#1920) [IDE Plugin] Fix grouped statements and add an integration test for them (#1820) [IDE Plugin] Use built in ModuleUtil to find the module for an element (#1854) [IDE Plugin] Only add valid elements to lookups (#1909) [IDE Plugin] Parent can be null (#1857)","title":"Fixed"},{"location":"changelog/#142-2020-08-27","text":"","title":"[1.4.2] - 2020-08-27"},{"location":"changelog/#added_6","text":"[Runtime] Support new JS IR backend [Gradle Plugin] Add generateSqlDelightInterface Gradle task. (by Niklas Baudy ) [Gradle Plugin] Add verifySqlDelightMigration Gradle task. (by Niklas Baudy )","title":"Added"},{"location":"changelog/#fixed_5","text":"[IDE Plugin] Use the gradle tooling API to facilitate data sharing between the IDE and gradle [IDE Plugin] Default to false for schema derivation [IDE Plugin] Properly retrieve the commonMain source set [MySQL Dialect] Added minute to mySqlFunctionType() (by MaaxGr )","title":"Fixed"},{"location":"changelog/#141-2020-08-21","text":"","title":"[1.4.1] - 2020-08-21"},{"location":"changelog/#added_7","text":"[Runtime] Support Kotlin 1.4.0 (#1859)","title":"Added"},{"location":"changelog/#changed_4","text":"[Gradle Plugin] Make AGP dependency compileOnly (#1362)","title":"Changed"},{"location":"changelog/#fixed_6","text":"[Compiler] Add optional javadoc to column defintion rule and to table interface generator (#1224 by Daniel Eke ) [SQLite Dialect] Add support for sqlite fts5 auxiliary functions highlight, snippet, and bm25 (by Daniel Rampelt ) [MySQL Dialect] Support MySQL bit data type [MySQL Dialect] Support MySQL binary literals [PostgreSQL Dialect] Expose SERIAL from sql-psi (by Veyndan Stuart ) [PostgreSQL Dialect] Add BOOLEAN data type (by Veyndan Stuart ) [PostgreSQL Dialect] Add NULL column constraint (by Veyndan Stuart ) [HSQL Dialect] Adds AUTO_INCREMENT support to HSQL (by Ryan Harter )","title":"Fixed"},{"location":"changelog/#140-2020-06-22","text":"","title":"[1.4.0] - 2020-06-22"},{"location":"changelog/#added_8","text":"[MySQL Dialect] MySQL support (by Jeff Gulbronson & Veyndan Stuart ) [PostgreSQL Dialect] Experimental PostgreSQL support (by Veyndan Stuart ) [HSQL Dialect] Experimental H2 support (by Marius Volkhart ) [SQLite Dialect] SQLite FTS5 support (by Ben Asher & James Palawaga ) [SQLite Dialect] Support alter table rename column (#1505 by Angus Holder ) [IDE] IDE support for migration (.sqm) files [IDE] Add SQLDelight Live Templates that mimic built-in SQL Live Templates (#1154 by Veyndan Stuart ) [IDE] Add new SqlDelight file action (#42 by Roman Zavarnitsyn ) [Runtime] transactionWithReturn API for transactions that return results [Compiler] Syntax for grouping multiple SQL statements together in a .sq file [Compiler] Support generating schemas from migration files [Gradle Plugin] Add a task for outputting migration files as valid sql","title":"Added"},{"location":"changelog/#changed_5","text":"[Documentation] Overhaul of the documentation website (by Saket Narayan ) [Gradle Plugin] Improve unsupported dialect error message (by Veyndan Stuart ) [IDE] Dynamically change file icon based on dialect (by Veyndan Stuart ) [JDBC Driver] Expose a JdbcDriver constructor off of javax.sql.DataSource (#1614)","title":"Changed"},{"location":"changelog/#fixed_7","text":"[Compiler]Support Javadoc on tables and fix multiple javadoc in one file (#1224) [Compiler] Enable inserting a value for synthesized columns (#1351) [Compiler] Fix inconsistency in directory name sanitizing (by Zac Sweers ) [Compiler] Synthesized columns should retain nullability across joins (#1656) [Compiler] Pin the delete statement on the delete keyword (#1643) [Compiler] Fix quoting (#1525 by Angus Holder ) [Compiler] Fix the between operator to properly recurse into expressions (#1279) [Compiler] Give better error for missing table/column when creating an index (#1372) [Compiler] Enable using the outer querys projection in join constraints (#1346) [Native Driver] Make execute use transationPool (by Ben Asher ) [JDBC Driver] Use the jdbc transaction APIs instead of sqlite (#1693) [IDE] Fix virtualFile references to always be the original file (#1782) [IDE] Use the correct throwable when reporting errors to bugsnag (#1262) [Paging Extension] Fix leaky DataSource (#1628) [Gradle Plugin] If the output db file already exists when generating a schema, delete it (#1645) [Gradle Plugin] Fail migration validation if there are gaps [Gradle Plugin] Explicitely use the file index we set (#1644)","title":"Fixed"},{"location":"changelog/#130-2020-04-03","text":"New: [Gradle] Dialect property to specify with sql dialect to compile against. New: [Compiler] #1009 Experimental support of the mysql dialect. New: [Compiler] #1436 Support of sqlite:3.24 dialect and upsert. New: [JDBC Driver] Split out JDBC driver from sqlite jvm driver. Fix: [Compiler] #1199 Support lambdas of any length. Fix: [Compiler] #1610 Fix the return type of avg() to be nullable. Fix: [IntelliJ] #1594 Fix path separator handling which broke Goto and Find Usages on Windows.","title":"[1.3.0] - 2020-04-03"},{"location":"changelog/#122-2020-01-22","text":"New: [Runtime] Support for Windows (mingW), tvOS, watchOS, and macOS architectures. Fix: [Compiler] Return type of sum() should be nullable. Fix: [Paging] Pass Transacter into QueryDataSourceFactory to avoid race conditions. Fix: [IntelliJ Plugin] Don't search through dependencies when looking for a file's package name. Fix: [Gradle] #862 Change validator logs in Gradle to debug level. Enhancement: [Gradle] Convert GenerateSchemaTask to use Gradle worker. Note: sqldelight-runtime artifact renamed to runtime.","title":"[1.2.2] - 2020-01-22"},{"location":"changelog/#121-2019-12-11","text":"Fix: [Gradle] Kotlin Native 1.3.60 support. Fix: [Gradle] #1287 Warning when syncing. Fix: [Compiler] #1469 SynetheticAccessor creation for query. Fix: [JVM Driver] Fixed memory leak. NOTE: The coroutine extension artifact requires kotlinx bintray maven repository be added to your buildscript.","title":"[1.2.1] - 2019-12-11"},{"location":"changelog/#120-2019-08-30","text":"New: [Runtime] Stable Flow api. Fix: [Gradle] Kotlin Native 1.3.50 support. Fix: [Gradle] #1380 Clean build sometimes fails. Fix: [Gradle] #1348 Running verify tasks prints \"Could not retrieve functions\". Fix: [Compile] #1405 Can't build project if query contains FTS table joined. Fix: [Gradle] #1266 Sporadic gradle build failure while having multiple database modules.","title":"[1.2.0] - 2019-08-30"},{"location":"changelog/#114-2019-07-11","text":"New: [Runtime] Experimental kotlin Flow api. Fix: [Gradle] Kotlin/Native 1.3.40 compatibility. Fix: [Gradle] #1243 Fix for usage of SQLDelight with Gradle configure on demand. Fix: [Gradle] #1385 Fix for usage of SQLDelight with incremental annotation processing. Fix: [Gradle] Allow gradle tasks to cache. Fix: [Gradle] #1274 Enable usage of sqldelight extension with kotlin dsl. Fix: [Compiler] Unique ids are generated for each query deterministically. Fix: [Compiler] Only notify listening queries when a transaction is complete. Fix: [JVM Driver] #1370 Force JdbcSqliteDriver users to supply a DB URL.","title":"[1.1.4] - 2019-07-11"},{"location":"changelog/#113-2019-04-14","text":"Gradle Metadata 1.0 release.","title":"[1.1.3] - 2019-04-14"},{"location":"changelog/#112-2019-04-14","text":"New: [Runtime] #1267 Logging driver decorator. Fix: [Compiler] #1254 Split string literals which are longer than 2^16 characters. Fix: [Gradle] #1260 generated sources are recognized as iOS source in Multiplatform Project. Fix: [IDE] #1290 kotlin.KotlinNullPointerException in CopyAsSqliteAction.kt:43. Fix: [Gradle] #1268 Running linkDebugFrameworkIos* tasks fail in recent versions.","title":"[1.1.2] - 2019-04-14"},{"location":"changelog/#111-2019-03-01","text":"Fix: [Gradle] Fix module dependency compilation for android projects. Fix: [Gradle] #1246 Set up api dependencies in afterEvaluate. Fix: [Compiler] Array types are properly printed.","title":"[1.1.1] - 2019-03-01"},{"location":"changelog/#110-2019-02-27","text":"New: [Gradle] #502 Allow specifying schema module dependencies. Enhancement: [Compiler] #1111 Table errors are sorted before other errors. Fix: [Compiler] #1225 Return the correct type for REAL literals. Fix: [Compiler] #1218 docid propagates through triggers.","title":"[1.1.0] - 2019-02-27"},{"location":"changelog/#103-2019-01-30","text":"Enhancement: [Runtime] #1195 Native Driver/Runtime Arm32. Enhancement: [Runtime] #1190 Expose the mapper from the Query type.","title":"[1.0.3] - 2019-01-30"},{"location":"changelog/#102-2019-01-26","text":"Fix: [Gradle Plugin] Update to kotlin 1.3.20. Fix: [Runtime] Transactions no longer swallow exceptions.","title":"[1.0.2] - 2019-01-26"},{"location":"changelog/#101-2019-01-21","text":"Enhancement: [Native Driver] Allow passing directory name to DatabaseConfiguration. Enhancement: [Compiler] #1173 Files without a package fail compilation. Fix: [IDE] Properly report IDE errors to Square. Fix: [IDE] #1162 Types in the same package show as error but work fine. Fix: [IDE] #1166 Renaming a table fails with NPE. Fix: [Compiler] #1167 Throws an exception when trying to parse complex SQL statements with UNION and SELECT.","title":"[1.0.1] - 2019-01-21"},{"location":"changelog/#100-2019-01-08","text":"New: Complete overhaul of generated code, now in kotlin. New: RxJava2 extensions artifact. New: Android Paging extensions artifact. New: Kotlin Multiplatform support. New: Android, iOS and JVM SQLite driver artifacts. New: Transaction API.","title":"[1.0.0] - 2019-01-08"},{"location":"changelog/#070-2018-02-12","text":"New: Generated code has been updated to use the Support SQLite library only. All queries now generate statement objects instead of a raw strings. New: Statement folding in the IDE. New: Boolean types are now automatically handled. Fix: Remove deprecated marshals from code generation. Fix: Correct 'avg' SQL function type mapping to be REAL. Fix: Correctly detect 'julianday' SQL function.","title":"[0.7.0] - 2018-02-12"},{"location":"changelog/#061-2017-03-22","text":"New: Delete Update and Insert statements without arguments get compiled statements generated. Fix: Using clause within a view used in a subquery doesn't error. Fix: Duplicate types on generated Mapper removed. Fix: Subqueries can be used in expressions that check against arguments.","title":"[0.6.1] - 2017-03-22"},{"location":"changelog/#060-2017-03-06","text":"New: Select queries are now exposed as a SqlDelightStatement factory instead of string constants. New: Query JavaDoc is now copied to statement and mapper factories. New: Emit string constants for view names. Fix: Queries on views which require factories now correctly require those factories are arguments. Fix: Validate the number of arguments to an insert matches the number of columns specified. Fix: Properly encode blob literals used in where clauses. Gradle 3.3 or newer is required for this release.","title":"[0.6.0] - 2017-03-06"},{"location":"changelog/#051-2016-10-24","text":"New: Compiled statements extend an abstract type. Fix: Primitive types in parameters will be boxed if nullable. Fix: All required factories for bind args are present in factory method. Fix: Escaped column names are marshalled correctly.","title":"[0.5.1] - 2016-10-24"},{"location":"changelog/#050-2016-10-19","text":"New: SQLite arguments can be passed typesafely through the Factory New: IntelliJ plugin performs formatting on .sq files New: Support for SQLite timestamp literals Fix: Parameterized types can be clicked through in IntelliJ Fix: Escaped column names no longer throw RuntimeExceptions if grabbed from Cursor. Fix: Gradle plugin doesn't crash trying to print exceptions.","title":"[0.5.0] - 2016-10-19"},{"location":"changelog/#044-2016-07-20","text":"New: Native support for shorts as column java type New: Javadoc on generated mappers and factory methods Fix: group_concat and nullif functions have proper nullability Fix: Compatibility with Android Studio 2.2-alpha Fix: WITH RECURSIVE no longer crashes plugin","title":"[0.4.4] - 2016-07-20"},{"location":"changelog/#043-2016-07-07","text":"New: Compilation errors link to source file. New: Right-click to copy SQLDelight code as valid SQLite. New: Javadoc on named statements will appear on generated Strings. Fix: Generated view models include nullability annotations. Fix: Generated code from unions has proper type and nullability to support all possible columns. Fix: sum and round SQLite functions have proper type in generated code. Fix: CAST's, inner selects bugfixes. Fix: Autocomplete in CREATE TABLE statements. Fix: SQLite keywords can be used in packages.","title":"[0.4.3] - 2016-07-07"},{"location":"changelog/#042-2016-06-16","text":"New: Marshal can be created from the factory. Fix: IntelliJ plugin generates factory methods with proper generic order. Fix: Function names can use any casing.","title":"[0.4.2] - 2016-06-16"},{"location":"changelog/#041-2016-06-14","text":"Fix: IntelliJ plugin generates classes with proper generic order. Fix: Column definitions can use any casing.","title":"[0.4.1] - 2016-06-14"},{"location":"changelog/#040-2016-06-14","text":"New: Mappers are generated per query instead of per table. New: Java types can be imported in .sq files. New: SQLite functions are validated. Fix: Remove duplicate errors. Fix: Uppercase column names and java keyword column names do not error.","title":"[0.4.0] - 2016-06-14"},{"location":"changelog/#032-2016-05-14","text":"New: Autocompletion and find usages now work for views and aliases. Fix: Compile-time validation now allows functions to be used in selects. Fix: Support insert statements which only declare default values. Fix: Plugin no longer crashes when a project not using SQLDelight is imported.","title":"[0.3.2] - 2016-05-14"},{"location":"changelog/#031-2016-04-27","text":"Fix: Interface visibility changed back to public to avoid Illegal Access runtime exceptions from method references. Fix: Subexpressions are evaluated properly.","title":"[0.3.1] - 2016-04-27"},{"location":"changelog/#030-2016-04-26","text":"New: Column definitions use SQLite types and can have additional 'AS' constraint to specify java type. New: Bug reports can be sent from the IDE. Fix: Autocomplete functions properly. Fix: SQLDelight model files update on .sq file edit. Removed: Attached databases no longer supported.","title":"[0.3.0] - 2016-04-26"},{"location":"changelog/#022-2016-03-07","text":"New: Compile-time validation of the columns used by insert, update, delete, index, and trigger statements. Fix: Don't crash IDE plugin on file move/create.","title":"[0.2.2] - 2016-03-07"},{"location":"changelog/#021-2016-03-07","text":"New: Ctrl+ / (Cmd+ / on OSX) toggles comment of the selected line(s). New: Compile-time validation of the columns used by SQL queries. Fix: Support Windows paths in both the IDE and Gradle plugin.","title":"[0.2.1] - 2016-03-07"},{"location":"changelog/#020-2016-02-29","text":"New: Added copy constructor to Marshal class. New: Update to Kotlin 1.0 final. Fix: Report 'sqldelight' folder structure problems in a non-failing way. Fix: Forbid columns named table_name . Their generated constant clashes with the table name constant. Fix: Ensure IDE plugin generates model classes immediately and regardless of whether .sq files were opened. Fix: Support Windows paths in both the IDE and Gradle plugin.","title":"[0.2.0] - 2016-02-29"},{"location":"changelog/#012-2016-02-13","text":"Fix: Remove code which prevented the Gradle plugin from being used in most projects. Fix: Add missing compiler dependency on the Antlr runtime.","title":"[0.1.2] - 2016-02-13"},{"location":"changelog/#011-2016-02-12","text":"Fix: Ensure the Gradle plugin points to the same version of the runtime as itself.","title":"[0.1.1] - 2016-02-12"},{"location":"changelog/#010-2016-02-12","text":"Initial release.","title":"[0.1.0] - 2016-02-12"},{"location":"code_of_conduct/","text":"Open Source Code of Conduct At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter. Diversity Statement We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below. Thanks Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work. Reporting Guide If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Code of Conduct"},{"location":"code_of_conduct/#open-source-code-of-conduct","text":"At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.","title":"Open Source Code of Conduct"},{"location":"code_of_conduct/#diversity-statement","text":"We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Diversity Statement"},{"location":"code_of_conduct/#reporting-issues","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below.","title":"Reporting Issues"},{"location":"code_of_conduct/#thanks","text":"Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work.","title":"Thanks"},{"location":"code_of_conduct/#reporting-guide","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Reporting Guide"},{"location":"contributing/","text":"Contributing If you would like to contribute code to this project you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) . SQLDelight If you're looking to get started with contributing, look below for specific guides depending on which part of SQLDelight you'd like to contribute to. If you're still unsure, comment in the issue you're looking in to with where you're getting stuck and we'll respond there - or create an issue for the thing you're trying to do and start the discussion. IDE Plugin If you want to fix a bug or extend the IDE, code changes will likely happen in the sqldelight-idea-plugin module. You can test your changes using the ./gradlew runIde task and you can live debug using ./gradlew runIde --debug-jvm . If you're encountering a bug in the IDE but cannot reproduce it in a sample project, you can live debug your IDE. You'll need a second installation of IntelliJ to do this. You can use Toolbox to do this by scrolling to the bottom of the IDE list and selecting a different version of IntelliJ. In the IDE you'd like to use the debugger in, check out the SQLDelight repo and then create a new Remote Run Configuration. It will already populate \"Command line arguments for remote JVM\", something like -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 . Copy that value, then open the IDE you would like to debug. Select Help -> Edit Custom VM Options , and paste the line you copied to the bottom of the file that is opened. Restart the IDE you want to debug, then once it's started up open the IDE you created the configuration in, and attach the debugger using the remote configuration you created. For more information on building IDE plugins and features for them see the Official Jetbrains Documentation or join the Jetbrains Platform Slack . Drivers If you're interested in creating your own driver, you can do so outside of the SQLDelight repository using the runtime artifact. To test the driver you can depend on the driver-test and extend DriverTest and TransactionTest to ensure it works as SQLDelight would expect. Gradle If you're encountering a gradle issue, start by creating a test fixture in sqldelight-gradle-plugin/src/test similar to the other folders there which reproduces your issue. Feel free to just open a PR with this failing test if you don't know how to fix! Test cases are greatly appreciated. The integration tests show how to set up an entire gradle project which will run SQLite/MySQL/PostgreSQL/etc and execute SQL queries using their respective runtime environments and SQLDelight. Consider adding a test to these already existing integration tests if you're encountering runtime issues in SQLDelight. Compiler There are many layers to SQLDelight's compiler - if you are strictly interested in the codegen (and not the parsing of SQL) then you will want to make your contributions in the sqldelight-compiler module. If you are interested in the parser you'll need to contribute to sql-psi . SQLDelight uses kotlinpoet for generating kotlin code, be sure to use it's APIs for referencing kotlin types so imports still work correctly. If you modify the codegen in any way, run a ./gradlew build before opening a pull request, as it will update the integration test in sqldelight-compiler:integration-tests . If you'd like to write an integration test (meaning running SQL queries in a runtime environment), add a test to sqldelight-compiler:integration-tests . SQL PSI In the next section we will go through how to contribute to the parser and PSI layer, but before doing that you should read a blog post on multiple dialects to understand the various moving pieces in sql-psi . As with SQLDelight, if you're encountering an issue but don't know how to contribute a fix or need assistance, comment in the GitHub issue or create a new one to start the discussion. For any changes in SQL-PSI, you will want to add a test fixture in the corresponding core/src/test/fixtures_* folder. The fixtures folder (no suffix) runs for all dialects. After your change has been merged to sql-psi, if there are changes you also need to make in SQLDelight, check out the sql-psi-dev branch on SQLDelight and target it with your PR. It uses the snapshot releases of sql-psi so you can build your SQLDelight change roughly 10 minutes after the sql-psi change has been merged. Grammar If you are adding to the grammar, first decide if this is a new rule you are adding to an existing grammar, or a rule you would like to override from ANSI SQL (which is found in sql.bnf ). In both cases, you will want to define that rule in your new grammar, but in the case of overriding an ANSI SQL rule, add it to the overrides list and set the override attribute on the rule: overrides ::= my_rule my_rule ::= SOME_TOKEN { override = true } The definition of your rule should start by being an exact copy/paste of the rule from ANSI-SQL. To reference rules from ANSI-SQL, you need to surround it in {}, so you should surround all external rules in your overriding rule with {}: my_rule ::= internal_rule {external_rule} { override = true } internal_rule ::= SOME_TOKEN One caveat is that referencing the expr rule from ANSI-SQL should look like <<expr '-1'>> because it is special and cannot be overridden. Any tokens that you want to use from ANSI SQL should also be manually imported: { parserImports = [ \"static com.alecstrong.sql.psi.core.psi.SqlTypes.DELETE\" \"static com.alecstrong.sql.psi.core.psi.SqlTypes.FROM\" ] } overrides ::= delete delete ::= DELETE FROM {table_name} { override = true } Dialects cannot add their own tokens, but you can require exact text by surrounding it with \"\": my_rule ::= \"SOME_TOKEN\" Overriding rules must still generate code which confirms to the original rules types, so make sure to implement and extend the existing types for the original rule: my_rule ::= internal_rule {external_rule} { extends = \"com.alecstrong.sql.psi.core.psi.impl.SqlMyRuleImpl\" implements = \"com.alecstrong.sql.psi.core.psi.SqlMyRule\" overrides = true } To see an example of overriding rules in the grammar, check out this pr which adds RETURNING syntax to PostgreSQL. Rule Behavior Often times you want to modify the behavior of the PSI layer (for example throwing errors for situations you want to fail compilation for). To do this, have your rule use a mixin instead of an extends which is a class you write containing that new logic: my_rule ::= interal_rule {external_rule} { mixin = \"com.alecstrong.sql.psi.MyRuleMixin\" implements = \"com.alecstrong.sql.psi.core.psi.SqlMyRule\" overrides = true } And then in that class ensure that it implements the original ANSI SQL type and the SQL-PSI base class SqlCompositeElementImpl : class MyRule( node: ASTNode ) : SqlCompositeElementImpl(node), SqlMyRule { fun annotate(annotationHolder: SqlAnnotationHolder) { if (internal_rule.text == \"bad_text\") { annotationHolder.createErrorAnnotation(\"Invalid text value\", internal_rule) } } } For example, the DropIndexMixin verifies the index being dropped exists in the schema. If you have a question about contributing not covered in this doc please feel free to open an issue on SqlDelight or open a PR so we can work on improving it!","title":"Contributing"},{"location":"contributing/#contributing","text":"If you would like to contribute code to this project you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"contributing/#sqldelight","text":"If you're looking to get started with contributing, look below for specific guides depending on which part of SQLDelight you'd like to contribute to. If you're still unsure, comment in the issue you're looking in to with where you're getting stuck and we'll respond there - or create an issue for the thing you're trying to do and start the discussion.","title":"SQLDelight"},{"location":"contributing/#ide-plugin","text":"If you want to fix a bug or extend the IDE, code changes will likely happen in the sqldelight-idea-plugin module. You can test your changes using the ./gradlew runIde task and you can live debug using ./gradlew runIde --debug-jvm . If you're encountering a bug in the IDE but cannot reproduce it in a sample project, you can live debug your IDE. You'll need a second installation of IntelliJ to do this. You can use Toolbox to do this by scrolling to the bottom of the IDE list and selecting a different version of IntelliJ. In the IDE you'd like to use the debugger in, check out the SQLDelight repo and then create a new Remote Run Configuration. It will already populate \"Command line arguments for remote JVM\", something like -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 . Copy that value, then open the IDE you would like to debug. Select Help -> Edit Custom VM Options , and paste the line you copied to the bottom of the file that is opened. Restart the IDE you want to debug, then once it's started up open the IDE you created the configuration in, and attach the debugger using the remote configuration you created. For more information on building IDE plugins and features for them see the Official Jetbrains Documentation or join the Jetbrains Platform Slack .","title":"IDE Plugin"},{"location":"contributing/#drivers","text":"If you're interested in creating your own driver, you can do so outside of the SQLDelight repository using the runtime artifact. To test the driver you can depend on the driver-test and extend DriverTest and TransactionTest to ensure it works as SQLDelight would expect.","title":"Drivers"},{"location":"contributing/#gradle","text":"If you're encountering a gradle issue, start by creating a test fixture in sqldelight-gradle-plugin/src/test similar to the other folders there which reproduces your issue. Feel free to just open a PR with this failing test if you don't know how to fix! Test cases are greatly appreciated. The integration tests show how to set up an entire gradle project which will run SQLite/MySQL/PostgreSQL/etc and execute SQL queries using their respective runtime environments and SQLDelight. Consider adding a test to these already existing integration tests if you're encountering runtime issues in SQLDelight.","title":"Gradle"},{"location":"contributing/#compiler","text":"There are many layers to SQLDelight's compiler - if you are strictly interested in the codegen (and not the parsing of SQL) then you will want to make your contributions in the sqldelight-compiler module. If you are interested in the parser you'll need to contribute to sql-psi . SQLDelight uses kotlinpoet for generating kotlin code, be sure to use it's APIs for referencing kotlin types so imports still work correctly. If you modify the codegen in any way, run a ./gradlew build before opening a pull request, as it will update the integration test in sqldelight-compiler:integration-tests . If you'd like to write an integration test (meaning running SQL queries in a runtime environment), add a test to sqldelight-compiler:integration-tests .","title":"Compiler"},{"location":"contributing/#sql-psi","text":"In the next section we will go through how to contribute to the parser and PSI layer, but before doing that you should read a blog post on multiple dialects to understand the various moving pieces in sql-psi . As with SQLDelight, if you're encountering an issue but don't know how to contribute a fix or need assistance, comment in the GitHub issue or create a new one to start the discussion. For any changes in SQL-PSI, you will want to add a test fixture in the corresponding core/src/test/fixtures_* folder. The fixtures folder (no suffix) runs for all dialects. After your change has been merged to sql-psi, if there are changes you also need to make in SQLDelight, check out the sql-psi-dev branch on SQLDelight and target it with your PR. It uses the snapshot releases of sql-psi so you can build your SQLDelight change roughly 10 minutes after the sql-psi change has been merged.","title":"SQL PSI"},{"location":"contributing/#grammar","text":"If you are adding to the grammar, first decide if this is a new rule you are adding to an existing grammar, or a rule you would like to override from ANSI SQL (which is found in sql.bnf ). In both cases, you will want to define that rule in your new grammar, but in the case of overriding an ANSI SQL rule, add it to the overrides list and set the override attribute on the rule: overrides ::= my_rule my_rule ::= SOME_TOKEN { override = true } The definition of your rule should start by being an exact copy/paste of the rule from ANSI-SQL. To reference rules from ANSI-SQL, you need to surround it in {}, so you should surround all external rules in your overriding rule with {}: my_rule ::= internal_rule {external_rule} { override = true } internal_rule ::= SOME_TOKEN One caveat is that referencing the expr rule from ANSI-SQL should look like <<expr '-1'>> because it is special and cannot be overridden. Any tokens that you want to use from ANSI SQL should also be manually imported: { parserImports = [ \"static com.alecstrong.sql.psi.core.psi.SqlTypes.DELETE\" \"static com.alecstrong.sql.psi.core.psi.SqlTypes.FROM\" ] } overrides ::= delete delete ::= DELETE FROM {table_name} { override = true } Dialects cannot add their own tokens, but you can require exact text by surrounding it with \"\": my_rule ::= \"SOME_TOKEN\" Overriding rules must still generate code which confirms to the original rules types, so make sure to implement and extend the existing types for the original rule: my_rule ::= internal_rule {external_rule} { extends = \"com.alecstrong.sql.psi.core.psi.impl.SqlMyRuleImpl\" implements = \"com.alecstrong.sql.psi.core.psi.SqlMyRule\" overrides = true } To see an example of overriding rules in the grammar, check out this pr which adds RETURNING syntax to PostgreSQL.","title":"Grammar"},{"location":"contributing/#rule-behavior","text":"Often times you want to modify the behavior of the PSI layer (for example throwing errors for situations you want to fail compilation for). To do this, have your rule use a mixin instead of an extends which is a class you write containing that new logic: my_rule ::= interal_rule {external_rule} { mixin = \"com.alecstrong.sql.psi.MyRuleMixin\" implements = \"com.alecstrong.sql.psi.core.psi.SqlMyRule\" overrides = true } And then in that class ensure that it implements the original ANSI SQL type and the SQL-PSI base class SqlCompositeElementImpl : class MyRule( node: ASTNode ) : SqlCompositeElementImpl(node), SqlMyRule { fun annotate(annotationHolder: SqlAnnotationHolder) { if (internal_rule.text == \"bad_text\") { annotationHolder.createErrorAnnotation(\"Invalid text value\", internal_rule) } } } For example, the DropIndexMixin verifies the index being dropped exists in the schema. If you have a question about contributing not covered in this doc please feel free to open an issue on SqlDelight or open a PR so we can work on improving it!","title":"Rule Behavior"},{"location":"upgrading/","text":"Upgrading from Versions before 1.0 If you're still on SQLDelight 0.6 doing the upgrade to 0.7 first so you stay on the SupportSQLite artifact will likely be easiest Upgrade the gradle plugin from 0.7 to 0.7.1. This will upgrade the arch.persistence.db dependency to 1.1.1, but should have no effect on your usage of sqldelight. Upgrade the gradle plugin from 0.7.1 to 0.7.2. This changes the runtime package from com.squareup.sqldelight to com.squareup.sqldelight.prerelease , so you will need to change references in your own code. Upgrade the gradle plugin from 0.7.2 to 0.9.0. This upgrades the transitive dependencies and generated code to instead use AndroidX, which is a requirement of SQLDelight. This should be done at the same time as you upgrading your own project to AndroidX, and cannot be done separately since SQLDelight generates code which references android support/AndroidX. ALTERNATIVELY Upgrade the gradle plugin from 0.7 to 0.8.0 before then upgrading to 0.9.0. This upgrades to AndroidX without changing the sqldelight package name to com.squareup.sqldelight.prerelease Suppose on SQLDelight 0.9 you have this User.sq file: CREATE TABLE user ( id INTEGER NOT NULL PRIMARY KEY , name TEXT NOT NULL ); insertDefaultData : INSERT INTO user VALUES ( 1 , 'Alec' ); users : SELECT * FROM user ; names : SELECT name FROM user ; insertUser : INSERT INTO user VALUES ( ? , ? ); This will generate the UserModel class with methods for your queries. Copy and paste all *Model.java files out of the build directory and into your src/main/java folder. Upgrade the gradle plugin from 0.9 to 1.0.0-rc4. Note your build will fail at this point because of the model code having undefined references to the old SQL Delight runtime (like SqlDelightStatement ). To add these back in add an implementation dependency on com.squareup.sqldelight:runtime:0.9.0 . At this point your build should still be working, but changes to .sq files will not be reflected in your *Model.java files. If things aren't working at this point, please file an issue! Begin by modifying your SupportSQLiteOpenHelper.Callback to call into the now generated Database which holds generated code for SQL Delight 1.0: //Before @Override void onCreate ( SupportSQLiteDatabase db ) { db . execSql ( UserModel . CREATE_TABLE ); db . execSql ( UserModel . INSERTDEFAULTDATA ); // Other create table/initialization } In SQL Delight 1.0 all unlabeled statements in .sq files (including CREATE statements) will be run during onCreate , so we can remove the insertDefaultData identifier from above: User.sq ... --insertDefaultData: INSERT INTO user VALUES ( 1 , 'Alec' ); ... and now your SupportSQLiteOpenHelper.Callback should call into the Database for create @Override void onCreate ( SupportSQLiteDatabase db ) { SqlDriver driver = AndroidSqliteDriver ( db ) Database . Schema . create ( driver ) } You can do the same for your migrations if you place them in .sqm files, but thats not necessary part of the upgrade. At this point things should still work normally. Next add in the code to create your Database as part of an object graph/singleton pattern/whevs: @Provides @Singleton static SupportSQLiteOpenHelper provideDatabaseHelper ( @App Context context ) { SupportSQLiteOpenHelper . Configuration config = SupportSQLiteOpenHelper . Configuration . builder ( context ) . name ( DATABASE_NAME ) . callback ( new MyDatabaseCallback ()) . build (); return new FrameworkSQLiteOpenHelperFactory (). create ( config ); } @Provides @Singleton static Database provideDatabase ( SupportSQLiteOpenHelper helper ) { return new Database ( new AndroidSqliteDriver ( helper )); } If you're also using SQL Brite make sure you create a BriteDatabase with the same SupportSQLiteOpenHelper that's being used to create the Database . Things should still be working. The following assume you're using SQL Brite to get reactive callbacks from the database, but upgrades using only SQL Delight will be similar. Mutating queries can be converted individually by using the Database : before: private val insertUser : UserModel . InsertUser by lazy { UserModel . InsertUser ( datbaseOpenHelper . writableDatabase ) } insertUser . bind ( 2 , \"Jake\" ) insertUser . executeInsert () after: database . userQueries . insertUser ( 2 , \"Jake\" ) You no longer need a \"Factory\" type to perform queries, the query wrapper is all that is needed. before: val query = User . FACTORY . users () val usersObservable = briteDatabase . createQuery ( query . tables , query . statement , query . args ) . mapToList ( User . FACTORY . usersMapper () :: map ) after: val usersObservable = database . userQueries . users () . asObservable ( Schedulers . io ()) // The scheduler to run the query on. . mapToList () If you still want to use a custom type, pass it as a parameter to the query. val myUsersObservable = database . userQueries . users ( :: MyUser ) . asObservable ( Schedulers . io ()) . mapToList () Once you no longer have references to UserModel.java , delete the whole class. Repeat for each of your *Model.java files until upgrading is complete!","title":"Upgrading from Versions before 1.0"},{"location":"upgrading/#upgrading-from-versions-before-10","text":"If you're still on SQLDelight 0.6 doing the upgrade to 0.7 first so you stay on the SupportSQLite artifact will likely be easiest Upgrade the gradle plugin from 0.7 to 0.7.1. This will upgrade the arch.persistence.db dependency to 1.1.1, but should have no effect on your usage of sqldelight. Upgrade the gradle plugin from 0.7.1 to 0.7.2. This changes the runtime package from com.squareup.sqldelight to com.squareup.sqldelight.prerelease , so you will need to change references in your own code. Upgrade the gradle plugin from 0.7.2 to 0.9.0. This upgrades the transitive dependencies and generated code to instead use AndroidX, which is a requirement of SQLDelight. This should be done at the same time as you upgrading your own project to AndroidX, and cannot be done separately since SQLDelight generates code which references android support/AndroidX. ALTERNATIVELY Upgrade the gradle plugin from 0.7 to 0.8.0 before then upgrading to 0.9.0. This upgrades to AndroidX without changing the sqldelight package name to com.squareup.sqldelight.prerelease Suppose on SQLDelight 0.9 you have this User.sq file: CREATE TABLE user ( id INTEGER NOT NULL PRIMARY KEY , name TEXT NOT NULL ); insertDefaultData : INSERT INTO user VALUES ( 1 , 'Alec' ); users : SELECT * FROM user ; names : SELECT name FROM user ; insertUser : INSERT INTO user VALUES ( ? , ? ); This will generate the UserModel class with methods for your queries. Copy and paste all *Model.java files out of the build directory and into your src/main/java folder. Upgrade the gradle plugin from 0.9 to 1.0.0-rc4. Note your build will fail at this point because of the model code having undefined references to the old SQL Delight runtime (like SqlDelightStatement ). To add these back in add an implementation dependency on com.squareup.sqldelight:runtime:0.9.0 . At this point your build should still be working, but changes to .sq files will not be reflected in your *Model.java files. If things aren't working at this point, please file an issue! Begin by modifying your SupportSQLiteOpenHelper.Callback to call into the now generated Database which holds generated code for SQL Delight 1.0: //Before @Override void onCreate ( SupportSQLiteDatabase db ) { db . execSql ( UserModel . CREATE_TABLE ); db . execSql ( UserModel . INSERTDEFAULTDATA ); // Other create table/initialization } In SQL Delight 1.0 all unlabeled statements in .sq files (including CREATE statements) will be run during onCreate , so we can remove the insertDefaultData identifier from above: User.sq ... --insertDefaultData: INSERT INTO user VALUES ( 1 , 'Alec' ); ... and now your SupportSQLiteOpenHelper.Callback should call into the Database for create @Override void onCreate ( SupportSQLiteDatabase db ) { SqlDriver driver = AndroidSqliteDriver ( db ) Database . Schema . create ( driver ) } You can do the same for your migrations if you place them in .sqm files, but thats not necessary part of the upgrade. At this point things should still work normally. Next add in the code to create your Database as part of an object graph/singleton pattern/whevs: @Provides @Singleton static SupportSQLiteOpenHelper provideDatabaseHelper ( @App Context context ) { SupportSQLiteOpenHelper . Configuration config = SupportSQLiteOpenHelper . Configuration . builder ( context ) . name ( DATABASE_NAME ) . callback ( new MyDatabaseCallback ()) . build (); return new FrameworkSQLiteOpenHelperFactory (). create ( config ); } @Provides @Singleton static Database provideDatabase ( SupportSQLiteOpenHelper helper ) { return new Database ( new AndroidSqliteDriver ( helper )); } If you're also using SQL Brite make sure you create a BriteDatabase with the same SupportSQLiteOpenHelper that's being used to create the Database . Things should still be working. The following assume you're using SQL Brite to get reactive callbacks from the database, but upgrades using only SQL Delight will be similar. Mutating queries can be converted individually by using the Database : before: private val insertUser : UserModel . InsertUser by lazy { UserModel . InsertUser ( datbaseOpenHelper . writableDatabase ) } insertUser . bind ( 2 , \"Jake\" ) insertUser . executeInsert () after: database . userQueries . insertUser ( 2 , \"Jake\" ) You no longer need a \"Factory\" type to perform queries, the query wrapper is all that is needed. before: val query = User . FACTORY . users () val usersObservable = briteDatabase . createQuery ( query . tables , query . statement , query . args ) . mapToList ( User . FACTORY . usersMapper () :: map ) after: val usersObservable = database . userQueries . users () . asObservable ( Schedulers . io ()) // The scheduler to run the query on. . mapToList () If you still want to use a custom type, pass it as a parameter to the query. val myUsersObservable = database . userQueries . users ( :: MyUser ) . asObservable ( Schedulers . io ()) . mapToList () Once you no longer have references to UserModel.java , delete the whole class. Repeat for each of your *Model.java files until upgrading is complete!","title":"Upgrading from Versions before 1.0"},{"location":"1.x/","text":"// rxjava3-extensions rxjava3-extensions Packages Name com.squareup.sqldelight.runtime.rx3","title":"rxjava3-extensions   - SQLDelight"},{"location":"1.x/#rxjava3-extensions","text":"","title":"rxjava3-extensions"},{"location":"1.x/#packages","text":"Name com.squareup.sqldelight.runtime.rx3","title":"Packages"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/","text":"// android-driver / com.squareup.sqldelight.android Package com.squareup.sqldelight.android Types Name Summary AndroidSqliteDriver [androidJvm] Content class AndroidSqliteDriver : SqlDriver","title":"Package com.squareup.sqldelight.android   - SQLDelight"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/#package-comsquareupsqldelightandroid","text":"","title":"Package com.squareup.sqldelight.android"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/#types","text":"Name Summary AndroidSqliteDriver [androidJvm] Content class AndroidSqliteDriver : SqlDriver","title":"Types"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/","text":"// android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver AndroidSqliteDriver [androidJvm] class AndroidSqliteDriver : SqlDriver Constructors AndroidSqliteDriver [androidJvm] fun AndroidSqliteDriver (openHelper: SupportSQLiteOpenHelper ) AndroidSqliteDriver [androidJvm] @ JvmOverloads () fun AndroidSqliteDriver (schema: SqlDriver.Schema, context: Context , name: String ? = null, factory: SupportSQLiteOpenHelper.Factory = FrameworkSQLiteOpenHelperFactory(), callback: SupportSQLiteOpenHelper.Callback = AndroidSqliteDriver.Callback(schema), cacheSize: Int = DEFAULT_CACHE_SIZE, useNoBackupDirectory: Boolean = false) AndroidSqliteDriver [androidJvm] @ JvmOverloads () fun AndroidSqliteDriver (database: SupportSQLiteDatabase , cacheSize: Int = DEFAULT_CACHE_SIZE) Types Name Summary Callback [androidJvm] Content open class Callback ( schema : SqlDriver.Schema, callbacks : AfterVersionWithDriver) : SupportSQLiteOpenHelper.Callback Transaction [androidJvm] Content inner class Transaction ( enclosingTransaction : Transacter.Transaction?) : Transacter.Transaction Functions Name Summary close [androidJvm] Content open override fun close () currentTransaction [androidJvm] Content open override fun currentTransaction (): Transacter.Transaction execute [androidJvm] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?) executeQuery [androidJvm] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor newTransaction [androidJvm] Content open override fun newTransaction (): Transacter.Transaction","title":"AndroidSqliteDriver   - SQLDelight"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/#androidsqlitedriver","text":"[androidJvm] class AndroidSqliteDriver : SqlDriver","title":"AndroidSqliteDriver"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/#constructors","text":"AndroidSqliteDriver [androidJvm] fun AndroidSqliteDriver (openHelper: SupportSQLiteOpenHelper ) AndroidSqliteDriver [androidJvm] @ JvmOverloads () fun AndroidSqliteDriver (schema: SqlDriver.Schema, context: Context , name: String ? = null, factory: SupportSQLiteOpenHelper.Factory = FrameworkSQLiteOpenHelperFactory(), callback: SupportSQLiteOpenHelper.Callback = AndroidSqliteDriver.Callback(schema), cacheSize: Int = DEFAULT_CACHE_SIZE, useNoBackupDirectory: Boolean = false) AndroidSqliteDriver [androidJvm] @ JvmOverloads () fun AndroidSqliteDriver (database: SupportSQLiteDatabase , cacheSize: Int = DEFAULT_CACHE_SIZE)","title":"Constructors"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/#types","text":"Name Summary Callback [androidJvm] Content open class Callback ( schema : SqlDriver.Schema, callbacks : AfterVersionWithDriver) : SupportSQLiteOpenHelper.Callback Transaction [androidJvm] Content inner class Transaction ( enclosingTransaction : Transacter.Transaction?) : Transacter.Transaction","title":"Types"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/#functions","text":"Name Summary close [androidJvm] Content open override fun close () currentTransaction [androidJvm] Content open override fun currentTransaction (): Transacter.Transaction execute [androidJvm] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?) executeQuery [androidJvm] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor newTransaction [androidJvm] Content open override fun newTransaction (): Transacter.Transaction","title":"Functions"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-android-sqlite-driver/","text":"// android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / AndroidSqliteDriver AndroidSqliteDriver [androidJvm] Content fun AndroidSqliteDriver (openHelper: SupportSQLiteOpenHelper ) @ JvmOverloads () fun AndroidSqliteDriver (database: SupportSQLiteDatabase , cacheSize: Int = DEFAULT_CACHE_SIZE) [androidJvm] Content @ JvmOverloads () fun AndroidSqliteDriver (schema: SqlDriver.Schema, context: Context , name: String ? = null, factory: SupportSQLiteOpenHelper.Factory = FrameworkSQLiteOpenHelperFactory(), callback: SupportSQLiteOpenHelper.Callback = AndroidSqliteDriver.Callback(schema), cacheSize: Int = DEFAULT_CACHE_SIZE, useNoBackupDirectory: Boolean = false) More info Parameters androidJvm cacheSize The number of compiled sqlite statements to keep in memory per connection. Defaults to 20. useNoBackupDirectory Sets whether to use a no backup directory or not.","title":"AndroidSqliteDriver   - SQLDelight"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-android-sqlite-driver/#androidsqlitedriver","text":"[androidJvm] Content fun AndroidSqliteDriver (openHelper: SupportSQLiteOpenHelper ) @ JvmOverloads () fun AndroidSqliteDriver (database: SupportSQLiteDatabase , cacheSize: Int = DEFAULT_CACHE_SIZE) [androidJvm] Content @ JvmOverloads () fun AndroidSqliteDriver (schema: SqlDriver.Schema, context: Context , name: String ? = null, factory: SupportSQLiteOpenHelper.Factory = FrameworkSQLiteOpenHelperFactory(), callback: SupportSQLiteOpenHelper.Callback = AndroidSqliteDriver.Callback(schema), cacheSize: Int = DEFAULT_CACHE_SIZE, useNoBackupDirectory: Boolean = false) More info","title":"AndroidSqliteDriver"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-android-sqlite-driver/#parameters","text":"androidJvm cacheSize The number of compiled sqlite statements to keep in memory per connection. Defaults to 20. useNoBackupDirectory Sets whether to use a no backup directory or not.","title":"Parameters"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/close/","text":"// android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / close close [androidJvm] Content open override fun close ()","title":"close   - SQLDelight"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/close/#close","text":"[androidJvm] Content open override fun close ()","title":"close"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/current-transaction/","text":"// android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / currentTransaction currentTransaction [androidJvm] Content open override fun currentTransaction (): Transacter.Transaction","title":"currentTransaction   - SQLDelight"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/current-transaction/#currenttransaction","text":"[androidJvm] Content open override fun currentTransaction (): Transacter.Transaction","title":"currentTransaction"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/execute-query/","text":"// android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / executeQuery executeQuery [androidJvm] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor","title":"executeQuery   - SQLDelight"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/execute-query/#executequery","text":"[androidJvm] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor","title":"executeQuery"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/execute/","text":"// android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / execute execute [androidJvm] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?)","title":"execute   - SQLDelight"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/execute/#execute","text":"[androidJvm] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?)","title":"execute"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/new-transaction/","text":"// android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / newTransaction newTransaction [androidJvm] Content open override fun newTransaction (): Transacter.Transaction","title":"newTransaction   - SQLDelight"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/new-transaction/#newtransaction","text":"[androidJvm] Content open override fun newTransaction (): Transacter.Transaction","title":"newTransaction"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/","text":"// android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / Callback Callback [androidJvm] open class Callback ( schema : SqlDriver.Schema, callbacks : AfterVersionWithDriver) : SupportSQLiteOpenHelper.Callback Constructors Callback [androidJvm] fun Callback (schema: SqlDriver.Schema) Callback [androidJvm] fun Callback (schema: SqlDriver.Schema, vararg callbacks: AfterVersion) Functions Name Summary onConfigure [androidJvm] Content open fun onConfigure (@ NonNull ()p0: SupportSQLiteDatabase ) onCorruption [androidJvm] Content open fun onCorruption (@ NonNull ()p0: SupportSQLiteDatabase ) onCreate [androidJvm] Content open override fun onCreate (db: SupportSQLiteDatabase ) onDowngrade [androidJvm] Content open fun onDowngrade (@ NonNull ()p0: SupportSQLiteDatabase , p1: Int , p2: Int ) onOpen [androidJvm] Content open fun onOpen (@ NonNull ()p0: SupportSQLiteDatabase ) onUpgrade [androidJvm] Content open override fun onUpgrade (db: SupportSQLiteDatabase , oldVersion: Int , newVersion: Int ) Properties Name Summary version [androidJvm] val version : Int","title":"Callback   - SQLDelight"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/#callback","text":"[androidJvm] open class Callback ( schema : SqlDriver.Schema, callbacks : AfterVersionWithDriver) : SupportSQLiteOpenHelper.Callback","title":"Callback"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/#constructors","text":"Callback [androidJvm] fun Callback (schema: SqlDriver.Schema) Callback [androidJvm] fun Callback (schema: SqlDriver.Schema, vararg callbacks: AfterVersion)","title":"Constructors"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/#functions","text":"Name Summary onConfigure [androidJvm] Content open fun onConfigure (@ NonNull ()p0: SupportSQLiteDatabase ) onCorruption [androidJvm] Content open fun onCorruption (@ NonNull ()p0: SupportSQLiteDatabase ) onCreate [androidJvm] Content open override fun onCreate (db: SupportSQLiteDatabase ) onDowngrade [androidJvm] Content open fun onDowngrade (@ NonNull ()p0: SupportSQLiteDatabase , p1: Int , p2: Int ) onOpen [androidJvm] Content open fun onOpen (@ NonNull ()p0: SupportSQLiteDatabase ) onUpgrade [androidJvm] Content open override fun onUpgrade (db: SupportSQLiteDatabase , oldVersion: Int , newVersion: Int )","title":"Functions"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/#properties","text":"Name Summary version [androidJvm] val version : Int","title":"Properties"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/-callback/","text":"// android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / Callback / Callback Callback [androidJvm] Content fun Callback (schema: SqlDriver.Schema) fun Callback (schema: SqlDriver.Schema, vararg callbacks: AfterVersion) fun Callback (schema: SqlDriver.Schema, vararg callbacks: AfterVersionWithDriver)","title":"Callback   - SQLDelight"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/-callback/#callback","text":"[androidJvm] Content fun Callback (schema: SqlDriver.Schema) fun Callback (schema: SqlDriver.Schema, vararg callbacks: AfterVersion) fun Callback (schema: SqlDriver.Schema, vararg callbacks: AfterVersionWithDriver)","title":"Callback"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/on-create/","text":"// android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / Callback / onCreate onCreate [androidJvm] Content open override fun onCreate (db: SupportSQLiteDatabase )","title":"onCreate   - SQLDelight"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/on-create/#oncreate","text":"[androidJvm] Content open override fun onCreate (db: SupportSQLiteDatabase )","title":"onCreate"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/on-upgrade/","text":"// android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / Callback / onUpgrade onUpgrade [androidJvm] Content open override fun onUpgrade (db: SupportSQLiteDatabase , oldVersion: Int , newVersion: Int )","title":"onUpgrade   - SQLDelight"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/on-upgrade/#onupgrade","text":"[androidJvm] Content open override fun onUpgrade (db: SupportSQLiteDatabase , oldVersion: Int , newVersion: Int )","title":"onUpgrade"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-transaction/","text":"// android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / Transaction Transaction [androidJvm] inner class Transaction ( enclosingTransaction : Transacter.Transaction?) : Transacter.Transaction Functions Name Summary afterCommit [androidJvm] Content open override fun afterCommit (function: () -> Unit ) afterRollback [androidJvm] Content open override fun afterRollback (function: () -> Unit )","title":"Transaction   - SQLDelight"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-transaction/#transaction","text":"[androidJvm] inner class Transaction ( enclosingTransaction : Transacter.Transaction?) : Transacter.Transaction","title":"Transaction"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-transaction/#functions","text":"Name Summary afterCommit [androidJvm] Content open override fun afterCommit (function: () -> Unit ) afterRollback [androidJvm] Content open override fun afterRollback (function: () -> Unit )","title":"Functions"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-transaction/-transaction/","text":"// android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / Transaction / Transaction Transaction [androidJvm] Content fun Transaction (enclosingTransaction: Transacter.Transaction?)","title":"Transaction   - SQLDelight"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-transaction/-transaction/#transaction","text":"[androidJvm] Content fun Transaction (enclosingTransaction: Transacter.Transaction?)","title":"Transaction"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/","text":"// android-paging / com.squareup.sqldelight.android.paging Package com.squareup.sqldelight.android.paging Types Name Summary QueryDataSourceFactory [androidJvm] Content class QueryDataSourceFactory < RowType : Any >( queryProvider : (limit: Long , offset: Long ) -> Query< RowType >, countQuery : Query< Long >, transacter : Transacter) : DataSource.Factory < Int , RowType >","title":"Package com.squareup.sqldelight.android.paging   - SQLDelight"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/#package-comsquareupsqldelightandroidpaging","text":"","title":"Package com.squareup.sqldelight.android.paging"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/#types","text":"Name Summary QueryDataSourceFactory [androidJvm] Content class QueryDataSourceFactory < RowType : Any >( queryProvider : (limit: Long , offset: Long ) -> Query< RowType >, countQuery : Query< Long >, transacter : Transacter) : DataSource.Factory < Int , RowType >","title":"Types"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/-query-data-source-factory/","text":"// android-paging / com.squareup.sqldelight.android.paging / QueryDataSourceFactory QueryDataSourceFactory [androidJvm] class QueryDataSourceFactory < RowType : Any >( queryProvider : (limit: Long , offset: Long ) -> Query< RowType >, countQuery : Query< Long >, transacter : Transacter) : DataSource.Factory < Int , RowType > Functions Name Summary create [androidJvm] Content open override fun create (): PositionalDataSource < RowType > map [androidJvm] Content @ NonNull () open fun < ToValue : Any > map (@ NonNull ()p0: Function < RowType , ToValue >): DataSource.Factory < Int , ToValue > mapByPage [androidJvm] Content @ NonNull () open fun < ToValue : Any > mapByPage (@ NonNull ()p0: Function < MutableList < RowType >, MutableList < ToValue >>): DataSource.Factory < Int , ToValue >","title":"QueryDataSourceFactory   - SQLDelight"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/-query-data-source-factory/#querydatasourcefactory","text":"[androidJvm] class QueryDataSourceFactory < RowType : Any >( queryProvider : (limit: Long , offset: Long ) -> Query< RowType >, countQuery : Query< Long >, transacter : Transacter) : DataSource.Factory < Int , RowType >","title":"QueryDataSourceFactory"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/-query-data-source-factory/#functions","text":"Name Summary create [androidJvm] Content open override fun create (): PositionalDataSource < RowType > map [androidJvm] Content @ NonNull () open fun < ToValue : Any > map (@ NonNull ()p0: Function < RowType , ToValue >): DataSource.Factory < Int , ToValue > mapByPage [androidJvm] Content @ NonNull () open fun < ToValue : Any > mapByPage (@ NonNull ()p0: Function < MutableList < RowType >, MutableList < ToValue >>): DataSource.Factory < Int , ToValue >","title":"Functions"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/-query-data-source-factory/-query-data-source-factory/","text":"// android-paging / com.squareup.sqldelight.android.paging / QueryDataSourceFactory / QueryDataSourceFactory QueryDataSourceFactory [androidJvm] Content fun < RowType : Any > QueryDataSourceFactory (queryProvider: (limit: Long , offset: Long ) -> Query< RowType >, countQuery: Query< Long >, transacter: Transacter)","title":"QueryDataSourceFactory   - SQLDelight"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/-query-data-source-factory/-query-data-source-factory/#querydatasourcefactory","text":"[androidJvm] Content fun < RowType : Any > QueryDataSourceFactory (queryProvider: (limit: Long , offset: Long ) -> Query< RowType >, countQuery: Query< Long >, transacter: Transacter)","title":"QueryDataSourceFactory"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/-query-data-source-factory/create/","text":"// android-paging / com.squareup.sqldelight.android.paging / QueryDataSourceFactory / create create [androidJvm] Content open override fun create (): PositionalDataSource < RowType >","title":"create   - SQLDelight"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/-query-data-source-factory/create/#create","text":"[androidJvm] Content open override fun create (): PositionalDataSource < RowType >","title":"create"},{"location":"1.x/android-paging3/com.squareup.sqldelight.android.paging3/","text":"// android-paging3 / com.squareup.sqldelight.android.paging3 Package com.squareup.sqldelight.android.paging3 Functions Name Summary QueryPagingSource [androidJvm] Content fun < RowType : Any > QueryPagingSource (countQuery: Query< Long >, transacter: Transacter, dispatcher: CoroutineDispatcher = Dispatchers.IO, queryProvider: (limit: Long , offset: Long ) -> Query< RowType >): PagingSource < Long , RowType > fun < Key : Any , RowType : Any > QueryPagingSource (transacter: Transacter, dispatcher: CoroutineDispatcher, pageBoundariesProvider: ( Key ?, limit: Long ) -> Query< Key >, queryProvider: ( Key , Key ?) -> Query< RowType >): PagingSource < Key , RowType > More info Create a PagingSource that pages through results according to queries generated by queryProvider .","title":"Package com.squareup.sqldelight.android.paging3   - SQLDelight"},{"location":"1.x/android-paging3/com.squareup.sqldelight.android.paging3/#package-comsquareupsqldelightandroidpaging3","text":"","title":"Package com.squareup.sqldelight.android.paging3"},{"location":"1.x/android-paging3/com.squareup.sqldelight.android.paging3/#functions","text":"Name Summary QueryPagingSource [androidJvm] Content fun < RowType : Any > QueryPagingSource (countQuery: Query< Long >, transacter: Transacter, dispatcher: CoroutineDispatcher = Dispatchers.IO, queryProvider: (limit: Long , offset: Long ) -> Query< RowType >): PagingSource < Long , RowType > fun < Key : Any , RowType : Any > QueryPagingSource (transacter: Transacter, dispatcher: CoroutineDispatcher, pageBoundariesProvider: ( Key ?, limit: Long ) -> Query< Key >, queryProvider: ( Key , Key ?) -> Query< RowType >): PagingSource < Key , RowType > More info Create a PagingSource that pages through results according to queries generated by queryProvider .","title":"Functions"},{"location":"1.x/android-paging3/com.squareup.sqldelight.android.paging3/-query-paging-source/","text":"// android-paging3 / com.squareup.sqldelight.android.paging3 / QueryPagingSource QueryPagingSource [androidJvm] Content fun < RowType : Any > QueryPagingSource (countQuery: Query< Long >, transacter: Transacter, dispatcher: CoroutineDispatcher = Dispatchers.IO, queryProvider: (limit: Long , offset: Long ) -> Query< RowType >): PagingSource < Long , RowType > More info Create a PagingSource that pages through results according to queries generated by queryProvider . Queries returned by queryProvider should expect to do SQL offset/limit based paging. For that reason, countQuery is required to calculate pages and page offsets. An example query returned by queryProvider could look like: SELECT value FROM numbers LIMIT 10 OFFSET 100; Queries will be executed on dispatcher . [androidJvm] Content fun < Key : Any , RowType : Any > QueryPagingSource (transacter: Transacter, dispatcher: CoroutineDispatcher, pageBoundariesProvider: ( Key ?, limit: Long ) -> Query< Key >, queryProvider: ( Key , Key ?) -> Query< RowType >): PagingSource < Key , RowType > More info Create a PagingSource that pages through results according to queries generated by queryProvider . Queries returned by queryProvider should expected to do keyset paging. For that reason, queries should be arranged by an non-ambigious ORDER BY clause. Key must be a unique clause that rows are ordered by. For performance reasons, an index should be present on Key . pageBoundariesProvider is a callback that produces a query containing Key items that specifies where each page boundary exists within the full dataset. For example: The dataset [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] ordered ascending with a page size of 2 would produce page boundaries [0, 2, 4, 6, 8]. The dataset [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] ordered ascending with a page size of 3 would produce page boundaries [0, 3, 6, 9]. Callbacks made from pageBoundariesProvider may include an anchor key which, if present, should appear in the resulting query. Because page boundaries are computed ahead of time, PagingConfig.initialLoadSize should match PagingConfig.pageSize . Failing to do so will result in unexpected page sizes, as pageBoundariesProvider is called a single time during the first call to PagingSource.load on this source. Generally, it's only feasible to produce page boundaries using SQLite window functions. An example query to generate page boundaries like shown above would look like the following. SELECT value FROM ( SELECT value, CASE WHEN ((row_number() OVER(ORDER BY value ASC) - 1) % :limit) = 0 THEN 1 WHEN value = :anchor THEN 1 ELSE 0 END page_boundary FROM numbers ORDER BY value ASC ) WHERE page_boundary = 1; SQLite window queries became available as of version 3.25.0. For this reason, consuming applications will likely need a minSdk of 30 set or bundle a SQLite module separate from the OS provided module. An example query returned by queryProvider could look like: SELECT value FROM numbers WHERE value >= :beginInclusive AND (value < :endExclusive OR :endExclusive IS NULL) ORDER BY value ASC; Queries will be executed on dispatcher . This PagingSource does not support jumping. If your use case requires jumping, use the offset based QueryPagingSource function.","title":"QueryPagingSource   - SQLDelight"},{"location":"1.x/android-paging3/com.squareup.sqldelight.android.paging3/-query-paging-source/#querypagingsource","text":"[androidJvm] Content fun < RowType : Any > QueryPagingSource (countQuery: Query< Long >, transacter: Transacter, dispatcher: CoroutineDispatcher = Dispatchers.IO, queryProvider: (limit: Long , offset: Long ) -> Query< RowType >): PagingSource < Long , RowType > More info Create a PagingSource that pages through results according to queries generated by queryProvider . Queries returned by queryProvider should expect to do SQL offset/limit based paging. For that reason, countQuery is required to calculate pages and page offsets. An example query returned by queryProvider could look like: SELECT value FROM numbers LIMIT 10 OFFSET 100; Queries will be executed on dispatcher . [androidJvm] Content fun < Key : Any , RowType : Any > QueryPagingSource (transacter: Transacter, dispatcher: CoroutineDispatcher, pageBoundariesProvider: ( Key ?, limit: Long ) -> Query< Key >, queryProvider: ( Key , Key ?) -> Query< RowType >): PagingSource < Key , RowType > More info Create a PagingSource that pages through results according to queries generated by queryProvider . Queries returned by queryProvider should expected to do keyset paging. For that reason, queries should be arranged by an non-ambigious ORDER BY clause. Key must be a unique clause that rows are ordered by. For performance reasons, an index should be present on Key . pageBoundariesProvider is a callback that produces a query containing Key items that specifies where each page boundary exists within the full dataset. For example: The dataset [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] ordered ascending with a page size of 2 would produce page boundaries [0, 2, 4, 6, 8]. The dataset [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] ordered ascending with a page size of 3 would produce page boundaries [0, 3, 6, 9]. Callbacks made from pageBoundariesProvider may include an anchor key which, if present, should appear in the resulting query. Because page boundaries are computed ahead of time, PagingConfig.initialLoadSize should match PagingConfig.pageSize . Failing to do so will result in unexpected page sizes, as pageBoundariesProvider is called a single time during the first call to PagingSource.load on this source. Generally, it's only feasible to produce page boundaries using SQLite window functions. An example query to generate page boundaries like shown above would look like the following. SELECT value FROM ( SELECT value, CASE WHEN ((row_number() OVER(ORDER BY value ASC) - 1) % :limit) = 0 THEN 1 WHEN value = :anchor THEN 1 ELSE 0 END page_boundary FROM numbers ORDER BY value ASC ) WHERE page_boundary = 1; SQLite window queries became available as of version 3.25.0. For this reason, consuming applications will likely need a minSdk of 30 set or bundle a SQLite module separate from the OS provided module. An example query returned by queryProvider could look like: SELECT value FROM numbers WHERE value >= :beginInclusive AND (value < :endExclusive OR :endExclusive IS NULL) ORDER BY value ASC; Queries will be executed on dispatcher . This PagingSource does not support jumping. If your use case requires jumping, use the offset based QueryPagingSource function.","title":"QueryPagingSource"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/","text":"// coroutines-extensions / com.squareup.sqldelight.runtime.coroutines Package com.squareup.sqldelight.runtime.coroutines Functions Name Summary asFlow [common] Content @ JvmName (name = toFlow) fun < T : Any > Query< T >. asFlow (): Flow<Query< T >> More info Turns this Query into a Flow which emits whenever the underlying result set changes. mapToList [common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToList (context: CoroutineContext = Dispatchers.Default): Flow< List < T >> mapToOne [common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToOne (context: CoroutineContext = Dispatchers.Default): Flow< T > mapToOneNotNull [common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToOneNotNull (context: CoroutineContext = Dispatchers.Default): Flow< T > mapToOneOrDefault [common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToOneOrDefault (defaultValue: T , context: CoroutineContext = Dispatchers.Default): Flow< T > mapToOneOrNull [common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToOneOrNull (context: CoroutineContext = Dispatchers.Default): Flow< T ?>","title":"Package com.squareup.sqldelight.runtime.coroutines   - SQLDelight"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/#package-comsquareupsqldelightruntimecoroutines","text":"","title":"Package com.squareup.sqldelight.runtime.coroutines"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/#functions","text":"Name Summary asFlow [common] Content @ JvmName (name = toFlow) fun < T : Any > Query< T >. asFlow (): Flow<Query< T >> More info Turns this Query into a Flow which emits whenever the underlying result set changes. mapToList [common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToList (context: CoroutineContext = Dispatchers.Default): Flow< List < T >> mapToOne [common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToOne (context: CoroutineContext = Dispatchers.Default): Flow< T > mapToOneNotNull [common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToOneNotNull (context: CoroutineContext = Dispatchers.Default): Flow< T > mapToOneOrDefault [common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToOneOrDefault (defaultValue: T , context: CoroutineContext = Dispatchers.Default): Flow< T > mapToOneOrNull [common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToOneOrNull (context: CoroutineContext = Dispatchers.Default): Flow< T ?>","title":"Functions"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/as-flow/","text":"// coroutines-extensions / com.squareup.sqldelight.runtime.coroutines / asFlow asFlow [common] Content @ JvmName (name = toFlow) fun < T : Any > Query< T >. asFlow (): Flow<Query< T >> More info Turns this Query into a Flow which emits whenever the underlying result set changes.","title":"asFlow   - SQLDelight"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/as-flow/#asflow","text":"[common] Content @ JvmName (name = toFlow) fun < T : Any > Query< T >. asFlow (): Flow<Query< T >> More info Turns this Query into a Flow which emits whenever the underlying result set changes.","title":"asFlow"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-list/","text":"// coroutines-extensions / com.squareup.sqldelight.runtime.coroutines / mapToList mapToList [common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToList (context: CoroutineContext = Dispatchers.Default): Flow< List < T >>","title":"mapToList   - SQLDelight"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-list/#maptolist","text":"[common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToList (context: CoroutineContext = Dispatchers.Default): Flow< List < T >>","title":"mapToList"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-one-not-null/","text":"// coroutines-extensions / com.squareup.sqldelight.runtime.coroutines / mapToOneNotNull mapToOneNotNull [common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToOneNotNull (context: CoroutineContext = Dispatchers.Default): Flow< T >","title":"mapToOneNotNull   - SQLDelight"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-one-not-null/#maptoonenotnull","text":"[common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToOneNotNull (context: CoroutineContext = Dispatchers.Default): Flow< T >","title":"mapToOneNotNull"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-one-or-default/","text":"// coroutines-extensions / com.squareup.sqldelight.runtime.coroutines / mapToOneOrDefault mapToOneOrDefault [common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToOneOrDefault (defaultValue: T , context: CoroutineContext = Dispatchers.Default): Flow< T >","title":"mapToOneOrDefault   - SQLDelight"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-one-or-default/#maptooneordefault","text":"[common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToOneOrDefault (defaultValue: T , context: CoroutineContext = Dispatchers.Default): Flow< T >","title":"mapToOneOrDefault"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-one-or-null/","text":"// coroutines-extensions / com.squareup.sqldelight.runtime.coroutines / mapToOneOrNull mapToOneOrNull [common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToOneOrNull (context: CoroutineContext = Dispatchers.Default): Flow< T ?>","title":"mapToOneOrNull   - SQLDelight"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-one-or-null/#maptooneornull","text":"[common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToOneOrNull (context: CoroutineContext = Dispatchers.Default): Flow< T ?>","title":"mapToOneOrNull"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-one/","text":"// coroutines-extensions / com.squareup.sqldelight.runtime.coroutines / mapToOne mapToOne [common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToOne (context: CoroutineContext = Dispatchers.Default): Flow< T >","title":"mapToOne   - SQLDelight"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-one/#maptoone","text":"[common] Content @ JvmOverloads () fun < T : Any > Flow<Query< T >>. mapToOne (context: CoroutineContext = Dispatchers.Default): Flow< T >","title":"mapToOne"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver Package com.squareup.sqldelight.sqlite.driver Types Name Summary ConnectionManager [jvm] Content interface ConnectionManager JdbcDriver [jvm] Content abstract class JdbcDriver : SqlDriver, ConnectionManager Functions Name Summary asJdbcDriver [jvm] Content @ JvmName (name = fromDataSource) fun DataSource . asJdbcDriver (): JdbcDriver","title":"Package com.squareup.sqldelight.sqlite.driver   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/#package-comsquareupsqldelightsqlitedriver","text":"","title":"Package com.squareup.sqldelight.sqlite.driver"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/#types","text":"Name Summary ConnectionManager [jvm] Content interface ConnectionManager JdbcDriver [jvm] Content abstract class JdbcDriver : SqlDriver, ConnectionManager","title":"Types"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/#functions","text":"Name Summary asJdbcDriver [jvm] Content @ JvmName (name = fromDataSource) fun DataSource . asJdbcDriver (): JdbcDriver","title":"Functions"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/as-jdbc-driver/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / asJdbcDriver asJdbcDriver [jvm] Content @ JvmName (name = fromDataSource) fun DataSource . asJdbcDriver (): JdbcDriver","title":"asJdbcDriver   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/as-jdbc-driver/#asjdbcdriver","text":"[jvm] Content @ JvmName (name = fromDataSource) fun DataSource . asJdbcDriver (): JdbcDriver","title":"asJdbcDriver"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / ConnectionManager ConnectionManager [jvm] interface ConnectionManager Types Name Summary Transaction [jvm] Content class Transaction ( enclosingTransaction : ConnectionManager.Transaction ?, connectionManager : ConnectionManager , connection : Connection ) : Transacter.Transaction Functions Name Summary beginTransaction [jvm] Content abstract fun Connection . beginTransaction () close [jvm] Content abstract fun close () closeConnection [jvm] Content abstract fun closeConnection (connection: Connection ) endTransaction [jvm] Content abstract fun Connection . endTransaction () getConnection [jvm] Content abstract fun getConnection (): Connection rollbackTransaction [jvm] Content abstract fun Connection . rollbackTransaction () Properties Name Summary transaction [jvm] abstract var transaction : ConnectionManager.Transaction ? Inheritors Name JdbcDriver","title":"ConnectionManager   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/#connectionmanager","text":"[jvm] interface ConnectionManager","title":"ConnectionManager"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/#types","text":"Name Summary Transaction [jvm] Content class Transaction ( enclosingTransaction : ConnectionManager.Transaction ?, connectionManager : ConnectionManager , connection : Connection ) : Transacter.Transaction","title":"Types"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/#functions","text":"Name Summary beginTransaction [jvm] Content abstract fun Connection . beginTransaction () close [jvm] Content abstract fun close () closeConnection [jvm] Content abstract fun closeConnection (connection: Connection ) endTransaction [jvm] Content abstract fun Connection . endTransaction () getConnection [jvm] Content abstract fun getConnection (): Connection rollbackTransaction [jvm] Content abstract fun Connection . rollbackTransaction ()","title":"Functions"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/#properties","text":"Name Summary transaction [jvm] abstract var transaction : ConnectionManager.Transaction ?","title":"Properties"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/#inheritors","text":"Name JdbcDriver","title":"Inheritors"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/begin-transaction/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / ConnectionManager / beginTransaction beginTransaction [jvm] Content abstract fun Connection . beginTransaction ()","title":"beginTransaction   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/begin-transaction/#begintransaction","text":"[jvm] Content abstract fun Connection . beginTransaction ()","title":"beginTransaction"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/close-connection/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / ConnectionManager / closeConnection closeConnection [jvm] Content abstract fun closeConnection (connection: Connection )","title":"closeConnection   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/close-connection/#closeconnection","text":"[jvm] Content abstract fun closeConnection (connection: Connection )","title":"closeConnection"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/close/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / ConnectionManager / close close [jvm] Content abstract fun close ()","title":"close   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/close/#close","text":"[jvm] Content abstract fun close ()","title":"close"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/end-transaction/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / ConnectionManager / endTransaction endTransaction [jvm] Content abstract fun Connection . endTransaction ()","title":"endTransaction   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/end-transaction/#endtransaction","text":"[jvm] Content abstract fun Connection . endTransaction ()","title":"endTransaction"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/get-connection/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / ConnectionManager / getConnection getConnection [jvm] Content abstract fun getConnection (): Connection","title":"getConnection   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/get-connection/#getconnection","text":"[jvm] Content abstract fun getConnection (): Connection","title":"getConnection"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/rollback-transaction/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / ConnectionManager / rollbackTransaction rollbackTransaction [jvm] Content abstract fun Connection . rollbackTransaction ()","title":"rollbackTransaction   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/rollback-transaction/#rollbacktransaction","text":"[jvm] Content abstract fun Connection . rollbackTransaction ()","title":"rollbackTransaction"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/transaction/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / ConnectionManager / transaction transaction [jvm] Content abstract var transaction : ConnectionManager.Transaction ?","title":"transaction   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/transaction/#transaction","text":"[jvm] Content abstract var transaction : ConnectionManager.Transaction ?","title":"transaction"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/-transaction/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / ConnectionManager / Transaction Transaction [jvm] class Transaction ( enclosingTransaction : ConnectionManager.Transaction ?, connectionManager : ConnectionManager , connection : Connection ) : Transacter.Transaction Functions Name Summary afterCommit [jvm] Content open override fun afterCommit (function: () -> Unit ) afterRollback [jvm] Content open override fun afterRollback (function: () -> Unit ) Properties Name Summary connection [jvm] val connection : Connection","title":"Transaction   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/-transaction/#transaction","text":"[jvm] class Transaction ( enclosingTransaction : ConnectionManager.Transaction ?, connectionManager : ConnectionManager , connection : Connection ) : Transacter.Transaction","title":"Transaction"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/-transaction/#functions","text":"Name Summary afterCommit [jvm] Content open override fun afterCommit (function: () -> Unit ) afterRollback [jvm] Content open override fun afterRollback (function: () -> Unit )","title":"Functions"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/-transaction/#properties","text":"Name Summary connection [jvm] val connection : Connection","title":"Properties"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/-transaction/-transaction/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / ConnectionManager / Transaction / Transaction Transaction [jvm] Content fun Transaction (enclosingTransaction: ConnectionManager.Transaction ?, connectionManager: ConnectionManager , connection: Connection )","title":"Transaction   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/-transaction/-transaction/#transaction","text":"[jvm] Content fun Transaction (enclosingTransaction: ConnectionManager.Transaction ?, connectionManager: ConnectionManager , connection: Connection )","title":"Transaction"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/-transaction/connection/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / ConnectionManager / Transaction / connection connection [jvm] Content val connection : Connection","title":"connection   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-connection-manager/-transaction/connection/#connection","text":"[jvm] Content val connection : Connection","title":"connection"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver JdbcDriver [jvm] abstract class JdbcDriver : SqlDriver, ConnectionManager Functions Name Summary beginTransaction [jvm] Content open override fun Connection . beginTransaction () close [jvm] Content open override fun close () closeConnection [jvm] Content abstract fun closeConnection (connection: Connection ) currentTransaction [jvm] Content open override fun currentTransaction (): Transacter.Transaction? endTransaction [jvm] Content open override fun Connection . endTransaction () execute [jvm] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?) executeQuery [jvm] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor getConnection [jvm] Content abstract fun getConnection (): Connection newTransaction [jvm] Content open override fun newTransaction (): Transacter.Transaction rollbackTransaction [jvm] Content open override fun Connection . rollbackTransaction () Properties Name Summary transaction [jvm] open override var transaction : ConnectionManager.Transaction ?","title":"JdbcDriver   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/#jdbcdriver","text":"[jvm] abstract class JdbcDriver : SqlDriver, ConnectionManager","title":"JdbcDriver"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/#functions","text":"Name Summary beginTransaction [jvm] Content open override fun Connection . beginTransaction () close [jvm] Content open override fun close () closeConnection [jvm] Content abstract fun closeConnection (connection: Connection ) currentTransaction [jvm] Content open override fun currentTransaction (): Transacter.Transaction? endTransaction [jvm] Content open override fun Connection . endTransaction () execute [jvm] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?) executeQuery [jvm] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor getConnection [jvm] Content abstract fun getConnection (): Connection newTransaction [jvm] Content open override fun newTransaction (): Transacter.Transaction rollbackTransaction [jvm] Content open override fun Connection . rollbackTransaction ()","title":"Functions"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/#properties","text":"Name Summary transaction [jvm] open override var transaction : ConnectionManager.Transaction ?","title":"Properties"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/-jdbc-driver/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / JdbcDriver JdbcDriver [jvm] Content fun JdbcDriver ()","title":"JdbcDriver   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/-jdbc-driver/#jdbcdriver","text":"[jvm] Content fun JdbcDriver ()","title":"JdbcDriver"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/begin-transaction/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / beginTransaction beginTransaction [jvm] Content open override fun Connection . beginTransaction ()","title":"beginTransaction   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/begin-transaction/#begintransaction","text":"[jvm] Content open override fun Connection . beginTransaction ()","title":"beginTransaction"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/close/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / close close [jvm] Content open override fun close ()","title":"close   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/close/#close","text":"[jvm] Content open override fun close ()","title":"close"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/current-transaction/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / currentTransaction currentTransaction [jvm] Content open override fun currentTransaction (): Transacter.Transaction?","title":"currentTransaction   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/current-transaction/#currenttransaction","text":"[jvm] Content open override fun currentTransaction (): Transacter.Transaction?","title":"currentTransaction"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/end-transaction/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / endTransaction endTransaction [jvm] Content open override fun Connection . endTransaction ()","title":"endTransaction   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/end-transaction/#endtransaction","text":"[jvm] Content open override fun Connection . endTransaction ()","title":"endTransaction"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/execute-query/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / executeQuery executeQuery [jvm] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor","title":"executeQuery   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/execute-query/#executequery","text":"[jvm] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor","title":"executeQuery"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/execute/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / execute execute [jvm] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?)","title":"execute   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/execute/#execute","text":"[jvm] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?)","title":"execute"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/new-transaction/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / newTransaction newTransaction [jvm] Content open override fun newTransaction (): Transacter.Transaction","title":"newTransaction   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/new-transaction/#newtransaction","text":"[jvm] Content open override fun newTransaction (): Transacter.Transaction","title":"newTransaction"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/rollback-transaction/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / rollbackTransaction rollbackTransaction [jvm] Content open override fun Connection . rollbackTransaction ()","title":"rollbackTransaction   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/rollback-transaction/#rollbacktransaction","text":"[jvm] Content open override fun Connection . rollbackTransaction ()","title":"rollbackTransaction"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/transaction/","text":"// jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / transaction transaction [jvm] Content open override var transaction : ConnectionManager.Transaction ?","title":"transaction   - SQLDelight"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/transaction/#transaction","text":"[jvm] Content open override var transaction : ConnectionManager.Transaction ?","title":"transaction"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/","text":"// native-driver / com.squareup.sqldelight.drivers.native Package com.squareup.sqldelight.drivers.native Types Name Summary ConnectionWrapper [native] Content sealed class ConnectionWrapper : SqlDriver NativeSqliteDriver [native] Content class NativeSqliteDriver ( databaseManager : , maxReaderConnections : Int ) : ConnectionWrapper , SqlDriver More info Native driver implementation. Functions Name Summary wrapConnection [native] Content fun wrapConnection (connection: , block: (SqlDriver) -> Unit ) More info Sqliter's DatabaseConfiguration takes lambda arguments for it's create and upgrade operations, which each take a DatabaseConnection argument.","title":"Package com.squareup.sqldelight.drivers.native   - SQLDelight"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/#package-comsquareupsqldelightdriversnative","text":"","title":"Package com.squareup.sqldelight.drivers.native"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/#types","text":"Name Summary ConnectionWrapper [native] Content sealed class ConnectionWrapper : SqlDriver NativeSqliteDriver [native] Content class NativeSqliteDriver ( databaseManager : , maxReaderConnections : Int ) : ConnectionWrapper , SqlDriver More info Native driver implementation.","title":"Types"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/#functions","text":"Name Summary wrapConnection [native] Content fun wrapConnection (connection: , block: (SqlDriver) -> Unit ) More info Sqliter's DatabaseConfiguration takes lambda arguments for it's create and upgrade operations, which each take a DatabaseConnection argument.","title":"Functions"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/wrap-connection/","text":"// native-driver / com.squareup.sqldelight.drivers.native / wrapConnection wrapConnection [native] Content fun wrapConnection (connection: , block: (SqlDriver) -> Unit ) More info Sqliter's DatabaseConfiguration takes lambda arguments for it's create and upgrade operations, which each take a DatabaseConnection argument. Use wrapConnection to have SqlDelight access this passed connection and avoid the pooling that the full SqlDriver instance performs. Note that queries created during this operation will be cleaned up. If holding onto a cursor from a wrap call, it will no longer be viable.","title":"wrapConnection   - SQLDelight"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/wrap-connection/#wrapconnection","text":"[native] Content fun wrapConnection (connection: , block: (SqlDriver) -> Unit ) More info Sqliter's DatabaseConfiguration takes lambda arguments for it's create and upgrade operations, which each take a DatabaseConnection argument. Use wrapConnection to have SqlDelight access this passed connection and avoid the pooling that the full SqlDriver instance performs. Note that queries created during this operation will be cleaned up. If holding onto a cursor from a wrap call, it will no longer be viable.","title":"wrapConnection"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-connection-wrapper/","text":"// native-driver / com.squareup.sqldelight.drivers.native / ConnectionWrapper ConnectionWrapper [native] sealed class ConnectionWrapper : SqlDriver Functions Name Summary close [native] Content abstract fun close () currentTransaction [native] Content abstract fun currentTransaction (): Transacter.Transaction? execute [native] Content override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?) executeQuery [native] Content override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor newTransaction [native] Content abstract fun newTransaction (): Transacter.Transaction Inheritors Name NativeSqliteDriver","title":"ConnectionWrapper   - SQLDelight"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-connection-wrapper/#connectionwrapper","text":"[native] sealed class ConnectionWrapper : SqlDriver","title":"ConnectionWrapper"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-connection-wrapper/#functions","text":"Name Summary close [native] Content abstract fun close () currentTransaction [native] Content abstract fun currentTransaction (): Transacter.Transaction? execute [native] Content override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?) executeQuery [native] Content override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor newTransaction [native] Content abstract fun newTransaction (): Transacter.Transaction","title":"Functions"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-connection-wrapper/#inheritors","text":"Name NativeSqliteDriver","title":"Inheritors"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-connection-wrapper/execute-query/","text":"// native-driver / com.squareup.sqldelight.drivers.native / ConnectionWrapper / executeQuery executeQuery [native] Content override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor","title":"executeQuery   - SQLDelight"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-connection-wrapper/execute-query/#executequery","text":"[native] Content override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor","title":"executeQuery"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-connection-wrapper/execute/","text":"// native-driver / com.squareup.sqldelight.drivers.native / ConnectionWrapper / execute execute [native] Content override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?)","title":"execute   - SQLDelight"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-connection-wrapper/execute/#execute","text":"[native] Content override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?)","title":"execute"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/","text":"// native-driver / com.squareup.sqldelight.drivers.native / NativeSqliteDriver NativeSqliteDriver [native] class NativeSqliteDriver ( databaseManager : , maxReaderConnections : Int ) : ConnectionWrapper , SqlDriver Native driver implementation. The driver creates two connection pools, which default to 1 connection maximum. There is a reader pool, which handles all query requests outside of a transaction. The other pool is the transaction pool, which handles all transactions and write requests outside of a transaction. When a transaction is started, that thread is aligned with a transaction pool connection. Attempting a write or starting another transaction, if no connections are available, will cause the caller to wait. You can have multiple connections in the transaction pool, but this would only be useful for read transactions. Writing from multiple connections in an overlapping manner can be problematic. Aligning a transaction to a thread means you cannot operate on a single transaction from multiple threads. However, it would be difficult to find a use case where this would be desirable or safe. Currently, the native implementation of kotlinx.coroutines does not use thread pooling. When that changes, we'll need a way to handle transaction/connection alignment similar to what the Android/JVM driver implemented. https://medium.com/androiddevelopers/threading-models-in-coroutines-and-android-sqlite-api-6cab11f7eb90 To use SqlDelight during create/upgrade processes, you can alternatively wrap a real connection with wrapConnection. SqlPreparedStatement instances also do not point to real resources until either execute or executeQuery is called. The SqlPreparedStatement structure also maintains a thread-aligned instance which accumulates bind calls. Those are replayed on a real SQLite statement instance when execute or executeQuery is called. This avoids race conditions with bind calls. Constructors NativeSqliteDriver [native] fun NativeSqliteDriver (configuration: , maxReaderConnections: Int = 1) NativeSqliteDriver [native] fun NativeSqliteDriver (schema: SqlDriver.Schema, name: String , maxReaderConnections: Int = 1) NativeSqliteDriver [native] fun NativeSqliteDriver (databaseManager: , maxReaderConnections: Int = 1) Functions Name Summary close [native] Content open override fun close () currentTransaction [native] Content open override fun currentTransaction (): Transacter.Transaction? execute [native] Content override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?) executeQuery [native] Content override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor newTransaction [native] Content open override fun newTransaction (): Transacter.Transaction","title":"NativeSqliteDriver   - SQLDelight"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/#nativesqlitedriver","text":"[native] class NativeSqliteDriver ( databaseManager : , maxReaderConnections : Int ) : ConnectionWrapper , SqlDriver Native driver implementation. The driver creates two connection pools, which default to 1 connection maximum. There is a reader pool, which handles all query requests outside of a transaction. The other pool is the transaction pool, which handles all transactions and write requests outside of a transaction. When a transaction is started, that thread is aligned with a transaction pool connection. Attempting a write or starting another transaction, if no connections are available, will cause the caller to wait. You can have multiple connections in the transaction pool, but this would only be useful for read transactions. Writing from multiple connections in an overlapping manner can be problematic. Aligning a transaction to a thread means you cannot operate on a single transaction from multiple threads. However, it would be difficult to find a use case where this would be desirable or safe. Currently, the native implementation of kotlinx.coroutines does not use thread pooling. When that changes, we'll need a way to handle transaction/connection alignment similar to what the Android/JVM driver implemented. https://medium.com/androiddevelopers/threading-models-in-coroutines-and-android-sqlite-api-6cab11f7eb90 To use SqlDelight during create/upgrade processes, you can alternatively wrap a real connection with wrapConnection. SqlPreparedStatement instances also do not point to real resources until either execute or executeQuery is called. The SqlPreparedStatement structure also maintains a thread-aligned instance which accumulates bind calls. Those are replayed on a real SQLite statement instance when execute or executeQuery is called. This avoids race conditions with bind calls.","title":"NativeSqliteDriver"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/#constructors","text":"NativeSqliteDriver [native] fun NativeSqliteDriver (configuration: , maxReaderConnections: Int = 1) NativeSqliteDriver [native] fun NativeSqliteDriver (schema: SqlDriver.Schema, name: String , maxReaderConnections: Int = 1) NativeSqliteDriver [native] fun NativeSqliteDriver (databaseManager: , maxReaderConnections: Int = 1)","title":"Constructors"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/#functions","text":"Name Summary close [native] Content open override fun close () currentTransaction [native] Content open override fun currentTransaction (): Transacter.Transaction? execute [native] Content override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?) executeQuery [native] Content override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor newTransaction [native] Content open override fun newTransaction (): Transacter.Transaction","title":"Functions"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/-native-sqlite-driver/","text":"// native-driver / com.squareup.sqldelight.drivers.native / NativeSqliteDriver / NativeSqliteDriver NativeSqliteDriver [native] Content fun NativeSqliteDriver (configuration: , maxReaderConnections: Int = 1) fun NativeSqliteDriver (schema: SqlDriver.Schema, name: String , maxReaderConnections: Int = 1) fun NativeSqliteDriver (databaseManager: , maxReaderConnections: Int = 1)","title":"NativeSqliteDriver   - SQLDelight"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/-native-sqlite-driver/#nativesqlitedriver","text":"[native] Content fun NativeSqliteDriver (configuration: , maxReaderConnections: Int = 1) fun NativeSqliteDriver (schema: SqlDriver.Schema, name: String , maxReaderConnections: Int = 1) fun NativeSqliteDriver (databaseManager: , maxReaderConnections: Int = 1)","title":"NativeSqliteDriver"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/close/","text":"// native-driver / com.squareup.sqldelight.drivers.native / NativeSqliteDriver / close close [native] Content open override fun close ()","title":"close   - SQLDelight"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/close/#close","text":"[native] Content open override fun close ()","title":"close"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/current-transaction/","text":"// native-driver / com.squareup.sqldelight.drivers.native / NativeSqliteDriver / currentTransaction currentTransaction [native] Content open override fun currentTransaction (): Transacter.Transaction?","title":"currentTransaction   - SQLDelight"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/current-transaction/#currenttransaction","text":"[native] Content open override fun currentTransaction (): Transacter.Transaction?","title":"currentTransaction"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/new-transaction/","text":"// native-driver / com.squareup.sqldelight.drivers.native / NativeSqliteDriver / newTransaction newTransaction [native] Content open override fun newTransaction (): Transacter.Transaction","title":"newTransaction   - SQLDelight"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/new-transaction/#newtransaction","text":"[native] Content open override fun newTransaction (): Transacter.Transaction","title":"newTransaction"},{"location":"1.x/runtime/com.squareup.sqldelight/","text":"// runtime / com.squareup.sqldelight Package com.squareup.sqldelight Types Name Summary ColumnAdapter [common] Content interface ColumnAdapter < T : Any , S > More info Marshal and map the type T to and from a database type S which is one of Long, Double, String, byte[]. EnumColumnAdapter [common] Content class EnumColumnAdapter < T : Enum < T >> : ColumnAdapter < T , String > More info A ColumnAdapter which maps the enum class T to a string in the database. Query [common] Content abstract class Query RowType : Any >( queries : MutableList < Query < >>, mapper *: ( SqlCursor ) -> RowType ) More info A listenable, typed query generated by SQLDelight. Transacter [common] Content interface Transacter More info A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection. TransacterImpl [common] Content abstract class TransacterImpl ( driver : SqlDriver ) : Transacter More info A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection. TransactionCallbacks [common] Content interface TransactionCallbacks TransactionWithoutReturn [common] Content interface TransactionWithoutReturn : TransactionCallbacks TransactionWithReturn [common] Content interface TransactionWithReturn < R > : TransactionCallbacks Functions Name Summary EnumColumnAdapter [common] Content inline fun < T : Enum < T >> EnumColumnAdapter (): EnumColumnAdapter < T > More info A ColumnAdapter which maps the enum class T to a string in the database. Query [common] Content fun < RowType : Any > Query (identifier: Int , queries: MutableList < Query < >>, driver: SqlDriver , query: String , mapper: ( SqlCursor ) -> RowType ): Query < RowType > fun < RowType : Any > Query (identifier: Int , queries: MutableList < Query < >>, driver: SqlDriver , fileName: String , label: String , query: String , mapper: ( SqlCursor ) -> RowType ): Query < RowType > More info A listenable, typed query generated by SQLDelight.","title":"Package com.squareup.sqldelight   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/#package-comsquareupsqldelight","text":"","title":"Package com.squareup.sqldelight"},{"location":"1.x/runtime/com.squareup.sqldelight/#types","text":"Name Summary ColumnAdapter [common] Content interface ColumnAdapter < T : Any , S > More info Marshal and map the type T to and from a database type S which is one of Long, Double, String, byte[]. EnumColumnAdapter [common] Content class EnumColumnAdapter < T : Enum < T >> : ColumnAdapter < T , String > More info A ColumnAdapter which maps the enum class T to a string in the database. Query [common] Content abstract class Query RowType : Any >( queries : MutableList < Query < >>, mapper *: ( SqlCursor ) -> RowType ) More info A listenable, typed query generated by SQLDelight. Transacter [common] Content interface Transacter More info A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection. TransacterImpl [common] Content abstract class TransacterImpl ( driver : SqlDriver ) : Transacter More info A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection. TransactionCallbacks [common] Content interface TransactionCallbacks TransactionWithoutReturn [common] Content interface TransactionWithoutReturn : TransactionCallbacks TransactionWithReturn [common] Content interface TransactionWithReturn < R > : TransactionCallbacks","title":"Types"},{"location":"1.x/runtime/com.squareup.sqldelight/#functions","text":"Name Summary EnumColumnAdapter [common] Content inline fun < T : Enum < T >> EnumColumnAdapter (): EnumColumnAdapter < T > More info A ColumnAdapter which maps the enum class T to a string in the database. Query [common] Content fun < RowType : Any > Query (identifier: Int , queries: MutableList < Query < >>, driver: SqlDriver , query: String , mapper: ( SqlCursor ) -> RowType ): Query < RowType > fun < RowType : Any > Query (identifier: Int , queries: MutableList < Query < >>, driver: SqlDriver , fileName: String , label: String , query: String , mapper: ( SqlCursor ) -> RowType ): Query < RowType > More info A listenable, typed query generated by SQLDelight.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/","text":"// runtime / com.squareup.sqldelight / EnumColumnAdapter EnumColumnAdapter [common] Content inline fun < T : Enum < T >> EnumColumnAdapter (): EnumColumnAdapter < T > More info A ColumnAdapter which maps the enum class T to a string in the database.","title":"EnumColumnAdapter   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/#enumcolumnadapter","text":"[common] Content inline fun < T : Enum < T >> EnumColumnAdapter (): EnumColumnAdapter < T > More info A ColumnAdapter which maps the enum class T to a string in the database.","title":"EnumColumnAdapter"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/","text":"// runtime / com.squareup.sqldelight / Query Query [common] Content fun < RowType : Any > Query (identifier: Int , queries: MutableList < Query <*>>, driver: SqlDriver , query: String , mapper: ( SqlCursor ) -> RowType ): Query < RowType > More info A listenable, typed query generated by SQLDelight. Parameters common RowType the type that this query can map its result set to. [common] Content fun < RowType : Any > Query (identifier: Int , queries: MutableList < Query <*>>, driver: SqlDriver , fileName: String , label: String , query: String , mapper: ( SqlCursor ) -> RowType ): Query < RowType > More info A listenable, typed query generated by SQLDelight. Parameters common RowType the type that this query can map its result set to.","title":"Query   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/#query","text":"[common] Content fun < RowType : Any > Query (identifier: Int , queries: MutableList < Query <*>>, driver: SqlDriver , query: String , mapper: ( SqlCursor ) -> RowType ): Query < RowType > More info A listenable, typed query generated by SQLDelight.","title":"Query"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/#parameters","text":"common RowType the type that this query can map its result set to. [common] Content fun < RowType : Any > Query (identifier: Int , queries: MutableList < Query <*>>, driver: SqlDriver , fileName: String , label: String , query: String , mapper: ( SqlCursor ) -> RowType ): Query < RowType > More info A listenable, typed query generated by SQLDelight.","title":"Parameters"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/#parameters_1","text":"common RowType the type that this query can map its result set to.","title":"Parameters"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/","text":"// runtime / com.squareup.sqldelight / ColumnAdapter ColumnAdapter [common] interface ColumnAdapter < T : Any , S > Marshal and map the type T to and from a database type S which is one of Long, Double, String, byte[]. Functions Name Summary decode [common] Content abstract fun decode (databaseValue: S ): T encode [common] Content abstract fun encode (value: T ): S Inheritors Name EnumColumnAdapter","title":"ColumnAdapter   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/#columnadapter","text":"[common] interface ColumnAdapter < T : Any , S > Marshal and map the type T to and from a database type S which is one of Long, Double, String, byte[].","title":"ColumnAdapter"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/#functions","text":"Name Summary decode [common] Content abstract fun decode (databaseValue: S ): T encode [common] Content abstract fun encode (value: T ): S","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/#inheritors","text":"Name EnumColumnAdapter","title":"Inheritors"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/decode/","text":"// runtime / com.squareup.sqldelight / ColumnAdapter / decode decode [common] Content abstract fun decode (databaseValue: S ): T More info Return databaseValue decoded as type T .","title":"decode   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/decode/#decode","text":"[common] Content abstract fun decode (databaseValue: S ): T More info","title":"decode"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/decode/#return","text":"databaseValue decoded as type T .","title":"Return"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/encode/","text":"// runtime / com.squareup.sqldelight / ColumnAdapter / encode encode [common] Content abstract fun encode (value: T ): S More info Return value encoded as database type S .","title":"encode   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/encode/#encode","text":"[common] Content abstract fun encode (value: T ): S More info","title":"encode"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/encode/#return","text":"value encoded as database type S .","title":"Return"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/","text":"// runtime / com.squareup.sqldelight / EnumColumnAdapter EnumColumnAdapter [common] class EnumColumnAdapter < T : Enum < T >> : ColumnAdapter < T , String > A ColumnAdapter which maps the enum class T to a string in the database. Functions Name Summary decode [common] Content open override fun decode (databaseValue: String ): T encode [common] Content open override fun encode (value: T ): String","title":"EnumColumnAdapter   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/#enumcolumnadapter","text":"[common] class EnumColumnAdapter < T : Enum < T >> : ColumnAdapter < T , String > A ColumnAdapter which maps the enum class T to a string in the database.","title":"EnumColumnAdapter"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/#functions","text":"Name Summary decode [common] Content open override fun decode (databaseValue: String ): T encode [common] Content open override fun encode (value: T ): String","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/decode/","text":"// runtime / com.squareup.sqldelight / EnumColumnAdapter / decode decode [common] Content open override fun decode (databaseValue: String ): T More info Return databaseValue decoded as type T .","title":"decode   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/decode/#decode","text":"[common] Content open override fun decode (databaseValue: String ): T More info","title":"decode"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/decode/#return","text":"databaseValue decoded as type T .","title":"Return"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/encode/","text":"// runtime / com.squareup.sqldelight / EnumColumnAdapter / encode encode [common] Content open override fun encode (value: T ): String More info Return value encoded as database type S.","title":"encode   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/encode/#encode","text":"[common] Content open override fun encode (value: T ): String More info","title":"encode"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/encode/#return","text":"value encoded as database type S.","title":"Return"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/","text":"// runtime / com.squareup.sqldelight / Query Query [common] abstract class Query RowType : Any >( queries : MutableList < Query < >>, mapper *: ( SqlCursor ) -> RowType ) A listenable, typed query generated by SQLDelight. Parameters common RowType the type that this query can map its result set to. Constructors Query [common] fun RowType : Any > Query (queries: MutableList < Query <*>>, mapper: ( SqlCursor ) -> RowType )the type that this query can map its result set to. Types Name Summary Listener [common] Content interface Listener More info An interface for listening to changes in the result set of a query. Functions Name Summary addListener [common] Content fun addListener (listener: Query.Listener ) More info Register a listener to be notified of future changes in the result set. execute [common] Content abstract fun execute (): SqlCursor More info Execute the underlying statement. executeAsList [common] Content fun executeAsList (): List < RowType > executeAsOne [common] Content fun executeAsOne (): RowType executeAsOneOrNull [common] Content fun executeAsOneOrNull (): RowType ? notifyDataChanged [common] Content fun notifyDataChanged () More info Notify listeners that their current result set is staled. removeListener [common] Content fun removeListener (listener: Query.Listener ) More info Remove a listener to no longer be notified of future changes in the result set. Properties Name Summary mapper [common] val mapper : ( SqlCursor ) -> RowType The mapper this Query was created with, which can convert a row in the SQL cursor returned by execute to RowType .","title":"Query   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/#query","text":"[common] abstract class Query RowType : Any >( queries : MutableList < Query < >>, mapper *: ( SqlCursor ) -> RowType ) A listenable, typed query generated by SQLDelight.","title":"Query"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/#parameters","text":"common RowType the type that this query can map its result set to.","title":"Parameters"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/#constructors","text":"Query [common] fun RowType : Any > Query (queries: MutableList < Query <*>>, mapper: ( SqlCursor ) -> RowType )the type that this query can map its result set to.","title":"Constructors"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/#types","text":"Name Summary Listener [common] Content interface Listener More info An interface for listening to changes in the result set of a query.","title":"Types"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/#functions","text":"Name Summary addListener [common] Content fun addListener (listener: Query.Listener ) More info Register a listener to be notified of future changes in the result set. execute [common] Content abstract fun execute (): SqlCursor More info Execute the underlying statement. executeAsList [common] Content fun executeAsList (): List < RowType > executeAsOne [common] Content fun executeAsOne (): RowType executeAsOneOrNull [common] Content fun executeAsOneOrNull (): RowType ? notifyDataChanged [common] Content fun notifyDataChanged () More info Notify listeners that their current result set is staled. removeListener [common] Content fun removeListener (listener: Query.Listener ) More info Remove a listener to no longer be notified of future changes in the result set.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/#properties","text":"Name Summary mapper [common] val mapper : ( SqlCursor ) -> RowType The mapper this Query was created with, which can convert a row in the SQL cursor returned by execute to RowType .","title":"Properties"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/-query/","text":"// runtime / com.squareup.sqldelight / Query / Query Query [common] Content fun RowType : Any > Query (queries: MutableList < Query <*>>, mapper: ( SqlCursor ) -> RowType ) More info Parameters common RowType the type that this query can map its result set to.","title":"Query   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/-query/#query","text":"[common] Content fun RowType : Any > Query (queries: MutableList < Query <*>>, mapper: ( SqlCursor ) -> RowType ) More info","title":"Query"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/-query/#parameters","text":"common RowType the type that this query can map its result set to.","title":"Parameters"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/add-listener/","text":"// runtime / com.squareup.sqldelight / Query / addListener addListener [common] Content fun addListener (listener: Query.Listener ) More info Register a listener to be notified of future changes in the result set.","title":"addListener   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/add-listener/#addlistener","text":"[common] Content fun addListener (listener: Query.Listener ) More info Register a listener to be notified of future changes in the result set.","title":"addListener"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-list/","text":"// runtime / com.squareup.sqldelight / Query / executeAsList executeAsList [common] Content fun executeAsList (): List < RowType > More info Return The result set of the underlying SQL statement as a list of RowType .","title":"executeAsList   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-list/#executeaslist","text":"[common] Content fun executeAsList (): List < RowType > More info","title":"executeAsList"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-list/#return","text":"The result set of the underlying SQL statement as a list of RowType .","title":"Return"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-one-or-null/","text":"// runtime / com.squareup.sqldelight / Query / executeAsOneOrNull executeAsOneOrNull [common] Content fun executeAsOneOrNull (): RowType ? More info Return The first row of the result set for the underlying SQL statement as a non null RowType or null if the result set has no rows. Throws kotlin.IllegalStateException if when executed this query has multiple rows in its result set.","title":"executeAsOneOrNull   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-one-or-null/#executeasoneornull","text":"[common] Content fun executeAsOneOrNull (): RowType ? More info","title":"executeAsOneOrNull"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-one-or-null/#return","text":"The first row of the result set for the underlying SQL statement as a non null RowType or null if the result set has no rows.","title":"Return"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-one-or-null/#throws","text":"kotlin.IllegalStateException if when executed this query has multiple rows in its result set.","title":"Throws"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-one/","text":"// runtime / com.squareup.sqldelight / Query / executeAsOne executeAsOne [common] Content fun executeAsOne (): RowType More info Return The only row of the result set for the underlying SQL statement as a non null RowType . Throws kotlin.NullPointerException if when executed this query has no rows in its result set. kotlin.IllegalStateException if when executed this query has multiple rows in its result set.","title":"executeAsOne   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-one/#executeasone","text":"[common] Content fun executeAsOne (): RowType More info","title":"executeAsOne"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-one/#return","text":"The only row of the result set for the underlying SQL statement as a non null RowType .","title":"Return"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-one/#throws","text":"kotlin.NullPointerException if when executed this query has no rows in its result set. kotlin.IllegalStateException if when executed this query has multiple rows in its result set.","title":"Throws"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute/","text":"// runtime / com.squareup.sqldelight / Query / execute execute [common] Content abstract fun execute (): SqlCursor More info Execute the underlying statement. Return the cursor for the statement's result set.","title":"execute   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute/#execute","text":"[common] Content abstract fun execute (): SqlCursor More info Execute the underlying statement.","title":"execute"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute/#return","text":"the cursor for the statement's result set.","title":"Return"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/mapper/","text":"// runtime / com.squareup.sqldelight / Query / mapper mapper [common] Content val mapper : ( SqlCursor ) -> RowType","title":"mapper   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/mapper/#mapper","text":"[common] Content val mapper : ( SqlCursor ) -> RowType","title":"mapper"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/notify-data-changed/","text":"// runtime / com.squareup.sqldelight / Query / notifyDataChanged notifyDataChanged [common] Content fun notifyDataChanged () More info Notify listeners that their current result set is staled. Called internally by SQLDelight when it detects a possible staling of the result set. Emits some false positives but never misses a true positive.","title":"notifyDataChanged   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/notify-data-changed/#notifydatachanged","text":"[common] Content fun notifyDataChanged () More info Notify listeners that their current result set is staled. Called internally by SQLDelight when it detects a possible staling of the result set. Emits some false positives but never misses a true positive.","title":"notifyDataChanged"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/remove-listener/","text":"// runtime / com.squareup.sqldelight / Query / removeListener removeListener [common] Content fun removeListener (listener: Query.Listener ) More info Remove a listener to no longer be notified of future changes in the result set.","title":"removeListener   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/remove-listener/#removelistener","text":"[common] Content fun removeListener (listener: Query.Listener ) More info Remove a listener to no longer be notified of future changes in the result set.","title":"removeListener"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/-listener/","text":"// runtime / com.squareup.sqldelight / Query / Listener Listener [common] interface Listener An interface for listening to changes in the result set of a query. Functions Name Summary queryResultsChanged [common] Content abstract fun queryResultsChanged () More info Called whenever the query this listener was attached to is dirtied.","title":"Listener   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/-listener/#listener","text":"[common] interface Listener An interface for listening to changes in the result set of a query.","title":"Listener"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/-listener/#functions","text":"Name Summary queryResultsChanged [common] Content abstract fun queryResultsChanged () More info Called whenever the query this listener was attached to is dirtied.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/-listener/query-results-changed/","text":"// runtime / com.squareup.sqldelight / Query / Listener / queryResultsChanged queryResultsChanged [common] Content abstract fun queryResultsChanged () More info Called whenever the query this listener was attached to is dirtied. Calls are made synchronously on the thread where the updated occurred, after the update applied successfully.","title":"queryResultsChanged   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/-listener/query-results-changed/#queryresultschanged","text":"[common] Content abstract fun queryResultsChanged () More info Called whenever the query this listener was attached to is dirtied. Calls are made synchronously on the thread where the updated occurred, after the update applied successfully.","title":"queryResultsChanged"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/","text":"// runtime / com.squareup.sqldelight / Transacter Transacter [common] interface Transacter A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection. Types Name Summary Transaction [common] Content abstract class Transaction : TransactionCallbacks More info A SQL transaction. Functions Name Summary transaction [common] Content abstract fun transaction (noEnclosing: Boolean = false, body: TransactionWithoutReturn .() -> Unit ) More info Starts a Transaction and runs body in that transaction. transactionWithResult [common] Content abstract fun < R > transactionWithResult (noEnclosing: Boolean = false, bodyWithReturn: TransactionWithReturn < R >.() -> R ): R More info Starts a Transaction and runs body in that transaction. Inheritors Name TransacterImpl","title":"Transacter   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/#transacter","text":"[common] interface Transacter A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection.","title":"Transacter"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/#types","text":"Name Summary Transaction [common] Content abstract class Transaction : TransactionCallbacks More info A SQL transaction.","title":"Types"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/#functions","text":"Name Summary transaction [common] Content abstract fun transaction (noEnclosing: Boolean = false, body: TransactionWithoutReturn .() -> Unit ) More info Starts a Transaction and runs body in that transaction. transactionWithResult [common] Content abstract fun < R > transactionWithResult (noEnclosing: Boolean = false, bodyWithReturn: TransactionWithReturn < R >.() -> R ): R More info Starts a Transaction and runs body in that transaction.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/#inheritors","text":"Name TransacterImpl","title":"Inheritors"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/transaction-with-result/","text":"// runtime / com.squareup.sqldelight / Transacter / transactionWithResult transactionWithResult [common] Content abstract fun < R > transactionWithResult (noEnclosing: Boolean = false, bodyWithReturn: TransactionWithReturn < R >.() -> R ): R More info Starts a Transaction and runs body in that transaction. Throws kotlin.IllegalStateException if noEnclosing is true and there is already an active Transaction on this thread.","title":"transactionWithResult   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/transaction-with-result/#transactionwithresult","text":"[common] Content abstract fun < R > transactionWithResult (noEnclosing: Boolean = false, bodyWithReturn: TransactionWithReturn < R >.() -> R ): R More info Starts a Transaction and runs body in that transaction.","title":"transactionWithResult"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/transaction-with-result/#throws","text":"kotlin.IllegalStateException if noEnclosing is true and there is already an active Transaction on this thread.","title":"Throws"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/transaction/","text":"// runtime / com.squareup.sqldelight / Transacter / transaction transaction [common] Content abstract fun transaction (noEnclosing: Boolean = false, body: TransactionWithoutReturn .() -> Unit ) More info Starts a Transaction and runs body in that transaction. Throws kotlin.IllegalStateException if noEnclosing is true and there is already an active Transaction on this thread.","title":"transaction   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/transaction/#transaction","text":"[common] Content abstract fun transaction (noEnclosing: Boolean = false, body: TransactionWithoutReturn .() -> Unit ) More info Starts a Transaction and runs body in that transaction.","title":"transaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/transaction/#throws","text":"kotlin.IllegalStateException if noEnclosing is true and there is already an active Transaction on this thread.","title":"Throws"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/","text":"// runtime / com.squareup.sqldelight / Transacter / Transaction Transaction [common] abstract class Transaction : TransactionCallbacks A SQL transaction. Can be created through the driver via SqlDriver.newTransaction or through an implementation of Transacter by calling Transacter.transaction . A transaction is expected never to escape the thread it is created on, or more specifically, never to escape the lambda scope of Transacter.transaction and Transacter.transactionWithResult . Constructors Transaction [common] fun Transaction () Functions Name Summary afterCommit [common] Content open override fun afterCommit (function: () -> Unit ) More info Queues function to be run after this transaction successfully commits. afterRollback [common] Content open override fun afterRollback (function: () -> Unit ) More info Queues function to be run after this transaction rolls back.","title":"Transaction   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/#transaction","text":"[common] abstract class Transaction : TransactionCallbacks A SQL transaction. Can be created through the driver via SqlDriver.newTransaction or through an implementation of Transacter by calling Transacter.transaction . A transaction is expected never to escape the thread it is created on, or more specifically, never to escape the lambda scope of Transacter.transaction and Transacter.transactionWithResult .","title":"Transaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/#constructors","text":"Transaction [common] fun Transaction ()","title":"Constructors"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/#functions","text":"Name Summary afterCommit [common] Content open override fun afterCommit (function: () -> Unit ) More info Queues function to be run after this transaction successfully commits. afterRollback [common] Content open override fun afterRollback (function: () -> Unit ) More info Queues function to be run after this transaction rolls back.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/-transaction/","text":"// runtime / com.squareup.sqldelight / Transacter / Transaction / Transaction Transaction [common] Content fun Transaction ()","title":"Transaction   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/-transaction/#transaction","text":"[common] Content fun Transaction ()","title":"Transaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/after-commit/","text":"// runtime / com.squareup.sqldelight / Transacter / Transaction / afterCommit afterCommit [common] Content open override fun afterCommit (function: () -> Unit ) More info Queues function to be run after this transaction successfully commits.","title":"afterCommit   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/after-commit/#aftercommit","text":"[common] Content open override fun afterCommit (function: () -> Unit ) More info Queues function to be run after this transaction successfully commits.","title":"afterCommit"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/after-rollback/","text":"// runtime / com.squareup.sqldelight / Transacter / Transaction / afterRollback afterRollback [common] Content open override fun afterRollback (function: () -> Unit ) More info Queues function to be run after this transaction rolls back.","title":"afterRollback   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/after-rollback/#afterrollback","text":"[common] Content open override fun afterRollback (function: () -> Unit ) More info Queues function to be run after this transaction rolls back.","title":"afterRollback"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/","text":"// runtime / com.squareup.sqldelight / TransacterImpl TransacterImpl [common] abstract class TransacterImpl ( driver : SqlDriver ) : Transacter A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection. Constructors TransacterImpl [common] fun TransacterImpl (driver: SqlDriver ) Functions Name Summary transaction [common] Content open override fun transaction (noEnclosing: Boolean , body: TransactionWithoutReturn .() -> Unit ) More info Starts a Transaction and runs body in that transaction. transactionWithResult [common] Content open override fun < R > transactionWithResult (noEnclosing: Boolean , bodyWithReturn: TransactionWithReturn < R >.() -> R ): R More info Starts a Transaction and runs body in that transaction.","title":"TransacterImpl   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/#transacterimpl","text":"[common] abstract class TransacterImpl ( driver : SqlDriver ) : Transacter A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection.","title":"TransacterImpl"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/#constructors","text":"TransacterImpl [common] fun TransacterImpl (driver: SqlDriver )","title":"Constructors"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/#functions","text":"Name Summary transaction [common] Content open override fun transaction (noEnclosing: Boolean , body: TransactionWithoutReturn .() -> Unit ) More info Starts a Transaction and runs body in that transaction. transactionWithResult [common] Content open override fun < R > transactionWithResult (noEnclosing: Boolean , bodyWithReturn: TransactionWithReturn < R >.() -> R ): R More info Starts a Transaction and runs body in that transaction.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/-transacter-impl/","text":"// runtime / com.squareup.sqldelight / TransacterImpl / TransacterImpl TransacterImpl [common] Content fun TransacterImpl (driver: SqlDriver )","title":"TransacterImpl   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/-transacter-impl/#transacterimpl","text":"[common] Content fun TransacterImpl (driver: SqlDriver )","title":"TransacterImpl"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/transaction-with-result/","text":"// runtime / com.squareup.sqldelight / TransacterImpl / transactionWithResult transactionWithResult [common] Content open override fun < R > transactionWithResult (noEnclosing: Boolean , bodyWithReturn: TransactionWithReturn < R >.() -> R ): R More info Starts a Transaction and runs body in that transaction. Throws kotlin.IllegalStateException if noEnclosing is true and there is already an active Transaction on this thread.","title":"transactionWithResult   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/transaction-with-result/#transactionwithresult","text":"[common] Content open override fun < R > transactionWithResult (noEnclosing: Boolean , bodyWithReturn: TransactionWithReturn < R >.() -> R ): R More info Starts a Transaction and runs body in that transaction.","title":"transactionWithResult"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/transaction-with-result/#throws","text":"kotlin.IllegalStateException if noEnclosing is true and there is already an active Transaction on this thread.","title":"Throws"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/transaction/","text":"// runtime / com.squareup.sqldelight / TransacterImpl / transaction transaction [common] Content open override fun transaction (noEnclosing: Boolean , body: TransactionWithoutReturn .() -> Unit ) More info Starts a Transaction and runs body in that transaction. Throws kotlin.IllegalStateException if noEnclosing is true and there is already an active Transaction on this thread.","title":"transaction   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/transaction/#transaction","text":"[common] Content open override fun transaction (noEnclosing: Boolean , body: TransactionWithoutReturn .() -> Unit ) More info Starts a Transaction and runs body in that transaction.","title":"transaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/transaction/#throws","text":"kotlin.IllegalStateException if noEnclosing is true and there is already an active Transaction on this thread.","title":"Throws"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-callbacks/","text":"// runtime / com.squareup.sqldelight / TransactionCallbacks TransactionCallbacks [common] interface TransactionCallbacks Functions Name Summary afterCommit [common] Content abstract fun afterCommit (function: () -> Unit ) afterRollback [common] Content abstract fun afterRollback (function: () -> Unit ) Inheritors Name TransactionWithReturn TransactionWithoutReturn Transacter","title":"TransactionCallbacks   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-callbacks/#transactioncallbacks","text":"[common] interface TransactionCallbacks","title":"TransactionCallbacks"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-callbacks/#functions","text":"Name Summary afterCommit [common] Content abstract fun afterCommit (function: () -> Unit ) afterRollback [common] Content abstract fun afterRollback (function: () -> Unit )","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-callbacks/#inheritors","text":"Name TransactionWithReturn TransactionWithoutReturn Transacter","title":"Inheritors"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-callbacks/after-commit/","text":"// runtime / com.squareup.sqldelight / TransactionCallbacks / afterCommit afterCommit [common] Content abstract fun afterCommit (function: () -> Unit )","title":"afterCommit   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-callbacks/after-commit/#aftercommit","text":"[common] Content abstract fun afterCommit (function: () -> Unit )","title":"afterCommit"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-callbacks/after-rollback/","text":"// runtime / com.squareup.sqldelight / TransactionCallbacks / afterRollback afterRollback [common] Content abstract fun afterRollback (function: () -> Unit )","title":"afterRollback   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-callbacks/after-rollback/#afterrollback","text":"[common] Content abstract fun afterRollback (function: () -> Unit )","title":"afterRollback"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-with-return/","text":"// runtime / com.squareup.sqldelight / TransactionWithReturn TransactionWithReturn [common] interface TransactionWithReturn < R > : TransactionCallbacks Functions Name Summary afterCommit [common] Content abstract fun afterCommit (function: () -> Unit ) afterRollback [common] Content abstract fun afterRollback (function: () -> Unit ) rollback [common] Content abstract fun rollback (returnValue: R ): Nothing More info Rolls back this transaction. transaction [common] Content abstract fun < R > transaction (body: TransactionWithReturn < R >.() -> R ): R More info Begin an inner transaction.","title":"TransactionWithReturn   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-with-return/#transactionwithreturn","text":"[common] interface TransactionWithReturn < R > : TransactionCallbacks","title":"TransactionWithReturn"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-with-return/#functions","text":"Name Summary afterCommit [common] Content abstract fun afterCommit (function: () -> Unit ) afterRollback [common] Content abstract fun afterRollback (function: () -> Unit ) rollback [common] Content abstract fun rollback (returnValue: R ): Nothing More info Rolls back this transaction. transaction [common] Content abstract fun < R > transaction (body: TransactionWithReturn < R >.() -> R ): R More info Begin an inner transaction.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-with-return/rollback/","text":"// runtime / com.squareup.sqldelight / TransactionWithReturn / rollback rollback [common] Content abstract fun rollback (returnValue: R ): Nothing More info Rolls back this transaction.","title":"rollback   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-with-return/rollback/#rollback","text":"[common] Content abstract fun rollback (returnValue: R ): Nothing More info Rolls back this transaction.","title":"rollback"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-with-return/transaction/","text":"// runtime / com.squareup.sqldelight / TransactionWithReturn / transaction transaction [common] Content abstract fun < R > transaction (body: TransactionWithReturn < R >.() -> R ): R More info Begin an inner transaction.","title":"transaction   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-with-return/transaction/#transaction","text":"[common] Content abstract fun < R > transaction (body: TransactionWithReturn < R >.() -> R ): R More info Begin an inner transaction.","title":"transaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-without-return/","text":"// runtime / com.squareup.sqldelight / TransactionWithoutReturn TransactionWithoutReturn [common] interface TransactionWithoutReturn : TransactionCallbacks Functions Name Summary afterCommit [common] Content abstract fun afterCommit (function: () -> Unit ) afterRollback [common] Content abstract fun afterRollback (function: () -> Unit ) rollback [common] Content abstract fun rollback (): Nothing More info Rolls back this transaction. transaction [common] Content abstract fun transaction (body: TransactionWithoutReturn .() -> Unit ) More info Begin an inner transaction.","title":"TransactionWithoutReturn   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-without-return/#transactionwithoutreturn","text":"[common] interface TransactionWithoutReturn : TransactionCallbacks","title":"TransactionWithoutReturn"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-without-return/#functions","text":"Name Summary afterCommit [common] Content abstract fun afterCommit (function: () -> Unit ) afterRollback [common] Content abstract fun afterRollback (function: () -> Unit ) rollback [common] Content abstract fun rollback (): Nothing More info Rolls back this transaction. transaction [common] Content abstract fun transaction (body: TransactionWithoutReturn .() -> Unit ) More info Begin an inner transaction.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-without-return/rollback/","text":"// runtime / com.squareup.sqldelight / TransactionWithoutReturn / rollback rollback [common] Content abstract fun rollback (): Nothing More info Rolls back this transaction.","title":"rollback   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-without-return/rollback/#rollback","text":"[common] Content abstract fun rollback (): Nothing More info Rolls back this transaction.","title":"rollback"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-without-return/transaction/","text":"// runtime / com.squareup.sqldelight / TransactionWithoutReturn / transaction transaction [common] Content abstract fun transaction (body: TransactionWithoutReturn .() -> Unit ) More info Begin an inner transaction.","title":"transaction   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-without-return/transaction/#transaction","text":"[common] Content abstract fun transaction (body: TransactionWithoutReturn .() -> Unit ) More info Begin an inner transaction.","title":"transaction"},{"location":"1.x/runtime/com.squareup.sqldelight.db/","text":"// runtime / com.squareup.sqldelight.db Package com.squareup.sqldelight.db Types Name Summary AfterVersion [common] Content class AfterVersion ( afterVersion : Int , block : () -> Unit ) More info Represents a block of code block that should be executed during a migration after the migration has finished migrating to afterVersion. AfterVersionWithDriver [common] Content class AfterVersionWithDriver ( afterVersion : Int , block : ( SqlDriver ) -> Unit ) More info Represents a block of code block that should be executed during a migration after the migration has finished migrating to afterVersion. Closeable [common] Content interface Closeable More info A type that can be closed. [js, native, jvm] Content [js, native] interface Closeable [jvm] typealias Closeable = Closeable More info SqlCursor [common] Content interface SqlCursor : Closeable More info Represents a SQL result set which can be iterated through with next . SqlDriver [common] Content interface SqlDriver : Closeable More info Maintains connections to an underlying SQL database and provides APIs for managing transactions and executing SQL statements. SqlPreparedStatement [common] Content interface SqlPreparedStatement More info Represents a SQL statement that has been prepared by a driver to be executed. Functions Name Summary migrateWithCallbacks [common] Content fun SqlDriver.Schema . migrateWithCallbacks (driver: SqlDriver , oldVersion: Int , newVersion: Int , vararg callbacks: AfterVersionWithDriver ) fun SqlDriver.Schema . migrateWithCallbacks (driver: SqlDriver , oldVersion: Int , newVersion: Int , vararg callbacks: AfterVersion ) More info Run SqlDriver.Schema.migrate normally but execute callbacks during the migration whenever it finished upgrading to a version specified by AfterVersion.afterVersion. toAfterVersionWithDriver [common] Content fun AfterVersion . toAfterVersionWithDriver (): AfterVersionWithDriver More info Wrap an AfterVersion as an AfterVersionWithDriver . use [common] Content inline fun < T : Closeable ?, R > T . use (body: ( T ) -> R ): R More info Run body on the receiver and call Closeable.close before returning or throwing. [js, native] Content [js, native] inline fun < T : Closeable ?, R > T . use (body: ( T ) -> R ): R More info","title":"Package com.squareup.sqldelight.db   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/#package-comsquareupsqldelightdb","text":"","title":"Package com.squareup.sqldelight.db"},{"location":"1.x/runtime/com.squareup.sqldelight.db/#types","text":"Name Summary AfterVersion [common] Content class AfterVersion ( afterVersion : Int , block : () -> Unit ) More info Represents a block of code block that should be executed during a migration after the migration has finished migrating to afterVersion. AfterVersionWithDriver [common] Content class AfterVersionWithDriver ( afterVersion : Int , block : ( SqlDriver ) -> Unit ) More info Represents a block of code block that should be executed during a migration after the migration has finished migrating to afterVersion. Closeable [common] Content interface Closeable More info A type that can be closed. [js, native, jvm] Content [js, native] interface Closeable [jvm] typealias Closeable = Closeable More info SqlCursor [common] Content interface SqlCursor : Closeable More info Represents a SQL result set which can be iterated through with next . SqlDriver [common] Content interface SqlDriver : Closeable More info Maintains connections to an underlying SQL database and provides APIs for managing transactions and executing SQL statements. SqlPreparedStatement [common] Content interface SqlPreparedStatement More info Represents a SQL statement that has been prepared by a driver to be executed.","title":"Types"},{"location":"1.x/runtime/com.squareup.sqldelight.db/#functions","text":"Name Summary migrateWithCallbacks [common] Content fun SqlDriver.Schema . migrateWithCallbacks (driver: SqlDriver , oldVersion: Int , newVersion: Int , vararg callbacks: AfterVersionWithDriver ) fun SqlDriver.Schema . migrateWithCallbacks (driver: SqlDriver , oldVersion: Int , newVersion: Int , vararg callbacks: AfterVersion ) More info Run SqlDriver.Schema.migrate normally but execute callbacks during the migration whenever it finished upgrading to a version specified by AfterVersion.afterVersion. toAfterVersionWithDriver [common] Content fun AfterVersion . toAfterVersionWithDriver (): AfterVersionWithDriver More info Wrap an AfterVersion as an AfterVersionWithDriver . use [common] Content inline fun < T : Closeable ?, R > T . use (body: ( T ) -> R ): R More info Run body on the receiver and call Closeable.close before returning or throwing. [js, native] Content [js, native] inline fun < T : Closeable ?, R > T . use (body: ( T ) -> R ): R More info","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/migrate-with-callbacks/","text":"// runtime / com.squareup.sqldelight.db / migrateWithCallbacks migrateWithCallbacks [common] Content fun SqlDriver.Schema . migrateWithCallbacks (driver: SqlDriver , oldVersion: Int , newVersion: Int , vararg callbacks: AfterVersion ) More info Run SqlDriver.Schema.migrate normally but execute callbacks during the migration whenever it finished upgrading to a version specified by AfterVersion.afterVersion. This method takes AfterVersion callbacks, which receive no parameters when invoked. [common] Content fun SqlDriver.Schema . migrateWithCallbacks (driver: SqlDriver , oldVersion: Int , newVersion: Int , vararg callbacks: AfterVersionWithDriver ) More info Run SqlDriver.Schema.migrate normally but execute callbacks during the migration whenever it finished upgrading to a version specified by AfterVersion.afterVersion. This method takes AfterVersionWithDriver callbacks, which receive a SqlDriver parameter when invoked.","title":"migrateWithCallbacks   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/migrate-with-callbacks/#migratewithcallbacks","text":"[common] Content fun SqlDriver.Schema . migrateWithCallbacks (driver: SqlDriver , oldVersion: Int , newVersion: Int , vararg callbacks: AfterVersion ) More info Run SqlDriver.Schema.migrate normally but execute callbacks during the migration whenever it finished upgrading to a version specified by AfterVersion.afterVersion. This method takes AfterVersion callbacks, which receive no parameters when invoked. [common] Content fun SqlDriver.Schema . migrateWithCallbacks (driver: SqlDriver , oldVersion: Int , newVersion: Int , vararg callbacks: AfterVersionWithDriver ) More info Run SqlDriver.Schema.migrate normally but execute callbacks during the migration whenever it finished upgrading to a version specified by AfterVersion.afterVersion. This method takes AfterVersionWithDriver callbacks, which receive a SqlDriver parameter when invoked.","title":"migrateWithCallbacks"},{"location":"1.x/runtime/com.squareup.sqldelight.db/to-after-version-with-driver/","text":"// runtime / com.squareup.sqldelight.db / toAfterVersionWithDriver toAfterVersionWithDriver [common] Content fun AfterVersion . toAfterVersionWithDriver (): AfterVersionWithDriver More info Wrap an AfterVersion as an AfterVersionWithDriver .","title":"toAfterVersionWithDriver   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/to-after-version-with-driver/#toafterversionwithdriver","text":"[common] Content fun AfterVersion . toAfterVersionWithDriver (): AfterVersionWithDriver More info Wrap an AfterVersion as an AfterVersionWithDriver .","title":"toAfterVersionWithDriver"},{"location":"1.x/runtime/com.squareup.sqldelight.db/use/","text":"// runtime / com.squareup.sqldelight.db / use use [common] Content inline fun < T : Closeable ?, R > T . use (body: ( T ) -> R ): R More info Run body on the receiver and call Closeable.close before returning or throwing. [js, native] Content [js, native] inline fun < T : Closeable ?, R > T . use (body: ( T ) -> R ): R More info","title":"use   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/use/#use","text":"[common] Content inline fun < T : Closeable ?, R > T . use (body: ( T ) -> R ): R More info Run body on the receiver and call Closeable.close before returning or throwing. [js, native] Content [js, native] inline fun < T : Closeable ?, R > T . use (body: ( T ) -> R ): R More info","title":"use"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-after-version/","text":"// runtime / com.squareup.sqldelight.db / AfterVersion AfterVersion [common] class AfterVersion ( afterVersion : Int , block : () -> Unit ) Represents a block of code block that should be executed during a migration after the migration has finished migrating to afterVersion. Constructors AfterVersion [common] fun AfterVersion (afterVersion: Int , block: () -> Unit ) Extensions Name Summary toAfterVersionWithDriver [common] Content fun AfterVersion . toAfterVersionWithDriver (): AfterVersionWithDriver More info Wrap an AfterVersion as an AfterVersionWithDriver .","title":"AfterVersion   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-after-version/#afterversion","text":"[common] class AfterVersion ( afterVersion : Int , block : () -> Unit ) Represents a block of code block that should be executed during a migration after the migration has finished migrating to afterVersion.","title":"AfterVersion"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-after-version/#constructors","text":"AfterVersion [common] fun AfterVersion (afterVersion: Int , block: () -> Unit )","title":"Constructors"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-after-version/#extensions","text":"Name Summary toAfterVersionWithDriver [common] Content fun AfterVersion . toAfterVersionWithDriver (): AfterVersionWithDriver More info Wrap an AfterVersion as an AfterVersionWithDriver .","title":"Extensions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-after-version/-after-version/","text":"// runtime / com.squareup.sqldelight.db / AfterVersion / AfterVersion AfterVersion [common] Content fun AfterVersion (afterVersion: Int , block: () -> Unit )","title":"AfterVersion   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-after-version/-after-version/#afterversion","text":"[common] Content fun AfterVersion (afterVersion: Int , block: () -> Unit )","title":"AfterVersion"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-after-version-with-driver/","text":"// runtime / com.squareup.sqldelight.db / AfterVersionWithDriver AfterVersionWithDriver [common] class AfterVersionWithDriver ( afterVersion : Int , block : ( SqlDriver ) -> Unit ) Represents a block of code block that should be executed during a migration after the migration has finished migrating to afterVersion. Unlike AfterVersion , this version's lambda accepts a SqlDriver as a parameter to make migrations easier. Constructors AfterVersionWithDriver [common] fun AfterVersionWithDriver (afterVersion: Int , block: ( SqlDriver ) -> Unit )","title":"AfterVersionWithDriver   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-after-version-with-driver/#afterversionwithdriver","text":"[common] class AfterVersionWithDriver ( afterVersion : Int , block : ( SqlDriver ) -> Unit ) Represents a block of code block that should be executed during a migration after the migration has finished migrating to afterVersion. Unlike AfterVersion , this version's lambda accepts a SqlDriver as a parameter to make migrations easier.","title":"AfterVersionWithDriver"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-after-version-with-driver/#constructors","text":"AfterVersionWithDriver [common] fun AfterVersionWithDriver (afterVersion: Int , block: ( SqlDriver ) -> Unit )","title":"Constructors"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-after-version-with-driver/-after-version-with-driver/","text":"// runtime / com.squareup.sqldelight.db / AfterVersionWithDriver / AfterVersionWithDriver AfterVersionWithDriver [common] Content fun AfterVersionWithDriver (afterVersion: Int , block: ( SqlDriver ) -> Unit )","title":"AfterVersionWithDriver   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-after-version-with-driver/-after-version-with-driver/#afterversionwithdriver","text":"[common] Content fun AfterVersionWithDriver (afterVersion: Int , block: ( SqlDriver ) -> Unit )","title":"AfterVersionWithDriver"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-closeable/","text":"// runtime / com.squareup.sqldelight.db / Closeable Closeable [common] interface Closeable A type that can be closed. [js, native] interface Closeable [jvm] typealias Closeable = Closeable Functions Name Summary close [common] Content abstract fun close () More info Close any resources backed by this object. [js, native] Content [js, native] abstract fun close () More info Inheritors Name SqlCursor SqlDriver","title":"Closeable   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-closeable/#closeable","text":"[common] interface Closeable A type that can be closed. [js, native] interface Closeable [jvm] typealias Closeable = Closeable","title":"Closeable"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-closeable/#functions","text":"Name Summary close [common] Content abstract fun close () More info Close any resources backed by this object. [js, native] Content [js, native] abstract fun close () More info","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-closeable/#inheritors","text":"Name SqlCursor SqlDriver","title":"Inheritors"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-closeable/close/","text":"// runtime / com.squareup.sqldelight.db / Closeable / close close [common] Content abstract fun close () More info Close any resources backed by this object. [js, native] Content [js, native] abstract fun close () More info","title":"close   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-closeable/close/#close","text":"[common] Content abstract fun close () More info Close any resources backed by this object. [js, native] Content [js, native] abstract fun close () More info","title":"close"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/","text":"// runtime / com.squareup.sqldelight.db / SqlCursor SqlCursor [common] interface SqlCursor : Closeable Represents a SQL result set which can be iterated through with next . Initially the cursor will not point to any row, and calling next once will iterate to the first row. Functions Name Summary close [common] Content abstract fun close () More info Close any resources backed by this object. getBytes [common] Content abstract fun getBytes (index: Int ): ByteArray ? getDouble [common] Content abstract fun getDouble (index: Int ): Double ? getLong [common] Content abstract fun getLong (index: Int ): Long ? getString [common] Content abstract fun getString (index: Int ): String ? next [common] Content abstract fun next (): Boolean More info Move to the next row in the result set.","title":"SqlCursor   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/#sqlcursor","text":"[common] interface SqlCursor : Closeable Represents a SQL result set which can be iterated through with next . Initially the cursor will not point to any row, and calling next once will iterate to the first row.","title":"SqlCursor"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/#functions","text":"Name Summary close [common] Content abstract fun close () More info Close any resources backed by this object. getBytes [common] Content abstract fun getBytes (index: Int ): ByteArray ? getDouble [common] Content abstract fun getDouble (index: Int ): Double ? getLong [common] Content abstract fun getLong (index: Int ): Long ? getString [common] Content abstract fun getString (index: Int ): String ? next [common] Content abstract fun next (): Boolean More info Move to the next row in the result set.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-bytes/","text":"// runtime / com.squareup.sqldelight.db / SqlCursor / getBytes getBytes [common] Content abstract fun getBytes (index: Int ): ByteArray ? More info Return The bytes or null value of column index for the current row of the result set.","title":"getBytes   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-bytes/#getbytes","text":"[common] Content abstract fun getBytes (index: Int ): ByteArray ? More info","title":"getBytes"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-bytes/#return","text":"The bytes or null value of column index for the current row of the result set.","title":"Return"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-double/","text":"// runtime / com.squareup.sqldelight.db / SqlCursor / getDouble getDouble [common] Content abstract fun getDouble (index: Int ): Double ? More info Return The double or null value of column index for the current row of the result set.","title":"getDouble   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-double/#getdouble","text":"[common] Content abstract fun getDouble (index: Int ): Double ? More info","title":"getDouble"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-double/#return","text":"The double or null value of column index for the current row of the result set.","title":"Return"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-long/","text":"// runtime / com.squareup.sqldelight.db / SqlCursor / getLong getLong [common] Content abstract fun getLong (index: Int ): Long ? More info Return The int or null value of column index for the current row of the result set.","title":"getLong   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-long/#getlong","text":"[common] Content abstract fun getLong (index: Int ): Long ? More info","title":"getLong"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-long/#return","text":"The int or null value of column index for the current row of the result set.","title":"Return"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-string/","text":"// runtime / com.squareup.sqldelight.db / SqlCursor / getString getString [common] Content abstract fun getString (index: Int ): String ? More info Return The string or null value of column index for the current row of the result set.","title":"getString   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-string/#getstring","text":"[common] Content abstract fun getString (index: Int ): String ? More info","title":"getString"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-string/#return","text":"The string or null value of column index for the current row of the result set.","title":"Return"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/next/","text":"// runtime / com.squareup.sqldelight.db / SqlCursor / next next [common] Content abstract fun next (): Boolean More info Move to the next row in the result set. Return true if the cursor successfully moved to a new row, false if there was no row to iterate to.","title":"next   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/next/#next","text":"[common] Content abstract fun next (): Boolean More info Move to the next row in the result set.","title":"next"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/next/#return","text":"true if the cursor successfully moved to a new row, false if there was no row to iterate to.","title":"Return"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/","text":"// runtime / com.squareup.sqldelight.db / SqlDriver SqlDriver [common] interface SqlDriver : Closeable Maintains connections to an underlying SQL database and provides APIs for managing transactions and executing SQL statements. Types Name Summary Schema [common] Content interface Schema More info API for creating and migrating a SQL database. Functions Name Summary close [common] Content abstract fun close () More info Close any resources backed by this object. currentTransaction [common] Content abstract fun currentTransaction (): Transacter.Transaction ? More info The currently open Transacter.Transaction on the database. execute [common] Content abstract fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement .() -> Unit ? = null) More info Execute a SQL statement. executeQuery [common] Content abstract fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement .() -> Unit ? = null): SqlCursor More info Execute a SQL statement and return a SqlCursor that iterates the result set. newTransaction [common] Content abstract fun newTransaction (): Transacter.Transaction More info Start a new Transacter.Transaction on the database. Inheritors Name LogSqliteDriver","title":"SqlDriver   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/#sqldriver","text":"[common] interface SqlDriver : Closeable Maintains connections to an underlying SQL database and provides APIs for managing transactions and executing SQL statements.","title":"SqlDriver"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/#types","text":"Name Summary Schema [common] Content interface Schema More info API for creating and migrating a SQL database.","title":"Types"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/#functions","text":"Name Summary close [common] Content abstract fun close () More info Close any resources backed by this object. currentTransaction [common] Content abstract fun currentTransaction (): Transacter.Transaction ? More info The currently open Transacter.Transaction on the database. execute [common] Content abstract fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement .() -> Unit ? = null) More info Execute a SQL statement. executeQuery [common] Content abstract fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement .() -> Unit ? = null): SqlCursor More info Execute a SQL statement and return a SqlCursor that iterates the result set. newTransaction [common] Content abstract fun newTransaction (): Transacter.Transaction More info Start a new Transacter.Transaction on the database.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/#inheritors","text":"Name LogSqliteDriver","title":"Inheritors"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/current-transaction/","text":"// runtime / com.squareup.sqldelight.db / SqlDriver / currentTransaction currentTransaction [common] Content abstract fun currentTransaction (): Transacter.Transaction ? More info The currently open Transacter.Transaction on the database. It's up to the implementor how this method behaves for different connection/threading patterns.","title":"currentTransaction   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/current-transaction/#currenttransaction","text":"[common] Content abstract fun currentTransaction (): Transacter.Transaction ? More info The currently open Transacter.Transaction on the database. It's up to the implementor how this method behaves for different connection/threading patterns.","title":"currentTransaction"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/execute-query/","text":"// runtime / com.squareup.sqldelight.db / SqlDriver / executeQuery executeQuery [common] Content abstract fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement .() -> Unit ? = null): SqlCursor More info Execute a SQL statement and return a SqlCursor that iterates the result set. Parameters common identifier An opaque, unique value that can be used to implement any driver-side caching of prepared statements. If identifier is null, a fresh statement is required. sql The SQL string to be executed. parameters The number of bindable parameters sql contains. binders A lambda which is called before execution to bind any parameters to the SQL statement.","title":"executeQuery   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/execute-query/#executequery","text":"[common] Content abstract fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement .() -> Unit ? = null): SqlCursor More info Execute a SQL statement and return a SqlCursor that iterates the result set.","title":"executeQuery"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/execute-query/#parameters","text":"common identifier An opaque, unique value that can be used to implement any driver-side caching of prepared statements. If identifier is null, a fresh statement is required. sql The SQL string to be executed. parameters The number of bindable parameters sql contains. binders A lambda which is called before execution to bind any parameters to the SQL statement.","title":"Parameters"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/execute/","text":"// runtime / com.squareup.sqldelight.db / SqlDriver / execute execute [common] Content abstract fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement .() -> Unit ? = null) More info Execute a SQL statement. Parameters common identifier An opaque, unique value that can be used to implement any driver-side caching of prepared statements. If identifier is null, a fresh statement is required. sql The SQL string to be executed. parameters The number of bindable parameters sql contains. binders A lambda which is called before execution to bind any parameters to the SQL statement.","title":"execute   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/execute/#execute","text":"[common] Content abstract fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement .() -> Unit ? = null) More info Execute a SQL statement.","title":"execute"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/execute/#parameters","text":"common identifier An opaque, unique value that can be used to implement any driver-side caching of prepared statements. If identifier is null, a fresh statement is required. sql The SQL string to be executed. parameters The number of bindable parameters sql contains. binders A lambda which is called before execution to bind any parameters to the SQL statement.","title":"Parameters"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/new-transaction/","text":"// runtime / com.squareup.sqldelight.db / SqlDriver / newTransaction newTransaction [common] Content abstract fun newTransaction (): Transacter.Transaction More info Start a new Transacter.Transaction on the database. It's up to the implementor how this method behaves for different connection/threading patterns.","title":"newTransaction   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/new-transaction/#newtransaction","text":"[common] Content abstract fun newTransaction (): Transacter.Transaction More info Start a new Transacter.Transaction on the database. It's up to the implementor how this method behaves for different connection/threading patterns.","title":"newTransaction"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/","text":"// runtime / com.squareup.sqldelight.db / SqlDriver / Schema Schema [common] interface Schema API for creating and migrating a SQL database. Functions Name Summary create [common] Content abstract fun create (driver: SqlDriver ) More info Use driver to create the schema from scratch. migrate [common] Content abstract fun migrate (driver: SqlDriver , oldVersion: Int , newVersion: Int ) More info Use driver to migrate from schema oldVersion to newVersion . Properties Name Summary version [common] abstract val version : Int The version of this schema. Extensions Name Summary migrateWithCallbacks [common] Content fun SqlDriver.Schema . migrateWithCallbacks (driver: SqlDriver , oldVersion: Int , newVersion: Int , vararg callbacks: AfterVersion ) fun SqlDriver.Schema . migrateWithCallbacks (driver: SqlDriver , oldVersion: Int , newVersion: Int , vararg callbacks: AfterVersionWithDriver ) More info Run SqlDriver.Schema.migrate normally but execute callbacks during the migration whenever it finished upgrading to a version specified by AfterVersion.afterVersion.","title":"Schema   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/#schema","text":"[common] interface Schema API for creating and migrating a SQL database.","title":"Schema"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/#functions","text":"Name Summary create [common] Content abstract fun create (driver: SqlDriver ) More info Use driver to create the schema from scratch. migrate [common] Content abstract fun migrate (driver: SqlDriver , oldVersion: Int , newVersion: Int ) More info Use driver to migrate from schema oldVersion to newVersion .","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/#properties","text":"Name Summary version [common] abstract val version : Int The version of this schema.","title":"Properties"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/#extensions","text":"Name Summary migrateWithCallbacks [common] Content fun SqlDriver.Schema . migrateWithCallbacks (driver: SqlDriver , oldVersion: Int , newVersion: Int , vararg callbacks: AfterVersion ) fun SqlDriver.Schema . migrateWithCallbacks (driver: SqlDriver , oldVersion: Int , newVersion: Int , vararg callbacks: AfterVersionWithDriver ) More info Run SqlDriver.Schema.migrate normally but execute callbacks during the migration whenever it finished upgrading to a version specified by AfterVersion.afterVersion.","title":"Extensions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/create/","text":"// runtime / com.squareup.sqldelight.db / SqlDriver / Schema / create create [common] Content abstract fun create (driver: SqlDriver ) More info Use driver to create the schema from scratch. Assumes no existing database state.","title":"create   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/create/#create","text":"[common] Content abstract fun create (driver: SqlDriver ) More info Use driver to create the schema from scratch. Assumes no existing database state.","title":"create"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/migrate/","text":"// runtime / com.squareup.sqldelight.db / SqlDriver / Schema / migrate migrate [common] Content abstract fun migrate (driver: SqlDriver , oldVersion: Int , newVersion: Int ) More info Use driver to migrate from schema oldVersion to newVersion .","title":"migrate   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/migrate/#migrate","text":"[common] Content abstract fun migrate (driver: SqlDriver , oldVersion: Int , newVersion: Int ) More info Use driver to migrate from schema oldVersion to newVersion .","title":"migrate"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/version/","text":"// runtime / com.squareup.sqldelight.db / SqlDriver / Schema / version version [common] Content abstract val version : Int More info The version of this schema.","title":"version   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/version/#version","text":"[common] Content abstract val version : Int More info The version of this schema.","title":"version"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/","text":"// runtime / com.squareup.sqldelight.db / SqlPreparedStatement SqlPreparedStatement [common] interface SqlPreparedStatement Represents a SQL statement that has been prepared by a driver to be executed. This type is not thread safe unless otherwise specified by the driver emitting these. Prepared statements should not be cached by client code. Drivers can implement caching by using the integer identifier passed to SqlDriver.execute or SqlDriver.executeQuery . Client code can pass the same identifier to that method to request that the prepared statement is cached. Functions Name Summary bindBytes [common] Content abstract fun bindBytes (index: Int , bytes: ByteArray ?) More info Bind bytes to the underlying statement at index . bindDouble [common] Content abstract fun bindDouble (index: Int , double: Double ?) More info Bind double to the underlying statement at index . bindLong [common] Content abstract fun bindLong (index: Int , long: Long ?) More info Bind long to the underlying statement at index . bindString [common] Content abstract fun bindString (index: Int , string: String ?) More info Bind string to the underlying statement at index . Inheritors Name StatementParameterInterceptor","title":"SqlPreparedStatement   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/#sqlpreparedstatement","text":"[common] interface SqlPreparedStatement Represents a SQL statement that has been prepared by a driver to be executed. This type is not thread safe unless otherwise specified by the driver emitting these. Prepared statements should not be cached by client code. Drivers can implement caching by using the integer identifier passed to SqlDriver.execute or SqlDriver.executeQuery . Client code can pass the same identifier to that method to request that the prepared statement is cached.","title":"SqlPreparedStatement"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/#functions","text":"Name Summary bindBytes [common] Content abstract fun bindBytes (index: Int , bytes: ByteArray ?) More info Bind bytes to the underlying statement at index . bindDouble [common] Content abstract fun bindDouble (index: Int , double: Double ?) More info Bind double to the underlying statement at index . bindLong [common] Content abstract fun bindLong (index: Int , long: Long ?) More info Bind long to the underlying statement at index . bindString [common] Content abstract fun bindString (index: Int , string: String ?) More info Bind string to the underlying statement at index .","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/#inheritors","text":"Name StatementParameterInterceptor","title":"Inheritors"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/bind-bytes/","text":"// runtime / com.squareup.sqldelight.db / SqlPreparedStatement / bindBytes bindBytes [common] Content abstract fun bindBytes (index: Int , bytes: ByteArray ?) More info Bind bytes to the underlying statement at index .","title":"bindBytes   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/bind-bytes/#bindbytes","text":"[common] Content abstract fun bindBytes (index: Int , bytes: ByteArray ?) More info Bind bytes to the underlying statement at index .","title":"bindBytes"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/bind-double/","text":"// runtime / com.squareup.sqldelight.db / SqlPreparedStatement / bindDouble bindDouble [common] Content abstract fun bindDouble (index: Int , double: Double ?) More info Bind double to the underlying statement at index .","title":"bindDouble   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/bind-double/#binddouble","text":"[common] Content abstract fun bindDouble (index: Int , double: Double ?) More info Bind double to the underlying statement at index .","title":"bindDouble"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/bind-long/","text":"// runtime / com.squareup.sqldelight.db / SqlPreparedStatement / bindLong bindLong [common] Content abstract fun bindLong (index: Int , long: Long ?) More info Bind long to the underlying statement at index .","title":"bindLong   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/bind-long/#bindlong","text":"[common] Content abstract fun bindLong (index: Int , long: Long ?) More info Bind long to the underlying statement at index .","title":"bindLong"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/bind-string/","text":"// runtime / com.squareup.sqldelight.db / SqlPreparedStatement / bindString bindString [common] Content abstract fun bindString (index: Int , string: String ?) More info Bind string to the underlying statement at index .","title":"bindString   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/bind-string/#bindstring","text":"[common] Content abstract fun bindString (index: Int , string: String ?) More info Bind string to the underlying statement at index .","title":"bindString"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/","text":"// runtime / com.squareup.sqldelight.internal Package com.squareup.sqldelight.internal Types Name Summary Atomic [common, js, native, jvm] Content [common, native] class Atomic < V >( value : V ) [js] open class Atomic < V >( value : V ) [jvm] typealias Atomic = AtomicReference < V > AtomicBoolean [common, js, native, jvm] Content [common, native] class AtomicBoolean ( value : Boolean ) [js] class AtomicBoolean ( value : Boolean ) : Atomic < Boolean > [jvm] typealias AtomicBoolean = AtomicBoolean Functions Name Summary copyOnWriteList [common, js, jvm, native] Content [common, js, jvm, native] fun copyOnWriteList (): MutableList < Query <*>> getValue [common] Content operator fun < T > Atomic < T >. getValue (thisRef: Any ?, prop: KProperty <*>): T setValue [common] Content operator fun < T > Atomic < T >. setValue (thisRef: Any ?, prop: KProperty <*>, value: T )","title":"Package com.squareup.sqldelight.internal   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/#package-comsquareupsqldelightinternal","text":"","title":"Package com.squareup.sqldelight.internal"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/#types","text":"Name Summary Atomic [common, js, native, jvm] Content [common, native] class Atomic < V >( value : V ) [js] open class Atomic < V >( value : V ) [jvm] typealias Atomic = AtomicReference < V > AtomicBoolean [common, js, native, jvm] Content [common, native] class AtomicBoolean ( value : Boolean ) [js] class AtomicBoolean ( value : Boolean ) : Atomic < Boolean > [jvm] typealias AtomicBoolean = AtomicBoolean","title":"Types"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/#functions","text":"Name Summary copyOnWriteList [common, js, jvm, native] Content [common, js, jvm, native] fun copyOnWriteList (): MutableList < Query <*>> getValue [common] Content operator fun < T > Atomic < T >. getValue (thisRef: Any ?, prop: KProperty <*>): T setValue [common] Content operator fun < T > Atomic < T >. setValue (thisRef: Any ?, prop: KProperty <*>, value: T )","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/copy-on-write-list/","text":"// runtime / com.squareup.sqldelight.internal / copyOnWriteList copyOnWriteList [common, js, jvm, native] Content [common, js, jvm, native] fun copyOnWriteList (): MutableList < Query <*>>","title":"copyOnWriteList   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/copy-on-write-list/#copyonwritelist","text":"[common, js, jvm, native] Content [common, js, jvm, native] fun copyOnWriteList (): MutableList < Query <*>>","title":"copyOnWriteList"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/get-value/","text":"// runtime / com.squareup.sqldelight.internal / getValue getValue [common] Content operator fun < T > Atomic < T >. getValue (thisRef: Any ?, prop: KProperty <*>): T","title":"getValue   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/get-value/#getvalue","text":"[common] Content operator fun < T > Atomic < T >. getValue (thisRef: Any ?, prop: KProperty <*>): T","title":"getValue"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/set-value/","text":"// runtime / com.squareup.sqldelight.internal / setValue setValue [common] Content operator fun < T > Atomic < T >. setValue (thisRef: Any ?, prop: KProperty <*>, value: T )","title":"setValue   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/set-value/#setvalue","text":"[common] Content operator fun < T > Atomic < T >. setValue (thisRef: Any ?, prop: KProperty <*>, value: T )","title":"setValue"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic/","text":"// runtime / com.squareup.sqldelight.internal / Atomic Atomic [common, native] class Atomic < V >( value : V ) [js] open class Atomic < V >( value : V ) [jvm] typealias Atomic = AtomicReference < V > Functions Name Summary get [common, js, native] Content [common, js, native] fun get (): V set [common, js, native] Content [common, js, native] fun set (value: V ) Inheritors Name AtomicBoolean Extensions Name Summary getValue [common] Content operator fun < T > Atomic < T >. getValue (thisRef: Any ?, prop: KProperty <*>): T setValue [common] Content operator fun < T > Atomic < T >. setValue (thisRef: Any ?, prop: KProperty <*>, value: T )","title":"Atomic   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic/#atomic","text":"[common, native] class Atomic < V >( value : V ) [js] open class Atomic < V >( value : V ) [jvm] typealias Atomic = AtomicReference < V >","title":"Atomic"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic/#functions","text":"Name Summary get [common, js, native] Content [common, js, native] fun get (): V set [common, js, native] Content [common, js, native] fun set (value: V )","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic/#inheritors","text":"Name AtomicBoolean","title":"Inheritors"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic/#extensions","text":"Name Summary getValue [common] Content operator fun < T > Atomic < T >. getValue (thisRef: Any ?, prop: KProperty <*>): T setValue [common] Content operator fun < T > Atomic < T >. setValue (thisRef: Any ?, prop: KProperty <*>, value: T )","title":"Extensions"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic/-atomic/","text":"// runtime / com.squareup.sqldelight.internal / Atomic / Atomic Atomic [common, js, native] Content [common, js, native] fun < V > Atomic (value: V )","title":"Atomic   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic/-atomic/#atomic","text":"[common, js, native] Content [common, js, native] fun < V > Atomic (value: V )","title":"Atomic"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic/get/","text":"// runtime / com.squareup.sqldelight.internal / Atomic / get get [common, js, native] Content [common, js, native] fun get (): V","title":"get   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic/get/#get","text":"[common, js, native] Content [common, js, native] fun get (): V","title":"get"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic/set/","text":"// runtime / com.squareup.sqldelight.internal / Atomic / set set [common, js, native] Content [common, js, native] fun set (value: V )","title":"set   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic/set/#set","text":"[common, js, native] Content [common, js, native] fun set (value: V )","title":"set"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic-boolean/","text":"// runtime / com.squareup.sqldelight.internal / AtomicBoolean AtomicBoolean [common, native] class AtomicBoolean ( value : Boolean ) [js] class AtomicBoolean ( value : Boolean ) : Atomic < Boolean > [jvm] typealias AtomicBoolean = AtomicBoolean Functions Name Summary get [common, native] Content [common, native] fun get (): Boolean set [common, native] Content [common, native] fun set (value: Boolean )","title":"AtomicBoolean   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic-boolean/#atomicboolean","text":"[common, native] class AtomicBoolean ( value : Boolean ) [js] class AtomicBoolean ( value : Boolean ) : Atomic < Boolean > [jvm] typealias AtomicBoolean = AtomicBoolean","title":"AtomicBoolean"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic-boolean/#functions","text":"Name Summary get [common, native] Content [common, native] fun get (): Boolean set [common, native] Content [common, native] fun set (value: Boolean )","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic-boolean/-atomic-boolean/","text":"// runtime / com.squareup.sqldelight.internal / AtomicBoolean / AtomicBoolean AtomicBoolean [common, js, native] Content [common, js, native] fun AtomicBoolean (value: Boolean )","title":"AtomicBoolean   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic-boolean/-atomic-boolean/#atomicboolean","text":"[common, js, native] Content [common, js, native] fun AtomicBoolean (value: Boolean )","title":"AtomicBoolean"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic-boolean/get/","text":"// runtime / com.squareup.sqldelight.internal / AtomicBoolean / get get [common, native] Content [common, native] fun get (): Boolean","title":"get   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic-boolean/get/#get","text":"[common, native] Content [common, native] fun get (): Boolean","title":"get"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic-boolean/set/","text":"// runtime / com.squareup.sqldelight.internal / AtomicBoolean / set set [common, native] Content [common, native] fun set (value: Boolean )","title":"set   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.internal/-atomic-boolean/set/#set","text":"[common, native] Content [common, native] fun set (value: Boolean )","title":"set"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/","text":"// runtime / com.squareup.sqldelight.logs Package com.squareup.sqldelight.logs Types Name Summary LogSqliteDriver [common] Content class LogSqliteDriver ( sqlDriver : SqlDriver , logger : ( String ) -> Unit ) : SqlDriver StatementParameterInterceptor [common] Content class StatementParameterInterceptor : SqlPreparedStatement","title":"Package com.squareup.sqldelight.logs   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/#package-comsquareupsqldelightlogs","text":"","title":"Package com.squareup.sqldelight.logs"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/#types","text":"Name Summary LogSqliteDriver [common] Content class LogSqliteDriver ( sqlDriver : SqlDriver , logger : ( String ) -> Unit ) : SqlDriver StatementParameterInterceptor [common] Content class StatementParameterInterceptor : SqlPreparedStatement","title":"Types"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/","text":"// runtime / com.squareup.sqldelight.logs / LogSqliteDriver LogSqliteDriver [common] class LogSqliteDriver ( sqlDriver : SqlDriver , logger : ( String ) -> Unit ) : SqlDriver Functions Name Summary close [common] Content open override fun close () More info Close any resources backed by this object. currentTransaction [common] Content open override fun currentTransaction (): Transacter.Transaction ? More info The currently open Transacter.Transaction on the database. execute [common] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement .() -> Unit ?) More info Execute a SQL statement. executeQuery [common] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement .() -> Unit ?): SqlCursor More info Execute a SQL statement and return a SqlCursor that iterates the result set. newTransaction [common] Content open override fun newTransaction (): Transacter.Transaction More info Start a new Transacter.Transaction on the database.","title":"LogSqliteDriver   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/#logsqlitedriver","text":"[common] class LogSqliteDriver ( sqlDriver : SqlDriver , logger : ( String ) -> Unit ) : SqlDriver","title":"LogSqliteDriver"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/#functions","text":"Name Summary close [common] Content open override fun close () More info Close any resources backed by this object. currentTransaction [common] Content open override fun currentTransaction (): Transacter.Transaction ? More info The currently open Transacter.Transaction on the database. execute [common] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement .() -> Unit ?) More info Execute a SQL statement. executeQuery [common] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement .() -> Unit ?): SqlCursor More info Execute a SQL statement and return a SqlCursor that iterates the result set. newTransaction [common] Content open override fun newTransaction (): Transacter.Transaction More info Start a new Transacter.Transaction on the database.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/-log-sqlite-driver/","text":"// runtime / com.squareup.sqldelight.logs / LogSqliteDriver / LogSqliteDriver LogSqliteDriver [common] Content fun LogSqliteDriver (sqlDriver: SqlDriver , logger: ( String ) -> Unit )","title":"LogSqliteDriver   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/-log-sqlite-driver/#logsqlitedriver","text":"[common] Content fun LogSqliteDriver (sqlDriver: SqlDriver , logger: ( String ) -> Unit )","title":"LogSqliteDriver"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/close/","text":"// runtime / com.squareup.sqldelight.logs / LogSqliteDriver / close close [common] Content open override fun close () More info Close any resources backed by this object.","title":"close   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/close/#close","text":"[common] Content open override fun close () More info Close any resources backed by this object.","title":"close"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/current-transaction/","text":"// runtime / com.squareup.sqldelight.logs / LogSqliteDriver / currentTransaction currentTransaction [common] Content open override fun currentTransaction (): Transacter.Transaction ? More info The currently open Transacter.Transaction on the database. It's up to the implementor how this method behaves for different connection/threading patterns.","title":"currentTransaction   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/current-transaction/#currenttransaction","text":"[common] Content open override fun currentTransaction (): Transacter.Transaction ? More info The currently open Transacter.Transaction on the database. It's up to the implementor how this method behaves for different connection/threading patterns.","title":"currentTransaction"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/execute-query/","text":"// runtime / com.squareup.sqldelight.logs / LogSqliteDriver / executeQuery executeQuery [common] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement .() -> Unit ?): SqlCursor More info Execute a SQL statement and return a SqlCursor that iterates the result set. Parameters common identifier An opaque, unique value that can be used to implement any driver-side caching of prepared statements. If identifier is null, a fresh statement is required. sql The SQL string to be executed. parameters The number of bindable parameters sql contains. binders A lambda which is called before execution to bind any parameters to the SQL statement.","title":"executeQuery   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/execute-query/#executequery","text":"[common] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement .() -> Unit ?): SqlCursor More info Execute a SQL statement and return a SqlCursor that iterates the result set.","title":"executeQuery"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/execute-query/#parameters","text":"common identifier An opaque, unique value that can be used to implement any driver-side caching of prepared statements. If identifier is null, a fresh statement is required. sql The SQL string to be executed. parameters The number of bindable parameters sql contains. binders A lambda which is called before execution to bind any parameters to the SQL statement.","title":"Parameters"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/execute/","text":"// runtime / com.squareup.sqldelight.logs / LogSqliteDriver / execute execute [common] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement .() -> Unit ?) More info Execute a SQL statement. Parameters common identifier An opaque, unique value that can be used to implement any driver-side caching of prepared statements. If identifier is null, a fresh statement is required. sql The SQL string to be executed. parameters The number of bindable parameters sql contains. binders A lambda which is called before execution to bind any parameters to the SQL statement.","title":"execute   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/execute/#execute","text":"[common] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement .() -> Unit ?) More info Execute a SQL statement.","title":"execute"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/execute/#parameters","text":"common identifier An opaque, unique value that can be used to implement any driver-side caching of prepared statements. If identifier is null, a fresh statement is required. sql The SQL string to be executed. parameters The number of bindable parameters sql contains. binders A lambda which is called before execution to bind any parameters to the SQL statement.","title":"Parameters"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/new-transaction/","text":"// runtime / com.squareup.sqldelight.logs / LogSqliteDriver / newTransaction newTransaction [common] Content open override fun newTransaction (): Transacter.Transaction More info Start a new Transacter.Transaction on the database. It's up to the implementor how this method behaves for different connection/threading patterns.","title":"newTransaction   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/new-transaction/#newtransaction","text":"[common] Content open override fun newTransaction (): Transacter.Transaction More info Start a new Transacter.Transaction on the database. It's up to the implementor how this method behaves for different connection/threading patterns.","title":"newTransaction"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/","text":"// runtime / com.squareup.sqldelight.logs / StatementParameterInterceptor StatementParameterInterceptor [common] class StatementParameterInterceptor : SqlPreparedStatement Functions Name Summary bindBytes [common] Content open override fun bindBytes (index: Int , bytes: ByteArray ?) More info Bind bytes to the underlying statement at index . bindDouble [common] Content open override fun bindDouble (index: Int , double: Double ?) More info Bind double to the underlying statement at index . bindLong [common] Content open override fun bindLong (index: Int , long: Long ?) More info Bind long to the underlying statement at index . bindString [common] Content open override fun bindString (index: Int , string: String ?) More info Bind string to the underlying statement at index . getAndClearParameters [common] Content fun getAndClearParameters (): List < Any ?>","title":"StatementParameterInterceptor   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/#statementparameterinterceptor","text":"[common] class StatementParameterInterceptor : SqlPreparedStatement","title":"StatementParameterInterceptor"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/#functions","text":"Name Summary bindBytes [common] Content open override fun bindBytes (index: Int , bytes: ByteArray ?) More info Bind bytes to the underlying statement at index . bindDouble [common] Content open override fun bindDouble (index: Int , double: Double ?) More info Bind double to the underlying statement at index . bindLong [common] Content open override fun bindLong (index: Int , long: Long ?) More info Bind long to the underlying statement at index . bindString [common] Content open override fun bindString (index: Int , string: String ?) More info Bind string to the underlying statement at index . getAndClearParameters [common] Content fun getAndClearParameters (): List < Any ?>","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/-statement-parameter-interceptor/","text":"// runtime / com.squareup.sqldelight.logs / StatementParameterInterceptor / StatementParameterInterceptor StatementParameterInterceptor [common] Content fun StatementParameterInterceptor ()","title":"StatementParameterInterceptor   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/-statement-parameter-interceptor/#statementparameterinterceptor","text":"[common] Content fun StatementParameterInterceptor ()","title":"StatementParameterInterceptor"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/bind-bytes/","text":"// runtime / com.squareup.sqldelight.logs / StatementParameterInterceptor / bindBytes bindBytes [common] Content open override fun bindBytes (index: Int , bytes: ByteArray ?) More info Bind bytes to the underlying statement at index .","title":"bindBytes   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/bind-bytes/#bindbytes","text":"[common] Content open override fun bindBytes (index: Int , bytes: ByteArray ?) More info Bind bytes to the underlying statement at index .","title":"bindBytes"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/bind-double/","text":"// runtime / com.squareup.sqldelight.logs / StatementParameterInterceptor / bindDouble bindDouble [common] Content open override fun bindDouble (index: Int , double: Double ?) More info Bind double to the underlying statement at index .","title":"bindDouble   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/bind-double/#binddouble","text":"[common] Content open override fun bindDouble (index: Int , double: Double ?) More info Bind double to the underlying statement at index .","title":"bindDouble"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/bind-long/","text":"// runtime / com.squareup.sqldelight.logs / StatementParameterInterceptor / bindLong bindLong [common] Content open override fun bindLong (index: Int , long: Long ?) More info Bind long to the underlying statement at index .","title":"bindLong   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/bind-long/#bindlong","text":"[common] Content open override fun bindLong (index: Int , long: Long ?) More info Bind long to the underlying statement at index .","title":"bindLong"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/bind-string/","text":"// runtime / com.squareup.sqldelight.logs / StatementParameterInterceptor / bindString bindString [common] Content open override fun bindString (index: Int , string: String ?) More info Bind string to the underlying statement at index .","title":"bindString   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/bind-string/#bindstring","text":"[common] Content open override fun bindString (index: Int , string: String ?) More info Bind string to the underlying statement at index .","title":"bindString"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/get-and-clear-parameters/","text":"// runtime / com.squareup.sqldelight.logs / StatementParameterInterceptor / getAndClearParameters getAndClearParameters [common] Content fun getAndClearParameters (): List < Any ?>","title":"getAndClearParameters   - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/get-and-clear-parameters/#getandclearparameters","text":"[common] Content fun getAndClearParameters (): List < Any ?>","title":"getAndClearParameters"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/","text":"// rxjava2-extensions / com.squareup.sqldelight.runtime.rx Package com.squareup.sqldelight.runtime.rx Functions Name Summary asObservable [jvm] Content @CheckReturnValue() @ JvmOverloads () @ JvmName (name = toObservable) fun < T : Any > Query< T >. asObservable (scheduler: Scheduler = Schedulers.io()): Observable<Query< T >> More info Turns this Query into an Observable which emits whenever the underlying result set changes. mapToList [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToList (): Observable< List < T >> mapToOne [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOne (): Observable< T > mapToOneNonNull [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOneNonNull (): Observable< T > mapToOneOrDefault [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOneOrDefault (defaultValue: T ): Observable< T > mapToOptional [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOptional (): Observable< Optional < T >>","title":"Package com.squareup.sqldelight.runtime.rx   - SQLDelight"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/#package-comsquareupsqldelightruntimerx","text":"","title":"Package com.squareup.sqldelight.runtime.rx"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/#functions","text":"Name Summary asObservable [jvm] Content @CheckReturnValue() @ JvmOverloads () @ JvmName (name = toObservable) fun < T : Any > Query< T >. asObservable (scheduler: Scheduler = Schedulers.io()): Observable<Query< T >> More info Turns this Query into an Observable which emits whenever the underlying result set changes. mapToList [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToList (): Observable< List < T >> mapToOne [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOne (): Observable< T > mapToOneNonNull [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOneNonNull (): Observable< T > mapToOneOrDefault [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOneOrDefault (defaultValue: T ): Observable< T > mapToOptional [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOptional (): Observable< Optional < T >>","title":"Functions"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/as-observable/","text":"// rxjava2-extensions / com.squareup.sqldelight.runtime.rx / asObservable asObservable [jvm] Content @CheckReturnValue() @ JvmOverloads () @ JvmName (name = toObservable) fun < T : Any > Query< T >. asObservable (scheduler: Scheduler = Schedulers.io()): Observable<Query< T >> More info Turns this Query into an Observable which emits whenever the underlying result set changes. Parameters jvm scheduler By default, emissions occur on the Schedulers.io scheduler but can be optionally overridden.","title":"asObservable   - SQLDelight"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/as-observable/#asobservable","text":"[jvm] Content @CheckReturnValue() @ JvmOverloads () @ JvmName (name = toObservable) fun < T : Any > Query< T >. asObservable (scheduler: Scheduler = Schedulers.io()): Observable<Query< T >> More info Turns this Query into an Observable which emits whenever the underlying result set changes.","title":"asObservable"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/as-observable/#parameters","text":"jvm scheduler By default, emissions occur on the Schedulers.io scheduler but can be optionally overridden.","title":"Parameters"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/map-to-list/","text":"// rxjava2-extensions / com.squareup.sqldelight.runtime.rx / mapToList mapToList [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToList (): Observable< List < T >>","title":"mapToList   - SQLDelight"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/map-to-list/#maptolist","text":"[jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToList (): Observable< List < T >>","title":"mapToList"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/map-to-one-non-null/","text":"// rxjava2-extensions / com.squareup.sqldelight.runtime.rx / mapToOneNonNull mapToOneNonNull [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOneNonNull (): Observable< T >","title":"mapToOneNonNull   - SQLDelight"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/map-to-one-non-null/#maptoonenonnull","text":"[jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOneNonNull (): Observable< T >","title":"mapToOneNonNull"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/map-to-one-or-default/","text":"// rxjava2-extensions / com.squareup.sqldelight.runtime.rx / mapToOneOrDefault mapToOneOrDefault [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOneOrDefault (defaultValue: T ): Observable< T >","title":"mapToOneOrDefault   - SQLDelight"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/map-to-one-or-default/#maptooneordefault","text":"[jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOneOrDefault (defaultValue: T ): Observable< T >","title":"mapToOneOrDefault"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/map-to-one/","text":"// rxjava2-extensions / com.squareup.sqldelight.runtime.rx / mapToOne mapToOne [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOne (): Observable< T >","title":"mapToOne   - SQLDelight"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/map-to-one/#maptoone","text":"[jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOne (): Observable< T >","title":"mapToOne"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/map-to-optional/","text":"// rxjava2-extensions / com.squareup.sqldelight.runtime.rx / mapToOptional mapToOptional [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOptional (): Observable< Optional < T >>","title":"mapToOptional   - SQLDelight"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/map-to-optional/#maptooptional","text":"[jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOptional (): Observable< Optional < T >>","title":"mapToOptional"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/","text":"// rxjava3-extensions / com.squareup.sqldelight.runtime.rx3 Package com.squareup.sqldelight.runtime.rx3 Functions Name Summary asObservable [jvm] Content @CheckReturnValue() @ JvmOverloads () @ JvmName (name = toObservable) fun < T : Any > Query< T >. asObservable (scheduler: Scheduler = Schedulers.io()): Observable<Query< T >> More info Turns this Query into an Observable which emits whenever the underlying result set changes. mapToList [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToList (): Observable< List < T >> mapToOne [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOne (): Observable< T > mapToOneNonNull [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOneNonNull (): Observable< T > mapToOneOrDefault [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOneOrDefault (defaultValue: T ): Observable< T > mapToOptional [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOptional (): Observable< Optional < T >>","title":"Package com.squareup.sqldelight.runtime.rx3   - SQLDelight"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/#package-comsquareupsqldelightruntimerx3","text":"","title":"Package com.squareup.sqldelight.runtime.rx3"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/#functions","text":"Name Summary asObservable [jvm] Content @CheckReturnValue() @ JvmOverloads () @ JvmName (name = toObservable) fun < T : Any > Query< T >. asObservable (scheduler: Scheduler = Schedulers.io()): Observable<Query< T >> More info Turns this Query into an Observable which emits whenever the underlying result set changes. mapToList [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToList (): Observable< List < T >> mapToOne [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOne (): Observable< T > mapToOneNonNull [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOneNonNull (): Observable< T > mapToOneOrDefault [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOneOrDefault (defaultValue: T ): Observable< T > mapToOptional [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOptional (): Observable< Optional < T >>","title":"Functions"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/as-observable/","text":"// rxjava3-extensions / com.squareup.sqldelight.runtime.rx3 / asObservable asObservable [jvm] Content @CheckReturnValue() @ JvmOverloads () @ JvmName (name = toObservable) fun < T : Any > Query< T >. asObservable (scheduler: Scheduler = Schedulers.io()): Observable<Query< T >> More info Turns this Query into an Observable which emits whenever the underlying result set changes. Parameters jvm scheduler By default, emissions occur on the Schedulers.io scheduler but can be optionally overridden.","title":"asObservable   - SQLDelight"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/as-observable/#asobservable","text":"[jvm] Content @CheckReturnValue() @ JvmOverloads () @ JvmName (name = toObservable) fun < T : Any > Query< T >. asObservable (scheduler: Scheduler = Schedulers.io()): Observable<Query< T >> More info Turns this Query into an Observable which emits whenever the underlying result set changes.","title":"asObservable"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/as-observable/#parameters","text":"jvm scheduler By default, emissions occur on the Schedulers.io scheduler but can be optionally overridden.","title":"Parameters"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/map-to-list/","text":"// rxjava3-extensions / com.squareup.sqldelight.runtime.rx3 / mapToList mapToList [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToList (): Observable< List < T >>","title":"mapToList   - SQLDelight"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/map-to-list/#maptolist","text":"[jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToList (): Observable< List < T >>","title":"mapToList"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/map-to-one-non-null/","text":"// rxjava3-extensions / com.squareup.sqldelight.runtime.rx3 / mapToOneNonNull mapToOneNonNull [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOneNonNull (): Observable< T >","title":"mapToOneNonNull   - SQLDelight"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/map-to-one-non-null/#maptoonenonnull","text":"[jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOneNonNull (): Observable< T >","title":"mapToOneNonNull"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/map-to-one-or-default/","text":"// rxjava3-extensions / com.squareup.sqldelight.runtime.rx3 / mapToOneOrDefault mapToOneOrDefault [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOneOrDefault (defaultValue: T ): Observable< T >","title":"mapToOneOrDefault   - SQLDelight"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/map-to-one-or-default/#maptooneordefault","text":"[jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOneOrDefault (defaultValue: T ): Observable< T >","title":"mapToOneOrDefault"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/map-to-one/","text":"// rxjava3-extensions / com.squareup.sqldelight.runtime.rx3 / mapToOne mapToOne [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOne (): Observable< T >","title":"mapToOne   - SQLDelight"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/map-to-one/#maptoone","text":"[jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOne (): Observable< T >","title":"mapToOne"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/map-to-optional/","text":"// rxjava3-extensions / com.squareup.sqldelight.runtime.rx3 / mapToOptional mapToOptional [jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOptional (): Observable< Optional < T >>","title":"mapToOptional   - SQLDelight"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/map-to-optional/#maptooptional","text":"[jvm] Content @CheckReturnValue() fun < T : Any > Observable<Query< T >>. mapToOptional (): Observable< Optional < T >>","title":"mapToOptional"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight/","text":"// sqldelight-compiler / com.squareup.sqldelight Package com.squareup.sqldelight Properties Name Summary VERSION [jvm] val VERSION : String","title":"Package com.squareup.sqldelight   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight/#package-comsquareupsqldelight","text":"","title":"Package com.squareup.sqldelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight/#properties","text":"Name Summary VERSION [jvm] val VERSION : String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight/-v-e-r-s-i-o-n/","text":"// sqldelight-compiler / com.squareup.sqldelight / VERSION VERSION [jvm] Content val VERSION : String","title":"VERSION   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight/-v-e-r-s-i-o-n/#version","text":"[jvm] Content val VERSION : String","title":"VERSION"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/","text":"// sqldelight-compiler / com.squareup.sqldelight.core Package com.squareup.sqldelight.core Types Name Summary GradleCompatibility [jvm] Content object GradleCompatibility SqlDelightCompilationUnit [jvm] Content interface SqlDelightCompilationUnit : Serializable More info A compilation unit represents the group of .sq files which will be compiled all at once. SqlDelightDatabaseName [jvm] Content interface SqlDelightDatabaseName : Serializable SqlDelightDatabaseProperties [jvm] Content interface SqlDelightDatabaseProperties : Serializable SqlDelightEnvironment [jvm] Content class SqlDelightEnvironment ( properties : SqlDelightDatabaseProperties , compilationUnit : SqlDelightCompilationUnit , verifyMigrations : Boolean , moduleName : String , sourceFolders : List < File >, dependencyFolders : List < File >) : SqlCoreEnvironment, SqlDelightProjectService More info Mocks an intellij environment for compiling sqldelight files without an instance of intellij running. SqlDelightException [jvm] Content class SqlDelightException ( message : String ) : IllegalStateException SqlDelightFileIndex [jvm] Content interface SqlDelightFileIndex SqldelightParser [jvm] Content open class SqldelightParser : PsiParser, LightPsiParser SqldelightParserUtil [jvm] Content object SqldelightParserUtil : GeneratedParserUtilBase SqlDelightProjectService [jvm] Content interface SqlDelightProjectService SqlDelightPropertiesFile [jvm] Content interface SqlDelightPropertiesFile : Serializable SqlDelightSourceFolder [jvm] Content interface SqlDelightSourceFolder : Serializable Properties Name Summary dialectPreset [jvm] val SqlDelightDatabaseProperties . dialectPreset : DialectPreset MINIMUM_SUPPORTED_VERSION [jvm] val MINIMUM_SUPPORTED_VERSION : String","title":"Package com.squareup.sqldelight.core   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/#package-comsquareupsqldelightcore","text":"","title":"Package com.squareup.sqldelight.core"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/#types","text":"Name Summary GradleCompatibility [jvm] Content object GradleCompatibility SqlDelightCompilationUnit [jvm] Content interface SqlDelightCompilationUnit : Serializable More info A compilation unit represents the group of .sq files which will be compiled all at once. SqlDelightDatabaseName [jvm] Content interface SqlDelightDatabaseName : Serializable SqlDelightDatabaseProperties [jvm] Content interface SqlDelightDatabaseProperties : Serializable SqlDelightEnvironment [jvm] Content class SqlDelightEnvironment ( properties : SqlDelightDatabaseProperties , compilationUnit : SqlDelightCompilationUnit , verifyMigrations : Boolean , moduleName : String , sourceFolders : List < File >, dependencyFolders : List < File >) : SqlCoreEnvironment, SqlDelightProjectService More info Mocks an intellij environment for compiling sqldelight files without an instance of intellij running. SqlDelightException [jvm] Content class SqlDelightException ( message : String ) : IllegalStateException SqlDelightFileIndex [jvm] Content interface SqlDelightFileIndex SqldelightParser [jvm] Content open class SqldelightParser : PsiParser, LightPsiParser SqldelightParserUtil [jvm] Content object SqldelightParserUtil : GeneratedParserUtilBase SqlDelightProjectService [jvm] Content interface SqlDelightProjectService SqlDelightPropertiesFile [jvm] Content interface SqlDelightPropertiesFile : Serializable SqlDelightSourceFolder [jvm] Content interface SqlDelightSourceFolder : Serializable","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/#properties","text":"Name Summary dialectPreset [jvm] val SqlDelightDatabaseProperties . dialectPreset : DialectPreset MINIMUM_SUPPORTED_VERSION [jvm] val MINIMUM_SUPPORTED_VERSION : String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-m-i-n-i-m-u-m_-s-u-p-p-o-r-t-e-d_-v-e-r-s-i-o-n/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / MINIMUM_SUPPORTED_VERSION MINIMUM_SUPPORTED_VERSION [jvm] Content val MINIMUM_SUPPORTED_VERSION : String","title":"MINIMUM_SUPPORTED_VERSION   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-m-i-n-i-m-u-m_-s-u-p-p-o-r-t-e-d_-v-e-r-s-i-o-n/#minimum_supported_version","text":"[jvm] Content val MINIMUM_SUPPORTED_VERSION : String","title":"MINIMUM_SUPPORTED_VERSION"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/dialect-preset/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / dialectPreset dialectPreset [jvm] Content val SqlDelightDatabaseProperties . dialectPreset : DialectPreset","title":"dialectPreset   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/dialect-preset/#dialectpreset","text":"[jvm] Content val SqlDelightDatabaseProperties . dialectPreset : DialectPreset","title":"dialectPreset"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / GradleCompatibility GradleCompatibility [jvm] object GradleCompatibility Types Name Summary CompatibilityReport [jvm] Content sealed class CompatibilityReport Functions Name Summary validate [jvm] Content fun validate (propertiesFile: SqlDelightPropertiesFile ): GradleCompatibility.CompatibilityReport","title":"GradleCompatibility   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/#gradlecompatibility","text":"[jvm] object GradleCompatibility","title":"GradleCompatibility"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/#types","text":"Name Summary CompatibilityReport [jvm] Content sealed class CompatibilityReport","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/#functions","text":"Name Summary validate [jvm] Content fun validate (propertiesFile: SqlDelightPropertiesFile ): GradleCompatibility.CompatibilityReport","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/validate/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / GradleCompatibility / validate validate [jvm] Content fun validate (propertiesFile: SqlDelightPropertiesFile ): GradleCompatibility.CompatibilityReport","title":"validate   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/validate/#validate","text":"[jvm] Content fun validate (propertiesFile: SqlDelightPropertiesFile ): GradleCompatibility.CompatibilityReport","title":"validate"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/-compatibility-report/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / GradleCompatibility / CompatibilityReport CompatibilityReport [jvm] sealed class CompatibilityReport Types Name Summary Compatible [jvm] Content object Compatible : GradleCompatibility.CompatibilityReport Incompatible [jvm] Content data class Incompatible ( reason : String ) : GradleCompatibility.CompatibilityReport Inheritors Name GradleCompatibility.CompatibilityReport GradleCompatibility.CompatibilityReport","title":"CompatibilityReport   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/-compatibility-report/#compatibilityreport","text":"[jvm] sealed class CompatibilityReport","title":"CompatibilityReport"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/-compatibility-report/#types","text":"Name Summary Compatible [jvm] Content object Compatible : GradleCompatibility.CompatibilityReport Incompatible [jvm] Content data class Incompatible ( reason : String ) : GradleCompatibility.CompatibilityReport","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/-compatibility-report/#inheritors","text":"Name GradleCompatibility.CompatibilityReport GradleCompatibility.CompatibilityReport","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/-compatibility-report/-compatible/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / GradleCompatibility / CompatibilityReport / Compatible Compatible [jvm] object Compatible : GradleCompatibility.CompatibilityReport","title":"Compatible   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/-compatibility-report/-compatible/#compatible","text":"[jvm] object Compatible : GradleCompatibility.CompatibilityReport","title":"Compatible"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/-compatibility-report/-incompatible/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / GradleCompatibility / CompatibilityReport / Incompatible Incompatible [jvm] data class Incompatible ( reason : String ) : GradleCompatibility.CompatibilityReport Properties Name Summary reason [jvm] val reason : String","title":"Incompatible   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/-compatibility-report/-incompatible/#incompatible","text":"[jvm] data class Incompatible ( reason : String ) : GradleCompatibility.CompatibilityReport","title":"Incompatible"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/-compatibility-report/-incompatible/#properties","text":"Name Summary reason [jvm] val reason : String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/-compatibility-report/-incompatible/-incompatible/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / GradleCompatibility / CompatibilityReport / Incompatible / Incompatible Incompatible [jvm] Content fun Incompatible (reason: String )","title":"Incompatible   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/-compatibility-report/-incompatible/-incompatible/#incompatible","text":"[jvm] Content fun Incompatible (reason: String )","title":"Incompatible"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/-compatibility-report/-incompatible/reason/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / GradleCompatibility / CompatibilityReport / Incompatible / reason reason [jvm] Content val reason : String","title":"reason   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-gradle-compatibility/-compatibility-report/-incompatible/reason/#reason","text":"[jvm] Content val reason : String","title":"reason"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightCompilationUnit SqlDelightCompilationUnit [jvm] interface SqlDelightCompilationUnit : Serializable A compilation unit represents the group of .sq files which will be compiled all at once. A single database can have multiple compilation units, depending on which gradle task is invoked. For example, a multiplatform module has separate compilation units for ios and android. An android module has separate compilation units for different variants. Only one compilation unit will be worked on during compilation time. Properties Name Summary name [jvm] abstract val name : String outputDirectoryFile [jvm] abstract val outputDirectoryFile : File sourceFolders [jvm] abstract val sourceFolders : List < SqlDelightSourceFolder >","title":"SqlDelightCompilationUnit   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/#sqldelightcompilationunit","text":"[jvm] interface SqlDelightCompilationUnit : Serializable A compilation unit represents the group of .sq files which will be compiled all at once. A single database can have multiple compilation units, depending on which gradle task is invoked. For example, a multiplatform module has separate compilation units for ios and android. An android module has separate compilation units for different variants. Only one compilation unit will be worked on during compilation time.","title":"SqlDelightCompilationUnit"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/#properties","text":"Name Summary name [jvm] abstract val name : String outputDirectoryFile [jvm] abstract val outputDirectoryFile : File sourceFolders [jvm] abstract val sourceFolders : List < SqlDelightSourceFolder >","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightCompilationUnit / name name [jvm] Content abstract val name : String","title":"name   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/name/#name","text":"[jvm] Content abstract val name : String","title":"name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/output-directory-file/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightCompilationUnit / outputDirectoryFile outputDirectoryFile [jvm] Content abstract val outputDirectoryFile : File","title":"outputDirectoryFile   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/output-directory-file/#outputdirectoryfile","text":"[jvm] Content abstract val outputDirectoryFile : File","title":"outputDirectoryFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/source-folders/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightCompilationUnit / sourceFolders sourceFolders [jvm] Content abstract val sourceFolders : List < SqlDelightSourceFolder >","title":"sourceFolders   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/source-folders/#sourcefolders","text":"[jvm] Content abstract val sourceFolders : List < SqlDelightSourceFolder >","title":"sourceFolders"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseName SqlDelightDatabaseName [jvm] interface SqlDelightDatabaseName : Serializable Properties Name Summary className [jvm] abstract val className : String packageName [jvm] abstract val packageName : String","title":"SqlDelightDatabaseName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name/#sqldelightdatabasename","text":"[jvm] interface SqlDelightDatabaseName : Serializable","title":"SqlDelightDatabaseName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name/#properties","text":"Name Summary className [jvm] abstract val className : String packageName [jvm] abstract val packageName : String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name/class-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseName / className className [jvm] Content abstract val className : String","title":"className   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name/class-name/#classname","text":"[jvm] Content abstract val className : String","title":"className"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name/package-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseName / packageName packageName [jvm] Content abstract val packageName : String","title":"packageName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name/package-name/#packagename","text":"[jvm] Content abstract val packageName : String","title":"packageName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties SqlDelightDatabaseProperties [jvm] interface SqlDelightDatabaseProperties : Serializable Properties Name Summary className [jvm] abstract val className : String compilationUnits [jvm] abstract val compilationUnits : List < SqlDelightCompilationUnit > dependencies [jvm] abstract val dependencies : List < SqlDelightDatabaseName > deriveSchemaFromMigrations [jvm] abstract val deriveSchemaFromMigrations : Boolean dialectPresetName [jvm] abstract val dialectPresetName : String packageName [jvm] abstract val packageName : String rootDirectory [jvm] abstract val rootDirectory : File Extensions Name Summary dialectPreset [jvm] Content val SqlDelightDatabaseProperties . dialectPreset : DialectPreset","title":"SqlDelightDatabaseProperties   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/#sqldelightdatabaseproperties","text":"[jvm] interface SqlDelightDatabaseProperties : Serializable","title":"SqlDelightDatabaseProperties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/#properties","text":"Name Summary className [jvm] abstract val className : String compilationUnits [jvm] abstract val compilationUnits : List < SqlDelightCompilationUnit > dependencies [jvm] abstract val dependencies : List < SqlDelightDatabaseName > deriveSchemaFromMigrations [jvm] abstract val deriveSchemaFromMigrations : Boolean dialectPresetName [jvm] abstract val dialectPresetName : String packageName [jvm] abstract val packageName : String rootDirectory [jvm] abstract val rootDirectory : File","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/#extensions","text":"Name Summary dialectPreset [jvm] Content val SqlDelightDatabaseProperties . dialectPreset : DialectPreset","title":"Extensions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/class-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties / className className [jvm] Content abstract val className : String","title":"className   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/class-name/#classname","text":"[jvm] Content abstract val className : String","title":"className"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/compilation-units/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties / compilationUnits compilationUnits [jvm] Content abstract val compilationUnits : List < SqlDelightCompilationUnit >","title":"compilationUnits   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/compilation-units/#compilationunits","text":"[jvm] Content abstract val compilationUnits : List < SqlDelightCompilationUnit >","title":"compilationUnits"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/dependencies/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties / dependencies dependencies [jvm] Content abstract val dependencies : List < SqlDelightDatabaseName >","title":"dependencies   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/dependencies/#dependencies","text":"[jvm] Content abstract val dependencies : List < SqlDelightDatabaseName >","title":"dependencies"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/derive-schema-from-migrations/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties / deriveSchemaFromMigrations deriveSchemaFromMigrations [jvm] Content abstract val deriveSchemaFromMigrations : Boolean","title":"deriveSchemaFromMigrations   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/derive-schema-from-migrations/#deriveschemafrommigrations","text":"[jvm] Content abstract val deriveSchemaFromMigrations : Boolean","title":"deriveSchemaFromMigrations"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/dialect-preset-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties / dialectPresetName dialectPresetName [jvm] Content abstract val dialectPresetName : String","title":"dialectPresetName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/dialect-preset-name/#dialectpresetname","text":"[jvm] Content abstract val dialectPresetName : String","title":"dialectPresetName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/package-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties / packageName packageName [jvm] Content abstract val packageName : String","title":"packageName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/package-name/#packagename","text":"[jvm] Content abstract val packageName : String","title":"packageName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/root-directory/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties / rootDirectory rootDirectory [jvm] Content abstract val rootDirectory : File","title":"rootDirectory   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/root-directory/#rootdirectory","text":"[jvm] Content abstract val rootDirectory : File","title":"rootDirectory"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment SqlDelightEnvironment [jvm] class SqlDelightEnvironment ( properties : SqlDelightDatabaseProperties , compilationUnit : SqlDelightCompilationUnit , verifyMigrations : Boolean , moduleName : String , sourceFolders : List < File >, dependencyFolders : List < File >) : SqlCoreEnvironment, SqlDelightProjectService Mocks an intellij environment for compiling sqldelight files without an instance of intellij running. Constructors SqlDelightEnvironment [jvm] fun SqlDelightEnvironment (properties: SqlDelightDatabaseProperties , compilationUnit: SqlDelightCompilationUnit , verifyMigrations: Boolean , moduleName: String , sourceFolders: List < File > = compilationUnit.sourceFolders .filter { it.folder.exists() && !it.dependency } .map { it.folder }, dependencyFolders: List < File > = compilationUnit.sourceFolders .filter { it.folder.exists() && it.dependency } .map { it.folder }) Types Name Summary CompilationStatus [jvm] Content sealed class CompilationStatus Functions Name Summary annotate [jvm] Content fun annotate (annotationHolder: SqlAnnotationHolder) fileIndex [jvm] Content open override fun fileIndex (module: Module): SqlDelightFileIndex forMigrationFiles [jvm] Content fun forMigrationFiles (body: ( MigrationFile ) -> Unit ) forSourceFiles [jvm] Content open override fun forSourceFiles (action: (SqlFileBase) -> Unit ) generateSqlDelightFiles [jvm] Content fun generateSqlDelightFiles (logger: ( String ) -> Unit ): SqlDelightEnvironment.CompilationStatus More info Run the SQLDelight compiler and return the error or success status. module [jvm] Content open override fun module (vFile: VirtualFile): MockModule resetIndex [jvm] Content open override fun resetIndex (): Nothing Properties Name Summary dialectPreset [jvm] open override var dialectPreset : DialectPreset module [jvm] val module : MockModule project [jvm] val project : Project","title":"SqlDelightEnvironment   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/#sqldelightenvironment","text":"[jvm] class SqlDelightEnvironment ( properties : SqlDelightDatabaseProperties , compilationUnit : SqlDelightCompilationUnit , verifyMigrations : Boolean , moduleName : String , sourceFolders : List < File >, dependencyFolders : List < File >) : SqlCoreEnvironment, SqlDelightProjectService Mocks an intellij environment for compiling sqldelight files without an instance of intellij running.","title":"SqlDelightEnvironment"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/#constructors","text":"SqlDelightEnvironment [jvm] fun SqlDelightEnvironment (properties: SqlDelightDatabaseProperties , compilationUnit: SqlDelightCompilationUnit , verifyMigrations: Boolean , moduleName: String , sourceFolders: List < File > = compilationUnit.sourceFolders .filter { it.folder.exists() && !it.dependency } .map { it.folder }, dependencyFolders: List < File > = compilationUnit.sourceFolders .filter { it.folder.exists() && it.dependency } .map { it.folder })","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/#types","text":"Name Summary CompilationStatus [jvm] Content sealed class CompilationStatus","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/#functions","text":"Name Summary annotate [jvm] Content fun annotate (annotationHolder: SqlAnnotationHolder) fileIndex [jvm] Content open override fun fileIndex (module: Module): SqlDelightFileIndex forMigrationFiles [jvm] Content fun forMigrationFiles (body: ( MigrationFile ) -> Unit ) forSourceFiles [jvm] Content open override fun forSourceFiles (action: (SqlFileBase) -> Unit ) generateSqlDelightFiles [jvm] Content fun generateSqlDelightFiles (logger: ( String ) -> Unit ): SqlDelightEnvironment.CompilationStatus More info Run the SQLDelight compiler and return the error or success status. module [jvm] Content open override fun module (vFile: VirtualFile): MockModule resetIndex [jvm] Content open override fun resetIndex (): Nothing","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/#properties","text":"Name Summary dialectPreset [jvm] open override var dialectPreset : DialectPreset module [jvm] val module : MockModule project [jvm] val project : Project","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-sql-delight-environment/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / SqlDelightEnvironment SqlDelightEnvironment [jvm] Content fun SqlDelightEnvironment (properties: SqlDelightDatabaseProperties , compilationUnit: SqlDelightCompilationUnit , verifyMigrations: Boolean , moduleName: String , sourceFolders: List < File > = compilationUnit.sourceFolders .filter { it.folder.exists() && !it.dependency } .map { it.folder }, dependencyFolders: List < File > = compilationUnit.sourceFolders .filter { it.folder.exists() && it.dependency } .map { it.folder })","title":"SqlDelightEnvironment   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-sql-delight-environment/#sqldelightenvironment","text":"[jvm] Content fun SqlDelightEnvironment (properties: SqlDelightDatabaseProperties , compilationUnit: SqlDelightCompilationUnit , verifyMigrations: Boolean , moduleName: String , sourceFolders: List < File > = compilationUnit.sourceFolders .filter { it.folder.exists() && !it.dependency } .map { it.folder }, dependencyFolders: List < File > = compilationUnit.sourceFolders .filter { it.folder.exists() && it.dependency } .map { it.folder })","title":"SqlDelightEnvironment"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/dialect-preset/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / dialectPreset dialectPreset [jvm] Content open override var dialectPreset : DialectPreset","title":"dialectPreset   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/dialect-preset/#dialectpreset","text":"[jvm] Content open override var dialectPreset : DialectPreset","title":"dialectPreset"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/file-index/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / fileIndex fileIndex [jvm] Content open override fun fileIndex (module: Module): SqlDelightFileIndex","title":"fileIndex   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/file-index/#fileindex","text":"[jvm] Content open override fun fileIndex (module: Module): SqlDelightFileIndex","title":"fileIndex"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/for-migration-files/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / forMigrationFiles forMigrationFiles [jvm] Content fun forMigrationFiles (body: ( MigrationFile ) -> Unit )","title":"forMigrationFiles   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/for-migration-files/#formigrationfiles","text":"[jvm] Content fun forMigrationFiles (body: ( MigrationFile ) -> Unit )","title":"forMigrationFiles"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/for-source-files/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / forSourceFiles forSourceFiles [jvm] Content open override fun forSourceFiles (action: (SqlFileBase) -> Unit )","title":"forSourceFiles   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/for-source-files/#forsourcefiles","text":"[jvm] Content open override fun forSourceFiles (action: (SqlFileBase) -> Unit )","title":"forSourceFiles"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/generate-sql-delight-files/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / generateSqlDelightFiles generateSqlDelightFiles [jvm] Content fun generateSqlDelightFiles (logger: ( String ) -> Unit ): SqlDelightEnvironment.CompilationStatus More info Run the SQLDelight compiler and return the error or success status.","title":"generateSqlDelightFiles   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/generate-sql-delight-files/#generatesqldelightfiles","text":"[jvm] Content fun generateSqlDelightFiles (logger: ( String ) -> Unit ): SqlDelightEnvironment.CompilationStatus More info Run the SQLDelight compiler and return the error or success status.","title":"generateSqlDelightFiles"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/module/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / module module [jvm] Content open override fun module (vFile: VirtualFile): MockModule val module : MockModule","title":"module   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/module/#module","text":"[jvm] Content open override fun module (vFile: VirtualFile): MockModule val module : MockModule","title":"module"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/project/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / project project [jvm] Content val project : Project","title":"project   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/project/#project","text":"[jvm] Content val project : Project","title":"project"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/reset-index/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / resetIndex resetIndex [jvm] Content open override fun resetIndex (): Nothing","title":"resetIndex   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/reset-index/#resetindex","text":"[jvm] Content open override fun resetIndex (): Nothing","title":"resetIndex"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / CompilationStatus CompilationStatus [jvm] sealed class CompilationStatus Types Name Summary Failure [jvm] Content class Failure ( errors : List < String >) : SqlDelightEnvironment.CompilationStatus Success [jvm] Content class Success : SqlDelightEnvironment.CompilationStatus Inheritors Name SqlDelightEnvironment.CompilationStatus SqlDelightEnvironment.CompilationStatus","title":"CompilationStatus   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/#compilationstatus","text":"[jvm] sealed class CompilationStatus","title":"CompilationStatus"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/#types","text":"Name Summary Failure [jvm] Content class Failure ( errors : List < String >) : SqlDelightEnvironment.CompilationStatus Success [jvm] Content class Success : SqlDelightEnvironment.CompilationStatus","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/#inheritors","text":"Name SqlDelightEnvironment.CompilationStatus SqlDelightEnvironment.CompilationStatus","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-failure/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / CompilationStatus / Failure Failure [jvm] class Failure ( errors : List < String >) : SqlDelightEnvironment.CompilationStatus Properties Name Summary errors [jvm] val errors : List < String >","title":"Failure   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-failure/#failure","text":"[jvm] class Failure ( errors : List < String >) : SqlDelightEnvironment.CompilationStatus","title":"Failure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-failure/#properties","text":"Name Summary errors [jvm] val errors : List < String >","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-failure/-failure/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / CompilationStatus / Failure / Failure Failure [jvm] Content fun Failure (errors: List < String >)","title":"Failure   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-failure/-failure/#failure","text":"[jvm] Content fun Failure (errors: List < String >)","title":"Failure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-failure/errors/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / CompilationStatus / Failure / errors errors [jvm] Content val errors : List < String >","title":"errors   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-failure/errors/#errors","text":"[jvm] Content val errors : List < String >","title":"errors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-success/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / CompilationStatus / Success Success [jvm] class Success : SqlDelightEnvironment.CompilationStatus","title":"Success   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-success/#success","text":"[jvm] class Success : SqlDelightEnvironment.CompilationStatus","title":"Success"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-success/-success/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / CompilationStatus / Success / Success Success [jvm] Content fun Success ()","title":"Success   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-success/-success/#success","text":"[jvm] Content fun Success ()","title":"Success"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-exception/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightException SqlDelightException [jvm] class SqlDelightException ( message : String ) : IllegalStateException Functions Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) Properties Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"SqlDelightException   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-exception/#sqldelightexception","text":"[jvm] class SqlDelightException ( message : String ) : IllegalStateException","title":"SqlDelightException"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-exception/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-exception/-sql-delight-exception/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightException / SqlDelightException SqlDelightException [jvm] Content fun SqlDelightException (message: String )","title":"SqlDelightException   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-exception/-sql-delight-exception/#sqldelightexception","text":"[jvm] Content fun SqlDelightException (message: String )","title":"SqlDelightException"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex SqlDelightFileIndex [jvm] interface SqlDelightFileIndex Types Name Summary Companion [jvm] Content object Companion Functions Name Summary outputDirectories [jvm] Content abstract fun outputDirectories (): List < String > outputDirectory [jvm] Content abstract fun outputDirectory (file: SqlDelightFile ): List < String > packageName [jvm] Content abstract fun packageName (file: SqlDelightFile ): String sourceFolders [jvm] Content abstract fun sourceFolders (file: VirtualFile, includeDependencies: Boolean = true): Collection abstract fun sourceFolders (file: SqlDelightFile , includeDependencies: Boolean = true): Collection Properties Name Summary className [jvm] abstract val className : String contentRoot [jvm] abstract val contentRoot : VirtualFile dependencies [jvm] abstract val dependencies : List < SqlDelightDatabaseName > deriveSchemaFromMigrations [jvm] abstract val deriveSchemaFromMigrations : Boolean isConfigured [jvm] abstract val isConfigured : Boolean packageName [jvm] abstract val packageName : String","title":"SqlDelightFileIndex   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/#sqldelightfileindex","text":"[jvm] interface SqlDelightFileIndex","title":"SqlDelightFileIndex"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/#functions","text":"Name Summary outputDirectories [jvm] Content abstract fun outputDirectories (): List < String > outputDirectory [jvm] Content abstract fun outputDirectory (file: SqlDelightFile ): List < String > packageName [jvm] Content abstract fun packageName (file: SqlDelightFile ): String sourceFolders [jvm] Content abstract fun sourceFolders (file: VirtualFile, includeDependencies: Boolean = true): Collection abstract fun sourceFolders (file: SqlDelightFile , includeDependencies: Boolean = true): Collection","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/#properties","text":"Name Summary className [jvm] abstract val className : String contentRoot [jvm] abstract val contentRoot : VirtualFile dependencies [jvm] abstract val dependencies : List < SqlDelightDatabaseName > deriveSchemaFromMigrations [jvm] abstract val deriveSchemaFromMigrations : Boolean isConfigured [jvm] abstract val isConfigured : Boolean packageName [jvm] abstract val packageName : String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/class-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / className className [jvm] Content abstract val className : String More info Return The package name for the generated type which holds all the query files.","title":"className   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/class-name/#classname","text":"[jvm] Content abstract val className : String More info","title":"className"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/class-name/#return","text":"The package name for the generated type which holds all the query files.","title":"Return"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/content-root/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / contentRoot contentRoot [jvm] Content abstract val contentRoot : VirtualFile More info Return The content root for the Module backing this index.","title":"contentRoot   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/content-root/#contentroot","text":"[jvm] Content abstract val contentRoot : VirtualFile More info","title":"contentRoot"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/content-root/#return","text":"The content root for the Module backing this index.","title":"Return"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/dependencies/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / dependencies dependencies [jvm] Content abstract val dependencies : List < SqlDelightDatabaseName > More info Return The list of fully qualified classnames of databases this module depends on.","title":"dependencies   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/dependencies/#dependencies","text":"[jvm] Content abstract val dependencies : List < SqlDelightDatabaseName > More info","title":"dependencies"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/dependencies/#return","text":"The list of fully qualified classnames of databases this module depends on.","title":"Return"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/derive-schema-from-migrations/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / deriveSchemaFromMigrations deriveSchemaFromMigrations [jvm] Content abstract val deriveSchemaFromMigrations : Boolean","title":"deriveSchemaFromMigrations   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/derive-schema-from-migrations/#deriveschemafrommigrations","text":"[jvm] Content abstract val deriveSchemaFromMigrations : Boolean","title":"deriveSchemaFromMigrations"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/is-configured/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / isConfigured isConfigured [jvm] Content abstract val isConfigured : Boolean More info Return true if this index is configured to be used by SqlDelight.","title":"isConfigured   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/is-configured/#isconfigured","text":"[jvm] Content abstract val isConfigured : Boolean More info","title":"isConfigured"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/is-configured/#return","text":"true if this index is configured to be used by SqlDelight.","title":"Return"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/output-directories/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / outputDirectories outputDirectories [jvm] Content abstract fun outputDirectories (): List < String > More info Return A list of all SQLDelight output directories.","title":"outputDirectories   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/output-directories/#outputdirectories","text":"[jvm] Content abstract fun outputDirectories (): List < String > More info","title":"outputDirectories"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/output-directories/#return","text":"A list of all SQLDelight output directories.","title":"Return"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/output-directory/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / outputDirectory outputDirectory [jvm] Content abstract fun outputDirectory (file: SqlDelightFile ): List < String > More info Return A list of output directory paths generated code should be placed in, relative to contentRoot , for the given file .","title":"outputDirectory   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/output-directory/#outputdirectory","text":"[jvm] Content abstract fun outputDirectory (file: SqlDelightFile ): List < String > More info","title":"outputDirectory"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/output-directory/#return","text":"A list of output directory paths generated code should be placed in, relative to contentRoot , for the given file .","title":"Return"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/package-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / packageName packageName [jvm] Content abstract fun packageName (file: SqlDelightFile ): String More info Return The package name for a given SqlDelight file. Equal to the relative path under its fixture's sqldelight directory. [jvm] Content abstract val packageName : String More info Return The package name for the whole source set. This is equivalent to the package name found in the manifest file for the current variant.","title":"packageName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/package-name/#packagename","text":"[jvm] Content abstract fun packageName (file: SqlDelightFile ): String More info","title":"packageName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/package-name/#return","text":"The package name for a given SqlDelight file. Equal to the relative path under its fixture's sqldelight directory. [jvm] Content abstract val packageName : String More info","title":"Return"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/package-name/#return_1","text":"The package name for the whole source set. This is equivalent to the package name found in the manifest file for the current variant.","title":"Return"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/source-folders/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / sourceFolders sourceFolders [jvm] Content abstract fun sourceFolders (file: VirtualFile, includeDependencies: Boolean = true): Collection abstract fun sourceFolders (file: SqlDelightFile , includeDependencies: Boolean = true): Collection More info Return The source roots of sqldelight files for file .","title":"sourceFolders   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/source-folders/#sourcefolders","text":"[jvm] Content abstract fun sourceFolders (file: VirtualFile, includeDependencies: Boolean = true): Collection abstract fun sourceFolders (file: SqlDelightFile , includeDependencies: Boolean = true): Collection More info","title":"sourceFolders"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/source-folders/#return","text":"The source roots of sqldelight files for file .","title":"Return"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/-companion/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / Companion Companion [jvm] object Companion Functions Name Summary getInstance [jvm] Content fun getInstance (module: Module): SqlDelightFileIndex sanitizeDirectoryName [jvm] Content fun sanitizeDirectoryName (name: String ): String","title":"Companion   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/-companion/#functions","text":"Name Summary getInstance [jvm] Content fun getInstance (module: Module): SqlDelightFileIndex sanitizeDirectoryName [jvm] Content fun sanitizeDirectoryName (name: String ): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/-companion/get-instance/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / Companion / getInstance getInstance [jvm] Content fun getInstance (module: Module): SqlDelightFileIndex","title":"getInstance   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/-companion/get-instance/#getinstance","text":"[jvm] Content fun getInstance (module: Module): SqlDelightFileIndex","title":"getInstance"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/-companion/sanitize-directory-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / Companion / sanitizeDirectoryName sanitizeDirectoryName [jvm] Content fun sanitizeDirectoryName (name: String ): String","title":"sanitizeDirectoryName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/-companion/sanitize-directory-name/#sanitizedirectoryname","text":"[jvm] Content fun sanitizeDirectoryName (name: String ): String","title":"sanitizeDirectoryName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightProjectService SqlDelightProjectService [jvm] interface SqlDelightProjectService Types Name Summary Companion [jvm] Content object Companion Functions Name Summary fileIndex [jvm] Content abstract fun fileIndex (module: Module): SqlDelightFileIndex module [jvm] Content abstract fun module (vFile: VirtualFile): Module? resetIndex [jvm] Content abstract fun resetIndex () Properties Name Summary dialectPreset [jvm] abstract var dialectPreset : DialectPreset Inheritors Name SqlDelightEnvironment","title":"SqlDelightProjectService   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/#sqldelightprojectservice","text":"[jvm] interface SqlDelightProjectService","title":"SqlDelightProjectService"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/#functions","text":"Name Summary fileIndex [jvm] Content abstract fun fileIndex (module: Module): SqlDelightFileIndex module [jvm] Content abstract fun module (vFile: VirtualFile): Module? resetIndex [jvm] Content abstract fun resetIndex ()","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/#properties","text":"Name Summary dialectPreset [jvm] abstract var dialectPreset : DialectPreset","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/#inheritors","text":"Name SqlDelightEnvironment","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/dialect-preset/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightProjectService / dialectPreset dialectPreset [jvm] Content abstract var dialectPreset : DialectPreset","title":"dialectPreset   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/dialect-preset/#dialectpreset","text":"[jvm] Content abstract var dialectPreset : DialectPreset","title":"dialectPreset"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/file-index/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightProjectService / fileIndex fileIndex [jvm] Content abstract fun fileIndex (module: Module): SqlDelightFileIndex","title":"fileIndex   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/file-index/#fileindex","text":"[jvm] Content abstract fun fileIndex (module: Module): SqlDelightFileIndex","title":"fileIndex"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/module/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightProjectService / module module [jvm] Content abstract fun module (vFile: VirtualFile): Module?","title":"module   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/module/#module","text":"[jvm] Content abstract fun module (vFile: VirtualFile): Module?","title":"module"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/reset-index/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightProjectService / resetIndex resetIndex [jvm] Content abstract fun resetIndex ()","title":"resetIndex   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/reset-index/#resetindex","text":"[jvm] Content abstract fun resetIndex ()","title":"resetIndex"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/-companion/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightProjectService / Companion Companion [jvm] object Companion Functions Name Summary getInstance [jvm] Content fun getInstance (project: Project): SqlDelightProjectService","title":"Companion   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/-companion/#functions","text":"Name Summary getInstance [jvm] Content fun getInstance (project: Project): SqlDelightProjectService","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/-companion/get-instance/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightProjectService / Companion / getInstance getInstance [jvm] Content fun getInstance (project: Project): SqlDelightProjectService","title":"getInstance   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/-companion/get-instance/#getinstance","text":"[jvm] Content fun getInstance (project: Project): SqlDelightProjectService","title":"getInstance"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightPropertiesFile SqlDelightPropertiesFile [jvm] interface SqlDelightPropertiesFile : Serializable Properties Name Summary currentVersion [jvm] abstract val currentVersion : String databases [jvm] abstract val databases : List < SqlDelightDatabaseProperties > minimumSupportedVersion [jvm] abstract val minimumSupportedVersion : String","title":"SqlDelightPropertiesFile   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/#sqldelightpropertiesfile","text":"[jvm] interface SqlDelightPropertiesFile : Serializable","title":"SqlDelightPropertiesFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/#properties","text":"Name Summary currentVersion [jvm] abstract val currentVersion : String databases [jvm] abstract val databases : List < SqlDelightDatabaseProperties > minimumSupportedVersion [jvm] abstract val minimumSupportedVersion : String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/current-version/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightPropertiesFile / currentVersion currentVersion [jvm] Content abstract val currentVersion : String","title":"currentVersion   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/current-version/#currentversion","text":"[jvm] Content abstract val currentVersion : String","title":"currentVersion"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/databases/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightPropertiesFile / databases databases [jvm] Content abstract val databases : List < SqlDelightDatabaseProperties >","title":"databases   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/databases/#databases","text":"[jvm] Content abstract val databases : List < SqlDelightDatabaseProperties >","title":"databases"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/minimum-supported-version/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightPropertiesFile / minimumSupportedVersion minimumSupportedVersion [jvm] Content abstract val minimumSupportedVersion : String","title":"minimumSupportedVersion   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/minimum-supported-version/#minimumsupportedversion","text":"[jvm] Content abstract val minimumSupportedVersion : String","title":"minimumSupportedVersion"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightSourceFolder SqlDelightSourceFolder [jvm] interface SqlDelightSourceFolder : Serializable Properties Name Summary dependency [jvm] abstract val dependency : Boolean folder [jvm] abstract val folder : File","title":"SqlDelightSourceFolder   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder/#sqldelightsourcefolder","text":"[jvm] interface SqlDelightSourceFolder : Serializable","title":"SqlDelightSourceFolder"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder/#properties","text":"Name Summary dependency [jvm] abstract val dependency : Boolean folder [jvm] abstract val folder : File","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder/dependency/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightSourceFolder / dependency dependency [jvm] Content abstract val dependency : Boolean","title":"dependency   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder/dependency/#dependency","text":"[jvm] Content abstract val dependency : Boolean","title":"dependency"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder/folder/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightSourceFolder / folder folder [jvm] Content abstract val folder : File","title":"folder   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder/folder/#folder","text":"[jvm] Content abstract val folder : File","title":"folder"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser SqldelightParser [jvm] open class SqldelightParser : PsiParser, LightPsiParser Functions Name Summary annotation_real [jvm] Content open fun annotation_real (builder_: PsiBuilder, level_: Int ): Boolean annotation_value_real [jvm] Content open fun annotation_value_real (builder_: PsiBuilder, level_: Int ): Boolean column_type_real [jvm] Content open fun column_type_real (builder_: PsiBuilder, level_: Int ): Boolean import_stmt_list_real [jvm] Content open fun import_stmt_list_real (builder_: PsiBuilder, level_: Int ): Boolean import_stmt_real [jvm] Content open fun import_stmt_real (builder_: PsiBuilder, level_: Int ): Boolean insert_stmt_values_real [jvm] Content open fun insert_stmt_values_real (builder_: PsiBuilder, level_: Int ): Boolean java_type_name2_real [jvm] Content open fun java_type_name2_real (builder_: PsiBuilder, level_: Int ): Boolean java_type_name_real [jvm] Content open fun java_type_name_real (builder_: PsiBuilder, level_: Int ): Boolean java_type_real [jvm] Content open fun java_type_real (builder_: PsiBuilder, level_: Int ): Boolean overrides_real [jvm] Content open fun overrides_real (builder_: PsiBuilder, level_: Int ): Boolean parameterized_java_type_real [jvm] Content open fun parameterized_java_type_real (builder_: PsiBuilder, level_: Int ): Boolean parse [jvm] Content abstract fun parse (p: IElementType, p1: PsiBuilder): ASTNode open fun parse (root_: IElementType, builder_: PsiBuilder): ASTNode parseLight [jvm] Content abstract fun parseLight (p: IElementType, p1: PsiBuilder) open fun parseLight (root_: IElementType, builder_: PsiBuilder) stmt_clojure_real [jvm] Content open fun stmt_clojure_real (builder_: PsiBuilder, level_: Int ): Boolean stmt_clojure_stmt_list_real [jvm] Content open fun stmt_clojure_stmt_list_real (builder_: PsiBuilder, level_: Int ): Boolean stmt_identifier_clojure_real [jvm] Content open fun stmt_identifier_clojure_real (builder_: PsiBuilder, level_: Int ): Boolean stmt_identifier_real [jvm] Content open fun stmt_identifier_real (builder_: PsiBuilder, level_: Int ): Boolean stmt_list_real [jvm] Content open fun stmt_list_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"SqldelightParser   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/#sqldelightparser","text":"[jvm] open class SqldelightParser : PsiParser, LightPsiParser","title":"SqldelightParser"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/#functions","text":"Name Summary annotation_real [jvm] Content open fun annotation_real (builder_: PsiBuilder, level_: Int ): Boolean annotation_value_real [jvm] Content open fun annotation_value_real (builder_: PsiBuilder, level_: Int ): Boolean column_type_real [jvm] Content open fun column_type_real (builder_: PsiBuilder, level_: Int ): Boolean import_stmt_list_real [jvm] Content open fun import_stmt_list_real (builder_: PsiBuilder, level_: Int ): Boolean import_stmt_real [jvm] Content open fun import_stmt_real (builder_: PsiBuilder, level_: Int ): Boolean insert_stmt_values_real [jvm] Content open fun insert_stmt_values_real (builder_: PsiBuilder, level_: Int ): Boolean java_type_name2_real [jvm] Content open fun java_type_name2_real (builder_: PsiBuilder, level_: Int ): Boolean java_type_name_real [jvm] Content open fun java_type_name_real (builder_: PsiBuilder, level_: Int ): Boolean java_type_real [jvm] Content open fun java_type_real (builder_: PsiBuilder, level_: Int ): Boolean overrides_real [jvm] Content open fun overrides_real (builder_: PsiBuilder, level_: Int ): Boolean parameterized_java_type_real [jvm] Content open fun parameterized_java_type_real (builder_: PsiBuilder, level_: Int ): Boolean parse [jvm] Content abstract fun parse (p: IElementType, p1: PsiBuilder): ASTNode open fun parse (root_: IElementType, builder_: PsiBuilder): ASTNode parseLight [jvm] Content abstract fun parseLight (p: IElementType, p1: PsiBuilder) open fun parseLight (root_: IElementType, builder_: PsiBuilder) stmt_clojure_real [jvm] Content open fun stmt_clojure_real (builder_: PsiBuilder, level_: Int ): Boolean stmt_clojure_stmt_list_real [jvm] Content open fun stmt_clojure_stmt_list_real (builder_: PsiBuilder, level_: Int ): Boolean stmt_identifier_clojure_real [jvm] Content open fun stmt_identifier_clojure_real (builder_: PsiBuilder, level_: Int ): Boolean stmt_identifier_real [jvm] Content open fun stmt_identifier_real (builder_: PsiBuilder, level_: Int ): Boolean stmt_list_real [jvm] Content open fun stmt_list_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/annotation_real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / annotation_real annotation_real [jvm] Content open fun annotation_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"annotation_real   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/annotation_real/#annotation_real","text":"[jvm] Content open fun annotation_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"annotation_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/annotation_value_real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / annotation_value_real annotation_value_real [jvm] Content open fun annotation_value_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"annotation_value_real   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/annotation_value_real/#annotation_value_real","text":"[jvm] Content open fun annotation_value_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"annotation_value_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/column_type_real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / column_type_real column_type_real [jvm] Content open fun column_type_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"column_type_real   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/column_type_real/#column_type_real","text":"[jvm] Content open fun column_type_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"column_type_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/import_stmt_list_real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / import_stmt_list_real import_stmt_list_real [jvm] Content open fun import_stmt_list_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"import_stmt_list_real   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/import_stmt_list_real/#import_stmt_list_real","text":"[jvm] Content open fun import_stmt_list_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"import_stmt_list_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/import_stmt_real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / import_stmt_real import_stmt_real [jvm] Content open fun import_stmt_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"import_stmt_real   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/import_stmt_real/#import_stmt_real","text":"[jvm] Content open fun import_stmt_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"import_stmt_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/insert_stmt_values_real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / insert_stmt_values_real insert_stmt_values_real [jvm] Content open fun insert_stmt_values_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"insert_stmt_values_real   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/insert_stmt_values_real/#insert_stmt_values_real","text":"[jvm] Content open fun insert_stmt_values_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"insert_stmt_values_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/java_type_name2_real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / java_type_name2_real java_type_name2_real [jvm] Content open fun java_type_name2_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"java_type_name2_real   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/java_type_name2_real/#java_type_name2_real","text":"[jvm] Content open fun java_type_name2_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"java_type_name2_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/java_type_name_real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / java_type_name_real java_type_name_real [jvm] Content open fun java_type_name_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"java_type_name_real   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/java_type_name_real/#java_type_name_real","text":"[jvm] Content open fun java_type_name_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"java_type_name_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/java_type_real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / java_type_real java_type_real [jvm] Content open fun java_type_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"java_type_real   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/java_type_real/#java_type_real","text":"[jvm] Content open fun java_type_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"java_type_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/overrides_real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / overrides_real overrides_real [jvm] Content open fun overrides_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"overrides_real   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/overrides_real/#overrides_real","text":"[jvm] Content open fun overrides_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"overrides_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/parameterized_java_type_real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / parameterized_java_type_real parameterized_java_type_real [jvm] Content open fun parameterized_java_type_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"parameterized_java_type_real   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/parameterized_java_type_real/#parameterized_java_type_real","text":"[jvm] Content open fun parameterized_java_type_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"parameterized_java_type_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/parse-light/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / parseLight parseLight [jvm] Content open fun parseLight (root_: IElementType, builder_: PsiBuilder)","title":"parseLight   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/parse-light/#parselight","text":"[jvm] Content open fun parseLight (root_: IElementType, builder_: PsiBuilder)","title":"parseLight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/parse/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / parse parse [jvm] Content open fun parse (root_: IElementType, builder_: PsiBuilder): ASTNode","title":"parse   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/parse/#parse","text":"[jvm] Content open fun parse (root_: IElementType, builder_: PsiBuilder): ASTNode","title":"parse"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_clojure_real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / stmt_clojure_real stmt_clojure_real [jvm] Content open fun stmt_clojure_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"stmt_clojure_real   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_clojure_real/#stmt_clojure_real","text":"[jvm] Content open fun stmt_clojure_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"stmt_clojure_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_clojure_stmt_list_real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / stmt_clojure_stmt_list_real stmt_clojure_stmt_list_real [jvm] Content open fun stmt_clojure_stmt_list_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"stmt_clojure_stmt_list_real   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_clojure_stmt_list_real/#stmt_clojure_stmt_list_real","text":"[jvm] Content open fun stmt_clojure_stmt_list_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"stmt_clojure_stmt_list_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_identifier_clojure_real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / stmt_identifier_clojure_real stmt_identifier_clojure_real [jvm] Content open fun stmt_identifier_clojure_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"stmt_identifier_clojure_real   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_identifier_clojure_real/#stmt_identifier_clojure_real","text":"[jvm] Content open fun stmt_identifier_clojure_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"stmt_identifier_clojure_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_identifier_real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / stmt_identifier_real stmt_identifier_real [jvm] Content open fun stmt_identifier_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"stmt_identifier_real   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_identifier_real/#stmt_identifier_real","text":"[jvm] Content open fun stmt_identifier_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"stmt_identifier_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_list_real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / stmt_list_real stmt_list_real [jvm] Content open fun stmt_list_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"stmt_list_real   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_list_real/#stmt_list_real","text":"[jvm] Content open fun stmt_list_real (builder_: PsiBuilder, level_: Int ): Boolean","title":"stmt_list_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil SqldelightParserUtil [jvm] object SqldelightParserUtil : GeneratedParserUtilBase Functions Name Summary annotationExt [jvm] Content @ JvmStatic () fun annotationExt (builder: PsiBuilder, level: Int , annotation: GeneratedParserUtilBase.Parser): Boolean annotationValueExt [jvm] Content @ JvmStatic () fun annotationValueExt (builder: PsiBuilder, level: Int , annotation_value: GeneratedParserUtilBase.Parser): Boolean columnTypeExt [jvm] Content @ JvmStatic () fun columnTypeExt (builder: PsiBuilder, level: Int , column_type: GeneratedParserUtilBase.Parser): Boolean importStmtExt [jvm] Content @ JvmStatic () fun importStmtExt (builder: PsiBuilder, level: Int , import_stmt: GeneratedParserUtilBase.Parser): Boolean importStmtListExt [jvm] Content @ JvmStatic () fun importStmtListExt (builder: PsiBuilder, level: Int , import_stmt_list: GeneratedParserUtilBase.Parser): Boolean insertStmtValuesExt [jvm] Content @ JvmStatic () fun insertStmtValuesExt (builder: PsiBuilder, level: Int , insert_stmt_values: GeneratedParserUtilBase.Parser): Boolean javaTypeExt [jvm] Content @ JvmStatic () fun javaTypeExt (builder: PsiBuilder, level: Int , java_type: GeneratedParserUtilBase.Parser): Boolean javaTypeName2Ext [jvm] Content @ JvmStatic () fun javaTypeName2Ext (builder: PsiBuilder, level: Int , java_type_name2: GeneratedParserUtilBase.Parser): Boolean javaTypeNameExt [jvm] Content @ JvmStatic () fun javaTypeNameExt (builder: PsiBuilder, level: Int , java_type_name: GeneratedParserUtilBase.Parser): Boolean overridesExt [jvm] Content @ JvmStatic () fun overridesExt (builder: PsiBuilder, level: Int , overrides: GeneratedParserUtilBase.Parser): Boolean overrideSqlParser [jvm] Content fun overrideSqlParser () parameterizedJavaTypeExt [jvm] Content @ JvmStatic () fun parameterizedJavaTypeExt (builder: PsiBuilder, level: Int , parameterized_java_type: GeneratedParserUtilBase.Parser): Boolean reset [jvm] Content fun reset () stmtClojureExt [jvm] Content @ JvmStatic () fun stmtClojureExt (builder: PsiBuilder, level: Int , stmt_clojure: GeneratedParserUtilBase.Parser): Boolean stmtClojureStmtListExt [jvm] Content @ JvmStatic () fun stmtClojureStmtListExt (builder: PsiBuilder, level: Int , stmt_clojure_stmt_list: GeneratedParserUtilBase.Parser): Boolean stmtIdentifierClojureExt [jvm] Content @ JvmStatic () fun stmtIdentifierClojureExt (builder: PsiBuilder, level: Int , stmt_identifier_clojure: GeneratedParserUtilBase.Parser): Boolean stmtIdentifierExt [jvm] Content @ JvmStatic () fun stmtIdentifierExt (builder: PsiBuilder, level: Int , stmt_identifier: GeneratedParserUtilBase.Parser): Boolean stmtListExt [jvm] Content @ JvmStatic () fun stmtListExt (builder: PsiBuilder, level: Int , stmt_list: GeneratedParserUtilBase.Parser): Boolean Properties Name Summary annotation [jvm] var annotation : GeneratedParserUtilBase.Parser? = null annotation_value [jvm] var annotation_value : GeneratedParserUtilBase.Parser? = null column_type [jvm] var column_type : GeneratedParserUtilBase.Parser? = null createElement [jvm] var createElement : (ASTNode) -> PsiElement import_stmt [jvm] var import_stmt : GeneratedParserUtilBase.Parser? = null import_stmt_list [jvm] var import_stmt_list : GeneratedParserUtilBase.Parser? = null insert_stmt_values [jvm] var insert_stmt_values : GeneratedParserUtilBase.Parser? = null java_type [jvm] var java_type : GeneratedParserUtilBase.Parser? = null java_type_name [jvm] var java_type_name : GeneratedParserUtilBase.Parser? = null java_type_name2 [jvm] var java_type_name2 : GeneratedParserUtilBase.Parser? = null overrides [jvm] var overrides : GeneratedParserUtilBase.Parser? = null parameterized_java_type [jvm] var parameterized_java_type : GeneratedParserUtilBase.Parser? = null stmt_clojure [jvm] var stmt_clojure : GeneratedParserUtilBase.Parser? = null stmt_clojure_stmt_list [jvm] var stmt_clojure_stmt_list : GeneratedParserUtilBase.Parser? = null stmt_identifier [jvm] var stmt_identifier : GeneratedParserUtilBase.Parser? = null stmt_identifier_clojure [jvm] var stmt_identifier_clojure : GeneratedParserUtilBase.Parser? = null stmt_list [jvm] var stmt_list : GeneratedParserUtilBase.Parser? = null","title":"SqldelightParserUtil   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/#sqldelightparserutil","text":"[jvm] object SqldelightParserUtil : GeneratedParserUtilBase","title":"SqldelightParserUtil"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/#functions","text":"Name Summary annotationExt [jvm] Content @ JvmStatic () fun annotationExt (builder: PsiBuilder, level: Int , annotation: GeneratedParserUtilBase.Parser): Boolean annotationValueExt [jvm] Content @ JvmStatic () fun annotationValueExt (builder: PsiBuilder, level: Int , annotation_value: GeneratedParserUtilBase.Parser): Boolean columnTypeExt [jvm] Content @ JvmStatic () fun columnTypeExt (builder: PsiBuilder, level: Int , column_type: GeneratedParserUtilBase.Parser): Boolean importStmtExt [jvm] Content @ JvmStatic () fun importStmtExt (builder: PsiBuilder, level: Int , import_stmt: GeneratedParserUtilBase.Parser): Boolean importStmtListExt [jvm] Content @ JvmStatic () fun importStmtListExt (builder: PsiBuilder, level: Int , import_stmt_list: GeneratedParserUtilBase.Parser): Boolean insertStmtValuesExt [jvm] Content @ JvmStatic () fun insertStmtValuesExt (builder: PsiBuilder, level: Int , insert_stmt_values: GeneratedParserUtilBase.Parser): Boolean javaTypeExt [jvm] Content @ JvmStatic () fun javaTypeExt (builder: PsiBuilder, level: Int , java_type: GeneratedParserUtilBase.Parser): Boolean javaTypeName2Ext [jvm] Content @ JvmStatic () fun javaTypeName2Ext (builder: PsiBuilder, level: Int , java_type_name2: GeneratedParserUtilBase.Parser): Boolean javaTypeNameExt [jvm] Content @ JvmStatic () fun javaTypeNameExt (builder: PsiBuilder, level: Int , java_type_name: GeneratedParserUtilBase.Parser): Boolean overridesExt [jvm] Content @ JvmStatic () fun overridesExt (builder: PsiBuilder, level: Int , overrides: GeneratedParserUtilBase.Parser): Boolean overrideSqlParser [jvm] Content fun overrideSqlParser () parameterizedJavaTypeExt [jvm] Content @ JvmStatic () fun parameterizedJavaTypeExt (builder: PsiBuilder, level: Int , parameterized_java_type: GeneratedParserUtilBase.Parser): Boolean reset [jvm] Content fun reset () stmtClojureExt [jvm] Content @ JvmStatic () fun stmtClojureExt (builder: PsiBuilder, level: Int , stmt_clojure: GeneratedParserUtilBase.Parser): Boolean stmtClojureStmtListExt [jvm] Content @ JvmStatic () fun stmtClojureStmtListExt (builder: PsiBuilder, level: Int , stmt_clojure_stmt_list: GeneratedParserUtilBase.Parser): Boolean stmtIdentifierClojureExt [jvm] Content @ JvmStatic () fun stmtIdentifierClojureExt (builder: PsiBuilder, level: Int , stmt_identifier_clojure: GeneratedParserUtilBase.Parser): Boolean stmtIdentifierExt [jvm] Content @ JvmStatic () fun stmtIdentifierExt (builder: PsiBuilder, level: Int , stmt_identifier: GeneratedParserUtilBase.Parser): Boolean stmtListExt [jvm] Content @ JvmStatic () fun stmtListExt (builder: PsiBuilder, level: Int , stmt_list: GeneratedParserUtilBase.Parser): Boolean","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/#properties","text":"Name Summary annotation [jvm] var annotation : GeneratedParserUtilBase.Parser? = null annotation_value [jvm] var annotation_value : GeneratedParserUtilBase.Parser? = null column_type [jvm] var column_type : GeneratedParserUtilBase.Parser? = null createElement [jvm] var createElement : (ASTNode) -> PsiElement import_stmt [jvm] var import_stmt : GeneratedParserUtilBase.Parser? = null import_stmt_list [jvm] var import_stmt_list : GeneratedParserUtilBase.Parser? = null insert_stmt_values [jvm] var insert_stmt_values : GeneratedParserUtilBase.Parser? = null java_type [jvm] var java_type : GeneratedParserUtilBase.Parser? = null java_type_name [jvm] var java_type_name : GeneratedParserUtilBase.Parser? = null java_type_name2 [jvm] var java_type_name2 : GeneratedParserUtilBase.Parser? = null overrides [jvm] var overrides : GeneratedParserUtilBase.Parser? = null parameterized_java_type [jvm] var parameterized_java_type : GeneratedParserUtilBase.Parser? = null stmt_clojure [jvm] var stmt_clojure : GeneratedParserUtilBase.Parser? = null stmt_clojure_stmt_list [jvm] var stmt_clojure_stmt_list : GeneratedParserUtilBase.Parser? = null stmt_identifier [jvm] var stmt_identifier : GeneratedParserUtilBase.Parser? = null stmt_identifier_clojure [jvm] var stmt_identifier_clojure : GeneratedParserUtilBase.Parser? = null stmt_list [jvm] var stmt_list : GeneratedParserUtilBase.Parser? = null","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/annotation-ext/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / annotationExt annotationExt [jvm] Content @ JvmStatic () fun annotationExt (builder: PsiBuilder, level: Int , annotation: GeneratedParserUtilBase.Parser): Boolean","title":"annotationExt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/annotation-ext/#annotationext","text":"[jvm] Content @ JvmStatic () fun annotationExt (builder: PsiBuilder, level: Int , annotation: GeneratedParserUtilBase.Parser): Boolean","title":"annotationExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/annotation-value-ext/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / annotationValueExt annotationValueExt [jvm] Content @ JvmStatic () fun annotationValueExt (builder: PsiBuilder, level: Int , annotation_value: GeneratedParserUtilBase.Parser): Boolean","title":"annotationValueExt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/annotation-value-ext/#annotationvalueext","text":"[jvm] Content @ JvmStatic () fun annotationValueExt (builder: PsiBuilder, level: Int , annotation_value: GeneratedParserUtilBase.Parser): Boolean","title":"annotationValueExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/annotation/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / annotation annotation [jvm] Content var annotation : GeneratedParserUtilBase.Parser? = null","title":"annotation   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/annotation/#annotation","text":"[jvm] Content var annotation : GeneratedParserUtilBase.Parser? = null","title":"annotation"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/annotation_value/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / annotation_value annotation_value [jvm] Content var annotation_value : GeneratedParserUtilBase.Parser? = null","title":"annotation_value   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/annotation_value/#annotation_value","text":"[jvm] Content var annotation_value : GeneratedParserUtilBase.Parser? = null","title":"annotation_value"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/column-type-ext/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / columnTypeExt columnTypeExt [jvm] Content @ JvmStatic () fun columnTypeExt (builder: PsiBuilder, level: Int , column_type: GeneratedParserUtilBase.Parser): Boolean","title":"columnTypeExt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/column-type-ext/#columntypeext","text":"[jvm] Content @ JvmStatic () fun columnTypeExt (builder: PsiBuilder, level: Int , column_type: GeneratedParserUtilBase.Parser): Boolean","title":"columnTypeExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/column_type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / column_type column_type [jvm] Content var column_type : GeneratedParserUtilBase.Parser? = null","title":"column_type   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/column_type/#column_type","text":"[jvm] Content var column_type : GeneratedParserUtilBase.Parser? = null","title":"column_type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/create-element/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / createElement createElement [jvm] Content var createElement : (ASTNode) -> PsiElement","title":"createElement   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/create-element/#createelement","text":"[jvm] Content var createElement : (ASTNode) -> PsiElement","title":"createElement"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/import-stmt-ext/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / importStmtExt importStmtExt [jvm] Content @ JvmStatic () fun importStmtExt (builder: PsiBuilder, level: Int , import_stmt: GeneratedParserUtilBase.Parser): Boolean","title":"importStmtExt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/import-stmt-ext/#importstmtext","text":"[jvm] Content @ JvmStatic () fun importStmtExt (builder: PsiBuilder, level: Int , import_stmt: GeneratedParserUtilBase.Parser): Boolean","title":"importStmtExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/import-stmt-list-ext/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / importStmtListExt importStmtListExt [jvm] Content @ JvmStatic () fun importStmtListExt (builder: PsiBuilder, level: Int , import_stmt_list: GeneratedParserUtilBase.Parser): Boolean","title":"importStmtListExt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/import-stmt-list-ext/#importstmtlistext","text":"[jvm] Content @ JvmStatic () fun importStmtListExt (builder: PsiBuilder, level: Int , import_stmt_list: GeneratedParserUtilBase.Parser): Boolean","title":"importStmtListExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/import_stmt/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / import_stmt import_stmt [jvm] Content var import_stmt : GeneratedParserUtilBase.Parser? = null","title":"import_stmt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/import_stmt/#import_stmt","text":"[jvm] Content var import_stmt : GeneratedParserUtilBase.Parser? = null","title":"import_stmt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/import_stmt_list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / import_stmt_list import_stmt_list [jvm] Content var import_stmt_list : GeneratedParserUtilBase.Parser? = null","title":"import_stmt_list   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/import_stmt_list/#import_stmt_list","text":"[jvm] Content var import_stmt_list : GeneratedParserUtilBase.Parser? = null","title":"import_stmt_list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/insert-stmt-values-ext/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / insertStmtValuesExt insertStmtValuesExt [jvm] Content @ JvmStatic () fun insertStmtValuesExt (builder: PsiBuilder, level: Int , insert_stmt_values: GeneratedParserUtilBase.Parser): Boolean","title":"insertStmtValuesExt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/insert-stmt-values-ext/#insertstmtvaluesext","text":"[jvm] Content @ JvmStatic () fun insertStmtValuesExt (builder: PsiBuilder, level: Int , insert_stmt_values: GeneratedParserUtilBase.Parser): Boolean","title":"insertStmtValuesExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/insert_stmt_values/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / insert_stmt_values insert_stmt_values [jvm] Content var insert_stmt_values : GeneratedParserUtilBase.Parser? = null","title":"insert_stmt_values   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/insert_stmt_values/#insert_stmt_values","text":"[jvm] Content var insert_stmt_values : GeneratedParserUtilBase.Parser? = null","title":"insert_stmt_values"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java-type-ext/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / javaTypeExt javaTypeExt [jvm] Content @ JvmStatic () fun javaTypeExt (builder: PsiBuilder, level: Int , java_type: GeneratedParserUtilBase.Parser): Boolean","title":"javaTypeExt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java-type-ext/#javatypeext","text":"[jvm] Content @ JvmStatic () fun javaTypeExt (builder: PsiBuilder, level: Int , java_type: GeneratedParserUtilBase.Parser): Boolean","title":"javaTypeExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java-type-name-ext/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / javaTypeNameExt javaTypeNameExt [jvm] Content @ JvmStatic () fun javaTypeNameExt (builder: PsiBuilder, level: Int , java_type_name: GeneratedParserUtilBase.Parser): Boolean","title":"javaTypeNameExt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java-type-name-ext/#javatypenameext","text":"[jvm] Content @ JvmStatic () fun javaTypeNameExt (builder: PsiBuilder, level: Int , java_type_name: GeneratedParserUtilBase.Parser): Boolean","title":"javaTypeNameExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java-type-name2-ext/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / javaTypeName2Ext javaTypeName2Ext [jvm] Content @ JvmStatic () fun javaTypeName2Ext (builder: PsiBuilder, level: Int , java_type_name2: GeneratedParserUtilBase.Parser): Boolean","title":"javaTypeName2Ext   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java-type-name2-ext/#javatypename2ext","text":"[jvm] Content @ JvmStatic () fun javaTypeName2Ext (builder: PsiBuilder, level: Int , java_type_name2: GeneratedParserUtilBase.Parser): Boolean","title":"javaTypeName2Ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java_type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / java_type java_type [jvm] Content var java_type : GeneratedParserUtilBase.Parser? = null","title":"java_type   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java_type/#java_type","text":"[jvm] Content var java_type : GeneratedParserUtilBase.Parser? = null","title":"java_type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java_type_name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / java_type_name java_type_name [jvm] Content var java_type_name : GeneratedParserUtilBase.Parser? = null","title":"java_type_name   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java_type_name/#java_type_name","text":"[jvm] Content var java_type_name : GeneratedParserUtilBase.Parser? = null","title":"java_type_name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java_type_name2/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / java_type_name2 java_type_name2 [jvm] Content var java_type_name2 : GeneratedParserUtilBase.Parser? = null","title":"java_type_name2   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java_type_name2/#java_type_name2","text":"[jvm] Content var java_type_name2 : GeneratedParserUtilBase.Parser? = null","title":"java_type_name2"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/override-sql-parser/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / overrideSqlParser overrideSqlParser [jvm] Content fun overrideSqlParser ()","title":"overrideSqlParser   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/override-sql-parser/#overridesqlparser","text":"[jvm] Content fun overrideSqlParser ()","title":"overrideSqlParser"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/overrides-ext/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / overridesExt overridesExt [jvm] Content @ JvmStatic () fun overridesExt (builder: PsiBuilder, level: Int , overrides: GeneratedParserUtilBase.Parser): Boolean","title":"overridesExt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/overrides-ext/#overridesext","text":"[jvm] Content @ JvmStatic () fun overridesExt (builder: PsiBuilder, level: Int , overrides: GeneratedParserUtilBase.Parser): Boolean","title":"overridesExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/overrides/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / overrides overrides [jvm] Content var overrides : GeneratedParserUtilBase.Parser? = null","title":"overrides   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/overrides/#overrides","text":"[jvm] Content var overrides : GeneratedParserUtilBase.Parser? = null","title":"overrides"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/parameterized-java-type-ext/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / parameterizedJavaTypeExt parameterizedJavaTypeExt [jvm] Content @ JvmStatic () fun parameterizedJavaTypeExt (builder: PsiBuilder, level: Int , parameterized_java_type: GeneratedParserUtilBase.Parser): Boolean","title":"parameterizedJavaTypeExt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/parameterized-java-type-ext/#parameterizedjavatypeext","text":"[jvm] Content @ JvmStatic () fun parameterizedJavaTypeExt (builder: PsiBuilder, level: Int , parameterized_java_type: GeneratedParserUtilBase.Parser): Boolean","title":"parameterizedJavaTypeExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/parameterized_java_type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / parameterized_java_type parameterized_java_type [jvm] Content var parameterized_java_type : GeneratedParserUtilBase.Parser? = null","title":"parameterized_java_type   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/parameterized_java_type/#parameterized_java_type","text":"[jvm] Content var parameterized_java_type : GeneratedParserUtilBase.Parser? = null","title":"parameterized_java_type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/reset/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / reset reset [jvm] Content fun reset ()","title":"reset   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/reset/#reset","text":"[jvm] Content fun reset ()","title":"reset"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-clojure-ext/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmtClojureExt stmtClojureExt [jvm] Content @ JvmStatic () fun stmtClojureExt (builder: PsiBuilder, level: Int , stmt_clojure: GeneratedParserUtilBase.Parser): Boolean","title":"stmtClojureExt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-clojure-ext/#stmtclojureext","text":"[jvm] Content @ JvmStatic () fun stmtClojureExt (builder: PsiBuilder, level: Int , stmt_clojure: GeneratedParserUtilBase.Parser): Boolean","title":"stmtClojureExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-clojure-stmt-list-ext/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmtClojureStmtListExt stmtClojureStmtListExt [jvm] Content @ JvmStatic () fun stmtClojureStmtListExt (builder: PsiBuilder, level: Int , stmt_clojure_stmt_list: GeneratedParserUtilBase.Parser): Boolean","title":"stmtClojureStmtListExt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-clojure-stmt-list-ext/#stmtclojurestmtlistext","text":"[jvm] Content @ JvmStatic () fun stmtClojureStmtListExt (builder: PsiBuilder, level: Int , stmt_clojure_stmt_list: GeneratedParserUtilBase.Parser): Boolean","title":"stmtClojureStmtListExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-identifier-clojure-ext/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmtIdentifierClojureExt stmtIdentifierClojureExt [jvm] Content @ JvmStatic () fun stmtIdentifierClojureExt (builder: PsiBuilder, level: Int , stmt_identifier_clojure: GeneratedParserUtilBase.Parser): Boolean","title":"stmtIdentifierClojureExt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-identifier-clojure-ext/#stmtidentifierclojureext","text":"[jvm] Content @ JvmStatic () fun stmtIdentifierClojureExt (builder: PsiBuilder, level: Int , stmt_identifier_clojure: GeneratedParserUtilBase.Parser): Boolean","title":"stmtIdentifierClojureExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-identifier-ext/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmtIdentifierExt stmtIdentifierExt [jvm] Content @ JvmStatic () fun stmtIdentifierExt (builder: PsiBuilder, level: Int , stmt_identifier: GeneratedParserUtilBase.Parser): Boolean","title":"stmtIdentifierExt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-identifier-ext/#stmtidentifierext","text":"[jvm] Content @ JvmStatic () fun stmtIdentifierExt (builder: PsiBuilder, level: Int , stmt_identifier: GeneratedParserUtilBase.Parser): Boolean","title":"stmtIdentifierExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-list-ext/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmtListExt stmtListExt [jvm] Content @ JvmStatic () fun stmtListExt (builder: PsiBuilder, level: Int , stmt_list: GeneratedParserUtilBase.Parser): Boolean","title":"stmtListExt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-list-ext/#stmtlistext","text":"[jvm] Content @ JvmStatic () fun stmtListExt (builder: PsiBuilder, level: Int , stmt_list: GeneratedParserUtilBase.Parser): Boolean","title":"stmtListExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_clojure/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmt_clojure stmt_clojure [jvm] Content var stmt_clojure : GeneratedParserUtilBase.Parser? = null","title":"stmt_clojure   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_clojure/#stmt_clojure","text":"[jvm] Content var stmt_clojure : GeneratedParserUtilBase.Parser? = null","title":"stmt_clojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_clojure_stmt_list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmt_clojure_stmt_list stmt_clojure_stmt_list [jvm] Content var stmt_clojure_stmt_list : GeneratedParserUtilBase.Parser? = null","title":"stmt_clojure_stmt_list   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_clojure_stmt_list/#stmt_clojure_stmt_list","text":"[jvm] Content var stmt_clojure_stmt_list : GeneratedParserUtilBase.Parser? = null","title":"stmt_clojure_stmt_list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_identifier/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmt_identifier stmt_identifier [jvm] Content var stmt_identifier : GeneratedParserUtilBase.Parser? = null","title":"stmt_identifier   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_identifier/#stmt_identifier","text":"[jvm] Content var stmt_identifier : GeneratedParserUtilBase.Parser? = null","title":"stmt_identifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_identifier_clojure/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmt_identifier_clojure stmt_identifier_clojure [jvm] Content var stmt_identifier_clojure : GeneratedParserUtilBase.Parser? = null","title":"stmt_identifier_clojure   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_identifier_clojure/#stmt_identifier_clojure","text":"[jvm] Content var stmt_identifier_clojure : GeneratedParserUtilBase.Parser? = null","title":"stmt_identifier_clojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmt_list stmt_list [jvm] Content var stmt_list : GeneratedParserUtilBase.Parser? = null","title":"stmt_list   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_list/#stmt_list","text":"[jvm] Content var stmt_list : GeneratedParserUtilBase.Parser? = null","title":"stmt_list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler Package com.squareup.sqldelight.core.compiler Types Name Summary ExecuteQueryGenerator [jvm] Content open class ExecuteQueryGenerator ( query : NamedExecute ) : QueryGenerator MutatorQueryGenerator [jvm] Content class MutatorQueryGenerator ( query : NamedMutator ) : ExecuteQueryGenerator QueriesTypeGenerator [jvm] Content class QueriesTypeGenerator ( module : Module, file : SqlDelightQueriesFile ) QueryGenerator [jvm] Content abstract class QueryGenerator ( query : BindableQuery ) QueryInterfaceGenerator [jvm] Content class QueryInterfaceGenerator ( query : NamedQuery ) SelectQueryGenerator [jvm] Content class SelectQueryGenerator ( query : NamedQuery ) : QueryGenerator SqlDelightCompiler [jvm] Content object SqlDelightCompiler","title":"Package com.squareup.sqldelight.core.compiler   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/#package-comsquareupsqldelightcorecompiler","text":"","title":"Package com.squareup.sqldelight.core.compiler"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/#types","text":"Name Summary ExecuteQueryGenerator [jvm] Content open class ExecuteQueryGenerator ( query : NamedExecute ) : QueryGenerator MutatorQueryGenerator [jvm] Content class MutatorQueryGenerator ( query : NamedMutator ) : ExecuteQueryGenerator QueriesTypeGenerator [jvm] Content class QueriesTypeGenerator ( module : Module, file : SqlDelightQueriesFile ) QueryGenerator [jvm] Content abstract class QueryGenerator ( query : BindableQuery ) QueryInterfaceGenerator [jvm] Content class QueryInterfaceGenerator ( query : NamedQuery ) SelectQueryGenerator [jvm] Content class SelectQueryGenerator ( query : NamedQuery ) : QueryGenerator SqlDelightCompiler [jvm] Content object SqlDelightCompiler","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / ExecuteQueryGenerator ExecuteQueryGenerator [jvm] open class ExecuteQueryGenerator ( query : NamedExecute ) : QueryGenerator Functions Name Summary function [jvm] Content fun function (): FunSpec More info The public api to execute query interfaceFunction [jvm] Content fun interfaceFunction (): FunSpec.Builder value [jvm] Content fun value (): PropertySpec Inheritors Name MutatorQueryGenerator","title":"ExecuteQueryGenerator   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/#executequerygenerator","text":"[jvm] open class ExecuteQueryGenerator ( query : NamedExecute ) : QueryGenerator","title":"ExecuteQueryGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/#functions","text":"Name Summary function [jvm] Content fun function (): FunSpec More info The public api to execute query interfaceFunction [jvm] Content fun interfaceFunction (): FunSpec.Builder value [jvm] Content fun value (): PropertySpec","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/#inheritors","text":"Name MutatorQueryGenerator","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/-execute-query-generator/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / ExecuteQueryGenerator / ExecuteQueryGenerator ExecuteQueryGenerator [jvm] Content fun ExecuteQueryGenerator (query: NamedExecute )","title":"ExecuteQueryGenerator   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/-execute-query-generator/#executequerygenerator","text":"[jvm] Content fun ExecuteQueryGenerator (query: NamedExecute )","title":"ExecuteQueryGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/function/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / ExecuteQueryGenerator / function function [jvm] Content fun function (): FunSpec More info The public api to execute query","title":"function   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/function/#function","text":"[jvm] Content fun function (): FunSpec More info The public api to execute query","title":"function"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/interface-function/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / ExecuteQueryGenerator / interfaceFunction interfaceFunction [jvm] Content fun interfaceFunction (): FunSpec.Builder","title":"interfaceFunction   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/interface-function/#interfacefunction","text":"[jvm] Content fun interfaceFunction (): FunSpec.Builder","title":"interfaceFunction"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/value/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / ExecuteQueryGenerator / value value [jvm] Content fun value (): PropertySpec","title":"value   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/value/#value","text":"[jvm] Content fun value (): PropertySpec","title":"value"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-mutator-query-generator/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / MutatorQueryGenerator MutatorQueryGenerator [jvm] class MutatorQueryGenerator ( query : NamedMutator ) : ExecuteQueryGenerator Functions Name Summary function [jvm] Content fun function (): FunSpec More info The public api to execute query interfaceFunction [jvm] Content fun interfaceFunction (): FunSpec.Builder value [jvm] Content fun value (): PropertySpec","title":"MutatorQueryGenerator   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-mutator-query-generator/#mutatorquerygenerator","text":"[jvm] class MutatorQueryGenerator ( query : NamedMutator ) : ExecuteQueryGenerator","title":"MutatorQueryGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-mutator-query-generator/#functions","text":"Name Summary function [jvm] Content fun function (): FunSpec More info The public api to execute query interfaceFunction [jvm] Content fun interfaceFunction (): FunSpec.Builder value [jvm] Content fun value (): PropertySpec","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-mutator-query-generator/-mutator-query-generator/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / MutatorQueryGenerator / MutatorQueryGenerator MutatorQueryGenerator [jvm] Content fun MutatorQueryGenerator (query: NamedMutator )","title":"MutatorQueryGenerator   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-mutator-query-generator/-mutator-query-generator/#mutatorquerygenerator","text":"[jvm] Content fun MutatorQueryGenerator (query: NamedMutator )","title":"MutatorQueryGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueriesTypeGenerator QueriesTypeGenerator [jvm] class QueriesTypeGenerator ( module : Module, file : SqlDelightQueriesFile ) Functions Name Summary generateType [jvm] Content fun generateType (packageName: String ): TypeSpec More info Generate the full queries object - done once per file, containing all labeled select and mutator queries. interfaceType [jvm] Content fun interfaceType (): TypeSpec","title":"QueriesTypeGenerator   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/#queriestypegenerator","text":"[jvm] class QueriesTypeGenerator ( module : Module, file : SqlDelightQueriesFile )","title":"QueriesTypeGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/#functions","text":"Name Summary generateType [jvm] Content fun generateType (packageName: String ): TypeSpec More info Generate the full queries object - done once per file, containing all labeled select and mutator queries. interfaceType [jvm] Content fun interfaceType (): TypeSpec","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/-queries-type-generator/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueriesTypeGenerator / QueriesTypeGenerator QueriesTypeGenerator [jvm] Content fun QueriesTypeGenerator (module: Module, file: SqlDelightQueriesFile )","title":"QueriesTypeGenerator   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/-queries-type-generator/#queriestypegenerator","text":"[jvm] Content fun QueriesTypeGenerator (module: Module, file: SqlDelightQueriesFile )","title":"QueriesTypeGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/generate-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueriesTypeGenerator / generateType generateType [jvm] Content fun generateType (packageName: String ): TypeSpec More info Generate the full queries object - done once per file, containing all labeled select and mutator queries. eg: class DataQueries( private val queryWrapper: QueryWrapper, private val driver: SqlDriver, transactions: ThreadLocal ) : TransacterImpl(driver, transactions)","title":"generateType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/generate-type/#generatetype","text":"[jvm] Content fun generateType (packageName: String ): TypeSpec More info Generate the full queries object - done once per file, containing all labeled select and mutator queries. eg: class DataQueries( private val queryWrapper: QueryWrapper, private val driver: SqlDriver, transactions: ThreadLocal ) : TransacterImpl(driver, transactions)","title":"generateType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/interface-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueriesTypeGenerator / interfaceType interfaceType [jvm] Content fun interfaceType (): TypeSpec","title":"interfaceType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/interface-type/#interfacetype","text":"[jvm] Content fun interfaceType (): TypeSpec","title":"interfaceType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-generator/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueryGenerator QueryGenerator [jvm] abstract class QueryGenerator ( query : BindableQuery ) Inheritors Name ExecuteQueryGenerator SelectQueryGenerator","title":"QueryGenerator   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-generator/#querygenerator","text":"[jvm] abstract class QueryGenerator ( query : BindableQuery )","title":"QueryGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-generator/#inheritors","text":"Name ExecuteQueryGenerator SelectQueryGenerator","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-generator/-query-generator/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueryGenerator / QueryGenerator QueryGenerator [jvm] Content fun QueryGenerator (query: BindableQuery )","title":"QueryGenerator   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-generator/-query-generator/#querygenerator","text":"[jvm] Content fun QueryGenerator (query: BindableQuery )","title":"QueryGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueryInterfaceGenerator QueryInterfaceGenerator [jvm] class QueryInterfaceGenerator ( query : NamedQuery ) Functions Name Summary kotlinImplementationSpec [jvm] Content fun kotlinImplementationSpec (): TypeSpec Properties Name Summary query [jvm] val query : NamedQuery","title":"QueryInterfaceGenerator   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/#queryinterfacegenerator","text":"[jvm] class QueryInterfaceGenerator ( query : NamedQuery )","title":"QueryInterfaceGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/#functions","text":"Name Summary kotlinImplementationSpec [jvm] Content fun kotlinImplementationSpec (): TypeSpec","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/#properties","text":"Name Summary query [jvm] val query : NamedQuery","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/-query-interface-generator/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueryInterfaceGenerator / QueryInterfaceGenerator QueryInterfaceGenerator [jvm] Content fun QueryInterfaceGenerator (query: NamedQuery )","title":"QueryInterfaceGenerator   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/-query-interface-generator/#queryinterfacegenerator","text":"[jvm] Content fun QueryInterfaceGenerator (query: NamedQuery )","title":"QueryInterfaceGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/kotlin-implementation-spec/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueryInterfaceGenerator / kotlinImplementationSpec kotlinImplementationSpec [jvm] Content fun kotlinImplementationSpec (): TypeSpec","title":"kotlinImplementationSpec   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/kotlin-implementation-spec/#kotlinimplementationspec","text":"[jvm] Content fun kotlinImplementationSpec (): TypeSpec","title":"kotlinImplementationSpec"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/query/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueryInterfaceGenerator / query query [jvm] Content val query : NamedQuery","title":"query   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/query/#query","text":"[jvm] Content val query : NamedQuery","title":"query"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / SelectQueryGenerator SelectQueryGenerator [jvm] class SelectQueryGenerator ( query : NamedQuery ) : QueryGenerator Functions Name Summary customResultTypeFunction [jvm] Content fun customResultTypeFunction (): FunSpec More info The exposed query method which returns a provided custom type. customResultTypeFunctionInterface [jvm] Content fun customResultTypeFunctionInterface (): FunSpec.Builder defaultResultTypeFunction [jvm] Content fun defaultResultTypeFunction (): FunSpec More info The exposed query method which returns the default data class implementation. defaultResultTypeFunctionInterface [jvm] Content fun defaultResultTypeFunctionInterface (): FunSpec.Builder queryCollectionProperty [jvm] Content fun queryCollectionProperty (): PropertySpec More info The private property used to delegate query result updates. querySubtype [jvm] Content fun querySubtype (): TypeSpec More info The private query subtype for this specific query.","title":"SelectQueryGenerator   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/#selectquerygenerator","text":"[jvm] class SelectQueryGenerator ( query : NamedQuery ) : QueryGenerator","title":"SelectQueryGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/#functions","text":"Name Summary customResultTypeFunction [jvm] Content fun customResultTypeFunction (): FunSpec More info The exposed query method which returns a provided custom type. customResultTypeFunctionInterface [jvm] Content fun customResultTypeFunctionInterface (): FunSpec.Builder defaultResultTypeFunction [jvm] Content fun defaultResultTypeFunction (): FunSpec More info The exposed query method which returns the default data class implementation. defaultResultTypeFunctionInterface [jvm] Content fun defaultResultTypeFunctionInterface (): FunSpec.Builder queryCollectionProperty [jvm] Content fun queryCollectionProperty (): PropertySpec More info The private property used to delegate query result updates. querySubtype [jvm] Content fun querySubtype (): TypeSpec More info The private query subtype for this specific query.","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/-select-query-generator/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / SelectQueryGenerator / SelectQueryGenerator SelectQueryGenerator [jvm] Content fun SelectQueryGenerator (query: NamedQuery )","title":"SelectQueryGenerator   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/-select-query-generator/#selectquerygenerator","text":"[jvm] Content fun SelectQueryGenerator (query: NamedQuery )","title":"SelectQueryGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/custom-result-type-function-interface/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / SelectQueryGenerator / customResultTypeFunctionInterface customResultTypeFunctionInterface [jvm] Content fun customResultTypeFunctionInterface (): FunSpec.Builder","title":"customResultTypeFunctionInterface   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/custom-result-type-function-interface/#customresulttypefunctioninterface","text":"[jvm] Content fun customResultTypeFunctionInterface (): FunSpec.Builder","title":"customResultTypeFunctionInterface"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/custom-result-type-function/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / SelectQueryGenerator / customResultTypeFunction customResultTypeFunction [jvm] Content fun customResultTypeFunction (): FunSpec More info The exposed query method which returns a provided custom type. fun selectForId(id, mapper: (column1: String) -> T): Query","title":"customResultTypeFunction   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/custom-result-type-function/#customresulttypefunction","text":"[jvm] Content fun customResultTypeFunction (): FunSpec More info The exposed query method which returns a provided custom type. fun selectForId(id, mapper: (column1: String) -> T): Query","title":"customResultTypeFunction"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/default-result-type-function-interface/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / SelectQueryGenerator / defaultResultTypeFunctionInterface defaultResultTypeFunctionInterface [jvm] Content fun defaultResultTypeFunctionInterface (): FunSpec.Builder","title":"defaultResultTypeFunctionInterface   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/default-result-type-function-interface/#defaultresulttypefunctioninterface","text":"[jvm] Content fun defaultResultTypeFunctionInterface (): FunSpec.Builder","title":"defaultResultTypeFunctionInterface"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/default-result-type-function/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / SelectQueryGenerator / defaultResultTypeFunction defaultResultTypeFunction [jvm] Content fun defaultResultTypeFunction (): FunSpec More info The exposed query method which returns the default data class implementation. fun selectForId(id: Int): Query","title":"defaultResultTypeFunction   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/default-result-type-function/#defaultresulttypefunction","text":"[jvm] Content fun defaultResultTypeFunction (): FunSpec More info The exposed query method which returns the default data class implementation. fun selectForId(id: Int): Query","title":"defaultResultTypeFunction"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/query-collection-property/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / SelectQueryGenerator / queryCollectionProperty queryCollectionProperty [jvm] Content fun queryCollectionProperty (): PropertySpec More info The private property used to delegate query result updates. private val selectForId: MutableList<Query<*>> = mutableListOf()","title":"queryCollectionProperty   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/query-collection-property/#querycollectionproperty","text":"[jvm] Content fun queryCollectionProperty (): PropertySpec More info The private property used to delegate query result updates. private val selectForId: MutableList<Query<*>> = mutableListOf()","title":"queryCollectionProperty"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/query-subtype/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / SelectQueryGenerator / querySubtype querySubtype [jvm] Content fun querySubtype (): TypeSpec More info The private query subtype for this specific query. private class SelectForIdQuery ( private val _id: Int, mapper: (SqlResultSet) -> T ) : Query (statement, selectForId, mapper) { private inner class SelectForIdQuery ( private val _id: Int, mapper: (Cursor) -> T ): Query (database.helper, selectForId, mapper)","title":"querySubtype   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/query-subtype/#querysubtype","text":"[jvm] Content fun querySubtype (): TypeSpec More info The private query subtype for this specific query. private class SelectForIdQuery ( private val _id: Int, mapper: (SqlResultSet) -> T ) : Query (statement, selectForId, mapper) { private inner class SelectForIdQuery ( private val _id: Int, mapper: (Cursor) -> T ): Query (database.helper, selectForId, mapper)","title":"querySubtype"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / SqlDelightCompiler SqlDelightCompiler [jvm] object SqlDelightCompiler Functions Name Summary writeDatabaseInterface [jvm] Content fun writeDatabaseInterface (module: Module, file: SqlDelightFile , implementationFolder: String , output: FileAppender) writeImplementations [jvm] Content fun writeImplementations (module: Module, sourceFile: SqlDelightQueriesFile , implementationFolder: String , output: FileAppender) writeInterfaces [jvm] Content fun writeInterfaces (module: Module, file: SqlDelightQueriesFile , output: FileAppender) fun writeInterfaces (file: MigrationFile , output: FileAppender, includeAll: Boolean = false)","title":"SqlDelightCompiler   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/#sqldelightcompiler","text":"[jvm] object SqlDelightCompiler","title":"SqlDelightCompiler"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/#functions","text":"Name Summary writeDatabaseInterface [jvm] Content fun writeDatabaseInterface (module: Module, file: SqlDelightFile , implementationFolder: String , output: FileAppender) writeImplementations [jvm] Content fun writeImplementations (module: Module, sourceFile: SqlDelightQueriesFile , implementationFolder: String , output: FileAppender) writeInterfaces [jvm] Content fun writeInterfaces (module: Module, file: SqlDelightQueriesFile , output: FileAppender) fun writeInterfaces (file: MigrationFile , output: FileAppender, includeAll: Boolean = false)","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/write-database-interface/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / SqlDelightCompiler / writeDatabaseInterface writeDatabaseInterface [jvm] Content fun writeDatabaseInterface (module: Module, file: SqlDelightFile , implementationFolder: String , output: FileAppender)","title":"writeDatabaseInterface   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/write-database-interface/#writedatabaseinterface","text":"[jvm] Content fun writeDatabaseInterface (module: Module, file: SqlDelightFile , implementationFolder: String , output: FileAppender)","title":"writeDatabaseInterface"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/write-implementations/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / SqlDelightCompiler / writeImplementations writeImplementations [jvm] Content fun writeImplementations (module: Module, sourceFile: SqlDelightQueriesFile , implementationFolder: String , output: FileAppender)","title":"writeImplementations   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/write-implementations/#writeimplementations","text":"[jvm] Content fun writeImplementations (module: Module, sourceFile: SqlDelightQueriesFile , implementationFolder: String , output: FileAppender)","title":"writeImplementations"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/write-interfaces/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler / SqlDelightCompiler / writeInterfaces writeInterfaces [jvm] Content fun writeInterfaces (module: Module, file: SqlDelightQueriesFile , output: FileAppender) fun writeInterfaces (file: MigrationFile , output: FileAppender, includeAll: Boolean = false)","title":"writeInterfaces   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/write-interfaces/#writeinterfaces","text":"[jvm] Content fun writeInterfaces (module: Module, file: SqlDelightQueriesFile , output: FileAppender) fun writeInterfaces (file: MigrationFile , output: FileAppender, includeAll: Boolean = false)","title":"writeInterfaces"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model Package com.squareup.sqldelight.core.compiler.model Types Name Summary BindableQuery [jvm] Content abstract class BindableQuery ( identifier : PsiElement?, statement : PsiElement) NamedExecute [jvm] Content open class NamedExecute ( identifier : StmtIdentifierMixin , statement : PsiElement) : BindableQuery NamedMutator [jvm] Content sealed class NamedMutator : NamedExecute NamedQuery [jvm] Content data class NamedQuery ( name : String , select : SqlCompoundSelectStmt, statementIdentifier : PsiElement?) : BindableQuery","title":"Package com.squareup.sqldelight.core.compiler.model   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/#package-comsquareupsqldelightcorecompilermodel","text":"","title":"Package com.squareup.sqldelight.core.compiler.model"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/#types","text":"Name Summary BindableQuery [jvm] Content abstract class BindableQuery ( identifier : PsiElement?, statement : PsiElement) NamedExecute [jvm] Content open class NamedExecute ( identifier : StmtIdentifierMixin , statement : PsiElement) : BindableQuery NamedMutator [jvm] Content sealed class NamedMutator : NamedExecute NamedQuery [jvm] Content data class NamedQuery ( name : String , select : SqlCompoundSelectStmt, statementIdentifier : PsiElement?) : BindableQuery","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / BindableQuery BindableQuery [jvm] abstract class BindableQuery ( identifier : PsiElement?, statement : PsiElement) Types Name Summary Companion [jvm] Content object Companion Properties Name Summary id [jvm] abstract val id : Int Inheritors Name NamedExecute NamedQuery","title":"BindableQuery   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/#bindablequery","text":"[jvm] abstract class BindableQuery ( identifier : PsiElement?, statement : PsiElement)","title":"BindableQuery"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/#properties","text":"Name Summary id [jvm] abstract val id : Int","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/#inheritors","text":"Name NamedExecute NamedQuery","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/-bindable-query/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / BindableQuery / BindableQuery BindableQuery [jvm] Content fun BindableQuery (identifier: PsiElement?, statement: PsiElement)","title":"BindableQuery   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/-bindable-query/#bindablequery","text":"[jvm] Content fun BindableQuery (identifier: PsiElement?, statement: PsiElement)","title":"BindableQuery"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/id/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / BindableQuery / id id [jvm] Content abstract val id : Int","title":"id   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/id/#id","text":"[jvm] Content abstract val id : Int","title":"id"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/-companion/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / BindableQuery / Companion Companion [jvm] object Companion Functions Name Summary getUniqueQueryIdentifier [jvm] Content fun getUniqueQueryIdentifier (qualifiedQueryName: String ): Int More info Use the hashcode of qualifiedQueryName to generate the unique identifier id for queries. Properties Name Summary queryIdMap [jvm] val queryIdMap : ConcurrentHashMap < String , Int >The query id map use to avoid string hashcode collision.","title":"Companion   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/-companion/#functions","text":"Name Summary getUniqueQueryIdentifier [jvm] Content fun getUniqueQueryIdentifier (qualifiedQueryName: String ): Int More info Use the hashcode of qualifiedQueryName to generate the unique identifier id for queries.","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/-companion/#properties","text":"Name Summary queryIdMap [jvm] val queryIdMap : ConcurrentHashMap < String , Int >The query id map use to avoid string hashcode collision.","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/-companion/get-unique-query-identifier/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / BindableQuery / Companion / getUniqueQueryIdentifier getUniqueQueryIdentifier [jvm] Content fun getUniqueQueryIdentifier (qualifiedQueryName: String ): Int More info Use the hashcode of qualifiedQueryName to generate the unique identifier id for queries. Detect the hashcode collision by caching the generated identifiers. Runtime exception will be thrown when collision happens. Client would need to give a different query name to avoid the collision.","title":"getUniqueQueryIdentifier   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/-companion/get-unique-query-identifier/#getuniquequeryidentifier","text":"[jvm] Content fun getUniqueQueryIdentifier (qualifiedQueryName: String ): Int More info Use the hashcode of qualifiedQueryName to generate the unique identifier id for queries. Detect the hashcode collision by caching the generated identifiers. Runtime exception will be thrown when collision happens. Client would need to give a different query name to avoid the collision.","title":"getUniqueQueryIdentifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/-companion/query-id-map/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / BindableQuery / Companion / queryIdMap queryIdMap [jvm] Content val queryIdMap : ConcurrentHashMap < String , Int > More info The query id map use to avoid string hashcode collision. Ideally this map should be per module.","title":"queryIdMap   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/-companion/query-id-map/#queryidmap","text":"[jvm] Content val queryIdMap : ConcurrentHashMap < String , Int > More info The query id map use to avoid string hashcode collision. Ideally this map should be per module.","title":"queryIdMap"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedExecute NamedExecute [jvm] open class NamedExecute ( identifier : StmtIdentifierMixin , statement : PsiElement) : BindableQuery Properties Name Summary id [jvm] open override val id : Int name [jvm] val name : Inheritors Name NamedMutator","title":"NamedExecute   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/#namedexecute","text":"[jvm] open class NamedExecute ( identifier : StmtIdentifierMixin , statement : PsiElement) : BindableQuery","title":"NamedExecute"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/#properties","text":"Name Summary id [jvm] open override val id : Int name [jvm] val name :","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/#inheritors","text":"Name NamedMutator","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/-named-execute/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedExecute / NamedExecute NamedExecute [jvm] Content fun NamedExecute (identifier: StmtIdentifierMixin , statement: PsiElement)","title":"NamedExecute   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/-named-execute/#namedexecute","text":"[jvm] Content fun NamedExecute (identifier: StmtIdentifierMixin , statement: PsiElement)","title":"NamedExecute"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/id/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedExecute / id id [jvm] Content open override val id : Int","title":"id   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/id/#id","text":"[jvm] Content open override val id : Int","title":"id"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedExecute / name name [jvm] Content val name :","title":"name   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/name/#name","text":"[jvm] Content val name :","title":"name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedMutator NamedMutator [jvm] sealed class NamedMutator : NamedExecute Types Name Summary Delete [jvm] Content class Delete ( delete : SqlDeleteStmtLimited, identifier : StmtIdentifierMixin ) : NamedMutator Insert [jvm] Content class Insert ( insert : SqlInsertStmt, identifier : StmtIdentifierMixin ) : NamedMutator Update [jvm] Content class Update ( update : SqlUpdateStmtLimited, identifier : StmtIdentifierMixin ) : NamedMutator Properties Name Summary containingFile [jvm] val containingFile : SqlDelightQueriesFile id [jvm] open override val id : Int name [jvm] val name : Inheritors Name NamedMutator NamedMutator NamedMutator","title":"NamedMutator   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/#namedmutator","text":"[jvm] sealed class NamedMutator : NamedExecute","title":"NamedMutator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/#types","text":"Name Summary Delete [jvm] Content class Delete ( delete : SqlDeleteStmtLimited, identifier : StmtIdentifierMixin ) : NamedMutator Insert [jvm] Content class Insert ( insert : SqlInsertStmt, identifier : StmtIdentifierMixin ) : NamedMutator Update [jvm] Content class Update ( update : SqlUpdateStmtLimited, identifier : StmtIdentifierMixin ) : NamedMutator","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/#properties","text":"Name Summary containingFile [jvm] val containingFile : SqlDelightQueriesFile id [jvm] open override val id : Int name [jvm] val name :","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/#inheritors","text":"Name NamedMutator NamedMutator NamedMutator","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/containing-file/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedMutator / containingFile containingFile [jvm] Content val containingFile : SqlDelightQueriesFile","title":"containingFile   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/containing-file/#containingfile","text":"[jvm] Content val containingFile : SqlDelightQueriesFile","title":"containingFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-delete/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedMutator / Delete Delete [jvm] class Delete ( delete : SqlDeleteStmtLimited, identifier : StmtIdentifierMixin ) : NamedMutator Properties Name Summary containingFile [jvm] val containingFile : SqlDelightQueriesFile id [jvm] open override val id : Int name [jvm] val name :","title":"Delete   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-delete/#delete","text":"[jvm] class Delete ( delete : SqlDeleteStmtLimited, identifier : StmtIdentifierMixin ) : NamedMutator","title":"Delete"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-delete/#properties","text":"Name Summary containingFile [jvm] val containingFile : SqlDelightQueriesFile id [jvm] open override val id : Int name [jvm] val name :","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-delete/-delete/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedMutator / Delete / Delete Delete [jvm] Content fun Delete (delete: SqlDeleteStmtLimited, identifier: StmtIdentifierMixin )","title":"Delete   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-delete/-delete/#delete","text":"[jvm] Content fun Delete (delete: SqlDeleteStmtLimited, identifier: StmtIdentifierMixin )","title":"Delete"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-insert/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedMutator / Insert Insert [jvm] class Insert ( insert : SqlInsertStmt, identifier : StmtIdentifierMixin ) : NamedMutator Properties Name Summary containingFile [jvm] val containingFile : SqlDelightQueriesFile hasUpsertClause [jvm] val hasUpsertClause : Boolean id [jvm] open override val id : Int name [jvm] val name :","title":"Insert   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-insert/#insert","text":"[jvm] class Insert ( insert : SqlInsertStmt, identifier : StmtIdentifierMixin ) : NamedMutator","title":"Insert"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-insert/#properties","text":"Name Summary containingFile [jvm] val containingFile : SqlDelightQueriesFile hasUpsertClause [jvm] val hasUpsertClause : Boolean id [jvm] open override val id : Int name [jvm] val name :","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-insert/-insert/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedMutator / Insert / Insert Insert [jvm] Content fun Insert (insert: SqlInsertStmt, identifier: StmtIdentifierMixin )","title":"Insert   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-insert/-insert/#insert","text":"[jvm] Content fun Insert (insert: SqlInsertStmt, identifier: StmtIdentifierMixin )","title":"Insert"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-insert/has-upsert-clause/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedMutator / Insert / hasUpsertClause hasUpsertClause [jvm] Content val hasUpsertClause : Boolean","title":"hasUpsertClause   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-insert/has-upsert-clause/#hasupsertclause","text":"[jvm] Content val hasUpsertClause : Boolean","title":"hasUpsertClause"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-update/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedMutator / Update Update [jvm] class Update ( update : SqlUpdateStmtLimited, identifier : StmtIdentifierMixin ) : NamedMutator Properties Name Summary containingFile [jvm] val containingFile : SqlDelightQueriesFile id [jvm] open override val id : Int name [jvm] val name :","title":"Update   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-update/#update","text":"[jvm] class Update ( update : SqlUpdateStmtLimited, identifier : StmtIdentifierMixin ) : NamedMutator","title":"Update"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-update/#properties","text":"Name Summary containingFile [jvm] val containingFile : SqlDelightQueriesFile id [jvm] open override val id : Int name [jvm] val name :","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-update/-update/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedMutator / Update / Update Update [jvm] Content fun Update (update: SqlUpdateStmtLimited, identifier: StmtIdentifierMixin )","title":"Update   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-update/-update/#update","text":"[jvm] Content fun Update (update: SqlUpdateStmtLimited, identifier: StmtIdentifierMixin )","title":"Update"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedQuery NamedQuery [jvm] data class NamedQuery ( name : String , select : SqlCompoundSelectStmt, statementIdentifier : PsiElement?) : BindableQuery Properties Name Summary id [jvm] open override val id : Int name [jvm] val name : String select [jvm] val select : SqlCompoundSelectStmt","title":"NamedQuery   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/#namedquery","text":"[jvm] data class NamedQuery ( name : String , select : SqlCompoundSelectStmt, statementIdentifier : PsiElement?) : BindableQuery","title":"NamedQuery"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/#properties","text":"Name Summary id [jvm] open override val id : Int name [jvm] val name : String select [jvm] val select : SqlCompoundSelectStmt","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/-named-query/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedQuery / NamedQuery NamedQuery [jvm] Content fun NamedQuery (name: String , select: SqlCompoundSelectStmt, statementIdentifier: PsiElement? = null)","title":"NamedQuery   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/-named-query/#namedquery","text":"[jvm] Content fun NamedQuery (name: String , select: SqlCompoundSelectStmt, statementIdentifier: PsiElement? = null)","title":"NamedQuery"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/id/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedQuery / id id [jvm] Content open override val id : Int","title":"id   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/id/#id","text":"[jvm] Content open override val id : Int","title":"id"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedQuery / name name [jvm] Content val name : String","title":"name   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/select/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedQuery / select select [jvm] Content val select : SqlCompoundSelectStmt","title":"select   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/select/#select","text":"[jvm] Content val select : SqlCompoundSelectStmt","title":"select"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang Package com.squareup.sqldelight.core.lang Types Name Summary DatabaseFileType [jvm] Content object DatabaseFileType : FileType DatabaseFileViewProviderFactory [jvm] Content class DatabaseFileViewProviderFactory : FileViewProviderFactory MigrationFile [jvm] Content class MigrationFile ( viewProvider : FileViewProvider) : SqlDelightFile MigrationFileType [jvm] Content object MigrationFileType : LanguageFileType MigrationLanguage [jvm] Content object MigrationLanguage : Language MigrationParserDefinition [jvm] Content class MigrationParserDefinition : SqlParserDefinition SqlDelightFile [jvm] Content abstract class SqlDelightFile ( viewProvider : FileViewProvider, language : Language) : SqlFileBase SqlDelightFileType [jvm] Content object SqlDelightFileType : LanguageFileType SqlDelightLanguage [jvm] Content object SqlDelightLanguage : Language SqlDelightParserDefinition [jvm] Content class SqlDelightParserDefinition : SqlParserDefinition SqlDelightQueriesFile [jvm] Content class SqlDelightQueriesFile ( viewProvider : FileViewProvider) : SqlDelightFile , SqlAnnotatedElement Functions Name Summary acceptsTableInterface [jvm] Content fun SqlInsertStmt. acceptsTableInterface (): Boolean Properties Name Summary QUERIES_SUFFIX_NAME [jvm] const val QUERIES_SUFFIX_NAME : String queriesName [jvm] val VirtualFile. queriesName : String","title":"Package com.squareup.sqldelight.core.lang   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/#package-comsquareupsqldelightcorelang","text":"","title":"Package com.squareup.sqldelight.core.lang"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/#types","text":"Name Summary DatabaseFileType [jvm] Content object DatabaseFileType : FileType DatabaseFileViewProviderFactory [jvm] Content class DatabaseFileViewProviderFactory : FileViewProviderFactory MigrationFile [jvm] Content class MigrationFile ( viewProvider : FileViewProvider) : SqlDelightFile MigrationFileType [jvm] Content object MigrationFileType : LanguageFileType MigrationLanguage [jvm] Content object MigrationLanguage : Language MigrationParserDefinition [jvm] Content class MigrationParserDefinition : SqlParserDefinition SqlDelightFile [jvm] Content abstract class SqlDelightFile ( viewProvider : FileViewProvider, language : Language) : SqlFileBase SqlDelightFileType [jvm] Content object SqlDelightFileType : LanguageFileType SqlDelightLanguage [jvm] Content object SqlDelightLanguage : Language SqlDelightParserDefinition [jvm] Content class SqlDelightParserDefinition : SqlParserDefinition SqlDelightQueriesFile [jvm] Content class SqlDelightQueriesFile ( viewProvider : FileViewProvider) : SqlDelightFile , SqlAnnotatedElement","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/#functions","text":"Name Summary acceptsTableInterface [jvm] Content fun SqlInsertStmt. acceptsTableInterface (): Boolean","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/#properties","text":"Name Summary QUERIES_SUFFIX_NAME [jvm] const val QUERIES_SUFFIX_NAME : String queriesName [jvm] val VirtualFile. queriesName : String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-q-u-e-r-i-e-s_-s-u-f-f-i-x_-n-a-m-e/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / QUERIES_SUFFIX_NAME QUERIES_SUFFIX_NAME [jvm] Content const val QUERIES_SUFFIX_NAME : String","title":"QUERIES_SUFFIX_NAME   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-q-u-e-r-i-e-s_-s-u-f-f-i-x_-n-a-m-e/#queries_suffix_name","text":"[jvm] Content const val QUERIES_SUFFIX_NAME : String","title":"QUERIES_SUFFIX_NAME"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/accepts-table-interface/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / acceptsTableInterface acceptsTableInterface [jvm] Content fun SqlInsertStmt. acceptsTableInterface (): Boolean","title":"acceptsTableInterface   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/accepts-table-interface/#acceptstableinterface","text":"[jvm] Content fun SqlInsertStmt. acceptsTableInterface (): Boolean","title":"acceptsTableInterface"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/queries-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / queriesName queriesName [jvm] Content val VirtualFile. queriesName : String","title":"queriesName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/queries-name/#queriesname","text":"[jvm] Content val VirtualFile. queriesName : String","title":"queriesName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType DatabaseFileType [jvm] object DatabaseFileType : FileType Functions Name Summary getCharset [jvm] Content open override fun getCharset (vFile: VirtualFile, bytes: ByteArray ): Nothing ? getDefaultExtension [jvm] Content open override fun getDefaultExtension (): String getDescription [jvm] Content open override fun getDescription (): String getDisplayName [jvm] Content @NotNull() open fun getDisplayName (): @NotNull() String getIcon [jvm] Content open override fun getIcon (): @NotNull() Icon getName [jvm] Content open override fun getName (): String isBinary [jvm] Content open override fun isBinary (): Boolean isReadOnly [jvm] Content open override fun isReadOnly (): Boolean Properties Name Summary EXTENSION [jvm] const val EXTENSION : String","title":"DatabaseFileType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/#databasefiletype","text":"[jvm] object DatabaseFileType : FileType","title":"DatabaseFileType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/#functions","text":"Name Summary getCharset [jvm] Content open override fun getCharset (vFile: VirtualFile, bytes: ByteArray ): Nothing ? getDefaultExtension [jvm] Content open override fun getDefaultExtension (): String getDescription [jvm] Content open override fun getDescription (): String getDisplayName [jvm] Content @NotNull() open fun getDisplayName (): @NotNull() String getIcon [jvm] Content open override fun getIcon (): @NotNull() Icon getName [jvm] Content open override fun getName (): String isBinary [jvm] Content open override fun isBinary (): Boolean isReadOnly [jvm] Content open override fun isReadOnly (): Boolean","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/#properties","text":"Name Summary EXTENSION [jvm] const val EXTENSION : String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/-e-x-t-e-n-s-i-o-n/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType / EXTENSION EXTENSION [jvm] Content const val EXTENSION : String","title":"EXTENSION   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/-e-x-t-e-n-s-i-o-n/#extension","text":"[jvm] Content const val EXTENSION : String","title":"EXTENSION"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-charset/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType / getCharset getCharset [jvm] Content open override fun getCharset (vFile: VirtualFile, bytes: ByteArray ): Nothing ?","title":"getCharset   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-charset/#getcharset","text":"[jvm] Content open override fun getCharset (vFile: VirtualFile, bytes: ByteArray ): Nothing ?","title":"getCharset"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-default-extension/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType / getDefaultExtension getDefaultExtension [jvm] Content open override fun getDefaultExtension (): String","title":"getDefaultExtension   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-default-extension/#getdefaultextension","text":"[jvm] Content open override fun getDefaultExtension (): String","title":"getDefaultExtension"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-description/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType / getDescription getDescription [jvm] Content open override fun getDescription (): String","title":"getDescription   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-description/#getdescription","text":"[jvm] Content open override fun getDescription (): String","title":"getDescription"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-icon/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType / getIcon getIcon [jvm] Content open override fun getIcon (): @NotNull() Icon","title":"getIcon   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-icon/#geticon","text":"[jvm] Content open override fun getIcon (): @NotNull() Icon","title":"getIcon"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType / getName getName [jvm] Content open override fun getName (): String","title":"getName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-name/#getname","text":"[jvm] Content open override fun getName (): String","title":"getName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/is-binary/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType / isBinary isBinary [jvm] Content open override fun isBinary (): Boolean","title":"isBinary   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/is-binary/#isbinary","text":"[jvm] Content open override fun isBinary (): Boolean","title":"isBinary"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/is-read-only/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType / isReadOnly isReadOnly [jvm] Content open override fun isReadOnly (): Boolean","title":"isReadOnly   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/is-read-only/#isreadonly","text":"[jvm] Content open override fun isReadOnly (): Boolean","title":"isReadOnly"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-view-provider-factory/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileViewProviderFactory DatabaseFileViewProviderFactory [jvm] class DatabaseFileViewProviderFactory : FileViewProviderFactory Functions Name Summary createFileViewProvider [jvm] Content open override fun createFileViewProvider (vFile: VirtualFile, language: Language?, psiManager: PsiManager, eventSystemEnabled: Boolean ): FileViewProvider","title":"DatabaseFileViewProviderFactory   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-view-provider-factory/#databasefileviewproviderfactory","text":"[jvm] class DatabaseFileViewProviderFactory : FileViewProviderFactory","title":"DatabaseFileViewProviderFactory"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-view-provider-factory/#functions","text":"Name Summary createFileViewProvider [jvm] Content open override fun createFileViewProvider (vFile: VirtualFile, language: Language?, psiManager: PsiManager, eventSystemEnabled: Boolean ): FileViewProvider","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-view-provider-factory/-database-file-view-provider-factory/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileViewProviderFactory / DatabaseFileViewProviderFactory DatabaseFileViewProviderFactory [jvm] Content fun DatabaseFileViewProviderFactory ()","title":"DatabaseFileViewProviderFactory   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-view-provider-factory/-database-file-view-provider-factory/#databasefileviewproviderfactory","text":"[jvm] Content fun DatabaseFileViewProviderFactory ()","title":"DatabaseFileViewProviderFactory"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-view-provider-factory/create-file-view-provider/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileViewProviderFactory / createFileViewProvider createFileViewProvider [jvm] Content open override fun createFileViewProvider (vFile: VirtualFile, language: Language?, psiManager: PsiManager, eventSystemEnabled: Boolean ): FileViewProvider","title":"createFileViewProvider   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-view-provider-factory/create-file-view-provider/#createfileviewprovider","text":"[jvm] Content open override fun createFileViewProvider (vFile: VirtualFile, language: Language?, psiManager: PsiManager, eventSystemEnabled: Boolean ): FileViewProvider","title":"createFileViewProvider"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFile MigrationFile [jvm] class MigrationFile ( viewProvider : FileViewProvider) : SqlDelightFile Functions Name Summary accept [jvm] Content open override fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content open override fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content open override fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content open override fun addAfter (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addBefore [jvm] Content open override fun addBefore (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addRange [jvm] Content open override fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content open override fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content open override fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement assertReadAccessAllowed [jvm] Content open fun assertReadAccessAllowed () beforeAstChange [jvm] Content fun beforeAstChange () calcStubTree [jvm] Content @NotNull() open fun calcStubTree (): @NotNull()StubTree calcTreeElement [jvm] Content @NotNull() fun calcTreeElement (): @NotNull()FileElement canNavigate [jvm] Content open override fun canNavigate (): Boolean canNavigateToSource [jvm] Content open override fun canNavigateToSource (): Boolean changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean checkAdd [jvm] Content override fun checkAdd (@NotNull()p0: @NotNull()PsiElement) checkDelete [jvm] Content open override fun checkDelete () checkSetName [jvm] Content open override fun checkSetName (p0: String ) clearCaches [jvm] Content open override fun clearCaches () clearContent [jvm] Content fun clearContent (p0: String ) clearUserData [jvm] Content open fun clearUserData () clone [jvm] Content open override fun clone (): PsiFileImpl cloneImpl [jvm] Content open fun cloneImpl (p0: FileElement): PsiFileImpl computeBaseIcon [jvm] Content open fun computeBaseIcon (p0: Int ): Icon copy [jvm] Content override fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) createContentLeafElement [jvm] Content open fun createContentLeafElement (p0: CharSequence ): TreeElement createFileElement [jvm] Content @NotNull() open fun createFileElement (p0: CharSequence ): @NotNull()FileElement delete [jvm] Content open override fun delete () deleteChildRange [jvm] Content open override fun deleteChildRange (p0: PsiElement, p1: PsiElement) derefStub [jvm] Content @Nullable() open fun derefStub (): @Nullable()StubTree? derefTreeElement [jvm] Content open fun derefTreeElement (): FileElement findChildByClass [jvm] Content @Nullable() open fun < T : Any > findChildByClass (p0: Class < T >): @Nullable() T ? findChildrenByClass [jvm] Content open fun < T : Any > findChildrenByClass (p0: Class < T >): @NotNull() Array < T > findElementAt [jvm] Content open override fun findElementAt (p0: Int ): PsiElement? findReferenceAt [jvm] Content open override fun findReferenceAt (p0: Int ): PsiReference? getAdjustedBaseIcon [jvm] Content open fun getAdjustedBaseIcon (p0: Icon , p1: Int ): Icon getBaseIcon [jvm] Content open fun getBaseIcon (): Icon getChildren [jvm] Content open override fun getChildren (): @NotNull() Array getContainingDirectory [jvm] Content @Nullable() open override fun getContainingDirectory (): @Nullable()PsiDirectory? getContainingFile [jvm] Content @NotNull() open override fun getContainingFile (): @NotNull()PsiFile getContentElementType [jvm] Content open fun getContentElementType (): IElementType getContext [jvm] Content open override fun getContext (): PsiElement? getCopyableUserData [jvm] Content open fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T getElementIcon [jvm] Content @Nullable() open fun getElementIcon (p0: Int ): @Nullable() Icon ? getElementTypeForStubBuilder [jvm] Content @Nullable() open fun getElementTypeForStubBuilder (): @Nullable()IStubFileElementType<PsiFileStub<*>>? getFileElementType [jvm] Content @Nullable() open override fun getFileElementType (): @Nullable()IFileElementType? getFileType [jvm] Content open override fun getFileType (): MigrationFileType getFirstChild [jvm] Content open override fun getFirstChild (): PsiElement getGreenStub [jvm] Content @Nullable() fun getGreenStub (): @Nullable()StubElement ? getGreenStubTree [jvm] Content @Nullable() fun getGreenStubTree (): @Nullable()StubTree? getIcon [jvm] Content @Nullable() open override fun getIcon (p0: Int ): @Nullable() Icon ? getLanguage [jvm] Content @NotNull() override fun getLanguage (): @NotNull()Language getLastChild [jvm] Content open override fun getLastChild (): PsiElement getManager [jvm] Content override fun getManager (): PsiManager getModificationStamp [jvm] Content open override fun getModificationStamp (): Long getName [jvm] Content @NotNull() open override fun getName (): @NotNull() String getNavigationElement [jvm] Content open override fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open override fun getNextSibling (): PsiElement getNode [jvm] Content @NotNull() open override fun getNode (): @NotNull()FileASTNode getOriginalElement [jvm] Content open override fun getOriginalElement (): PsiElement getOriginalFile [jvm] Content @NotNull() open override fun getOriginalFile (): @NotNull()PsiFile getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content open override fun getParent (): PsiDirectory? getParserDefinition [jvm] Content @NotNull() open fun getParserDefinition (): @NotNull()ParserDefinition getPresentation [jvm] Content open override fun getPresentation (): ItemPresentation? getPrevSibling [jvm] Content open override fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() override fun getProject (): @NotNull()Project getPsiRoots [jvm] Content open override fun getPsiRoots (): @NotNull() Array getReference [jvm] Content open override fun getReference (): PsiReference? getReferences [jvm] Content open override fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() open override fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content open override fun getStartOffsetInParent (): Int getStub [jvm] Content @Nullable() open fun getStub (): @Nullable()StubElement ? getStubbedSpine [jvm] Content @NotNull() open override fun getStubbedSpine (): @NotNull()StubbedSpine getStubTree [jvm] Content @Nullable() open override fun getStubTree (): @Nullable()StubTree? getText [jvm] Content open override fun getText (): String getTextLength [jvm] Content open override fun getTextLength (): Int getTextOffset [jvm] Content open override fun getTextOffset (): Int getTextRange [jvm] Content open override fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getTreeElement [jvm] Content @Nullable() open fun getTreeElement (): @Nullable()FileElement? getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap getUseScope [jvm] Content @NotNull() open override fun getUseScope (): @NotNull()SearchScope getViewProvider [jvm] Content @NotNull() open override fun getViewProvider (): @NotNull()FileViewProvider getVirtualFile [jvm] Content open override fun getVirtualFile (): VirtualFile? init [jvm] Content open fun init (@NotNull()p0: @NotNull()IElementType, p1: IElementType) isContentsLoaded [jvm] Content open override fun isContentsLoaded (): Boolean isDirectory [jvm] Content open override fun isDirectory (): Boolean isEquivalentTo [jvm] Content open override fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content open override fun isPhysical (): Boolean isTemplateDataFile [jvm] Content open fun isTemplateDataFile (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open override fun isValid (): Boolean isVisibilitySupported [jvm] Content open fun isVisibilitySupported (): Boolean isWritable [jvm] Content open override fun isWritable (): Boolean markInvalidated [jvm] Content override fun markInvalidated () navigate [jvm] Content open override fun navigate (p0: Boolean ) onContentReload [jvm] Content open override fun onContentReload () processChildren [jvm] Content open override fun processChildren (@NotNull()p0: @NotNull()PsiElementProcessor ): Boolean processDeclarations [jvm] Content open override fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, p2: PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ) putInfo [jvm] Content open override fun putInfo (@NotNull()p0: @NotNull() MutableMap < String , String >) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T rebuildStub [jvm] Content fun rebuildStub () replace [jvm] Content open override fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean setContentElementType [jvm] Content open fun setContentElementType (p0: IElementType) setName [jvm] Content open override fun setName (@NotNull()p0: @NotNull() String ): PsiElement setOriginalFile [jvm] Content open fun setOriginalFile (@NotNull()p0: @NotNull()PsiFile) setTreeElementPointer [jvm] Content open fun setTreeElementPointer (@Nullable()p0: @Nullable()FileElement?) setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) subtreeChanged [jvm] Content open override fun subtreeChanged () tables [jvm] Content fun tables (includeAll: Boolean ): Collection tablesAvailable [jvm] Content fun tablesAvailable (child: PsiElement): List textContains [jvm] Content open override fun textContains (p0: Char ): Boolean textMatches [jvm] Content open override fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean open override fun textMatches (@NotNull()p0: @NotNull() CharSequence ): Boolean textToCharArray [jvm] Content open override fun textToCharArray (): CharArray toString [jvm] Content open override fun toString (): String triggers [jvm] Content fun triggers (sqlStmtElement: PsiElement?): Collection Properties Name Summary generatedDirectories [jvm] val generatedDirectories : List < String >? myContentElementType [jvm] val myContentElementType : IElementType myManager [jvm] val myManager : PsiManagerEx myOriginalFile [jvm] val myOriginalFile : PsiFile order [jvm] open override val order : Int sqlStmtList [jvm] val sqlStmtList : SqlStmtList? version [jvm] val version : Int","title":"MigrationFile   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/#migrationfile","text":"[jvm] class MigrationFile ( viewProvider : FileViewProvider) : SqlDelightFile","title":"MigrationFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/#functions","text":"Name Summary accept [jvm] Content open override fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content open override fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content open override fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content open override fun addAfter (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addBefore [jvm] Content open override fun addBefore (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addRange [jvm] Content open override fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content open override fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content open override fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement assertReadAccessAllowed [jvm] Content open fun assertReadAccessAllowed () beforeAstChange [jvm] Content fun beforeAstChange () calcStubTree [jvm] Content @NotNull() open fun calcStubTree (): @NotNull()StubTree calcTreeElement [jvm] Content @NotNull() fun calcTreeElement (): @NotNull()FileElement canNavigate [jvm] Content open override fun canNavigate (): Boolean canNavigateToSource [jvm] Content open override fun canNavigateToSource (): Boolean changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean checkAdd [jvm] Content override fun checkAdd (@NotNull()p0: @NotNull()PsiElement) checkDelete [jvm] Content open override fun checkDelete () checkSetName [jvm] Content open override fun checkSetName (p0: String ) clearCaches [jvm] Content open override fun clearCaches () clearContent [jvm] Content fun clearContent (p0: String ) clearUserData [jvm] Content open fun clearUserData () clone [jvm] Content open override fun clone (): PsiFileImpl cloneImpl [jvm] Content open fun cloneImpl (p0: FileElement): PsiFileImpl computeBaseIcon [jvm] Content open fun computeBaseIcon (p0: Int ): Icon copy [jvm] Content override fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) createContentLeafElement [jvm] Content open fun createContentLeafElement (p0: CharSequence ): TreeElement createFileElement [jvm] Content @NotNull() open fun createFileElement (p0: CharSequence ): @NotNull()FileElement delete [jvm] Content open override fun delete () deleteChildRange [jvm] Content open override fun deleteChildRange (p0: PsiElement, p1: PsiElement) derefStub [jvm] Content @Nullable() open fun derefStub (): @Nullable()StubTree? derefTreeElement [jvm] Content open fun derefTreeElement (): FileElement findChildByClass [jvm] Content @Nullable() open fun < T : Any > findChildByClass (p0: Class < T >): @Nullable() T ? findChildrenByClass [jvm] Content open fun < T : Any > findChildrenByClass (p0: Class < T >): @NotNull() Array < T > findElementAt [jvm] Content open override fun findElementAt (p0: Int ): PsiElement? findReferenceAt [jvm] Content open override fun findReferenceAt (p0: Int ): PsiReference? getAdjustedBaseIcon [jvm] Content open fun getAdjustedBaseIcon (p0: Icon , p1: Int ): Icon getBaseIcon [jvm] Content open fun getBaseIcon (): Icon getChildren [jvm] Content open override fun getChildren (): @NotNull() Array getContainingDirectory [jvm] Content @Nullable() open override fun getContainingDirectory (): @Nullable()PsiDirectory? getContainingFile [jvm] Content @NotNull() open override fun getContainingFile (): @NotNull()PsiFile getContentElementType [jvm] Content open fun getContentElementType (): IElementType getContext [jvm] Content open override fun getContext (): PsiElement? getCopyableUserData [jvm] Content open fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T getElementIcon [jvm] Content @Nullable() open fun getElementIcon (p0: Int ): @Nullable() Icon ? getElementTypeForStubBuilder [jvm] Content @Nullable() open fun getElementTypeForStubBuilder (): @Nullable()IStubFileElementType<PsiFileStub<*>>? getFileElementType [jvm] Content @Nullable() open override fun getFileElementType (): @Nullable()IFileElementType? getFileType [jvm] Content open override fun getFileType (): MigrationFileType getFirstChild [jvm] Content open override fun getFirstChild (): PsiElement getGreenStub [jvm] Content @Nullable() fun getGreenStub (): @Nullable()StubElement ? getGreenStubTree [jvm] Content @Nullable() fun getGreenStubTree (): @Nullable()StubTree? getIcon [jvm] Content @Nullable() open override fun getIcon (p0: Int ): @Nullable() Icon ? getLanguage [jvm] Content @NotNull() override fun getLanguage (): @NotNull()Language getLastChild [jvm] Content open override fun getLastChild (): PsiElement getManager [jvm] Content override fun getManager (): PsiManager getModificationStamp [jvm] Content open override fun getModificationStamp (): Long getName [jvm] Content @NotNull() open override fun getName (): @NotNull() String getNavigationElement [jvm] Content open override fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open override fun getNextSibling (): PsiElement getNode [jvm] Content @NotNull() open override fun getNode (): @NotNull()FileASTNode getOriginalElement [jvm] Content open override fun getOriginalElement (): PsiElement getOriginalFile [jvm] Content @NotNull() open override fun getOriginalFile (): @NotNull()PsiFile getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content open override fun getParent (): PsiDirectory? getParserDefinition [jvm] Content @NotNull() open fun getParserDefinition (): @NotNull()ParserDefinition getPresentation [jvm] Content open override fun getPresentation (): ItemPresentation? getPrevSibling [jvm] Content open override fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() override fun getProject (): @NotNull()Project getPsiRoots [jvm] Content open override fun getPsiRoots (): @NotNull() Array getReference [jvm] Content open override fun getReference (): PsiReference? getReferences [jvm] Content open override fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() open override fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content open override fun getStartOffsetInParent (): Int getStub [jvm] Content @Nullable() open fun getStub (): @Nullable()StubElement ? getStubbedSpine [jvm] Content @NotNull() open override fun getStubbedSpine (): @NotNull()StubbedSpine getStubTree [jvm] Content @Nullable() open override fun getStubTree (): @Nullable()StubTree? getText [jvm] Content open override fun getText (): String getTextLength [jvm] Content open override fun getTextLength (): Int getTextOffset [jvm] Content open override fun getTextOffset (): Int getTextRange [jvm] Content open override fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getTreeElement [jvm] Content @Nullable() open fun getTreeElement (): @Nullable()FileElement? getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap getUseScope [jvm] Content @NotNull() open override fun getUseScope (): @NotNull()SearchScope getViewProvider [jvm] Content @NotNull() open override fun getViewProvider (): @NotNull()FileViewProvider getVirtualFile [jvm] Content open override fun getVirtualFile (): VirtualFile? init [jvm] Content open fun init (@NotNull()p0: @NotNull()IElementType, p1: IElementType) isContentsLoaded [jvm] Content open override fun isContentsLoaded (): Boolean isDirectory [jvm] Content open override fun isDirectory (): Boolean isEquivalentTo [jvm] Content open override fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content open override fun isPhysical (): Boolean isTemplateDataFile [jvm] Content open fun isTemplateDataFile (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open override fun isValid (): Boolean isVisibilitySupported [jvm] Content open fun isVisibilitySupported (): Boolean isWritable [jvm] Content open override fun isWritable (): Boolean markInvalidated [jvm] Content override fun markInvalidated () navigate [jvm] Content open override fun navigate (p0: Boolean ) onContentReload [jvm] Content open override fun onContentReload () processChildren [jvm] Content open override fun processChildren (@NotNull()p0: @NotNull()PsiElementProcessor ): Boolean processDeclarations [jvm] Content open override fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, p2: PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ) putInfo [jvm] Content open override fun putInfo (@NotNull()p0: @NotNull() MutableMap < String , String >) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T rebuildStub [jvm] Content fun rebuildStub () replace [jvm] Content open override fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean setContentElementType [jvm] Content open fun setContentElementType (p0: IElementType) setName [jvm] Content open override fun setName (@NotNull()p0: @NotNull() String ): PsiElement setOriginalFile [jvm] Content open fun setOriginalFile (@NotNull()p0: @NotNull()PsiFile) setTreeElementPointer [jvm] Content open fun setTreeElementPointer (@Nullable()p0: @Nullable()FileElement?) setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) subtreeChanged [jvm] Content open override fun subtreeChanged () tables [jvm] Content fun tables (includeAll: Boolean ): Collection tablesAvailable [jvm] Content fun tablesAvailable (child: PsiElement): List textContains [jvm] Content open override fun textContains (p0: Char ): Boolean textMatches [jvm] Content open override fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean open override fun textMatches (@NotNull()p0: @NotNull() CharSequence ): Boolean textToCharArray [jvm] Content open override fun textToCharArray (): CharArray toString [jvm] Content open override fun toString (): String triggers [jvm] Content fun triggers (sqlStmtElement: PsiElement?): Collection","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/#properties","text":"Name Summary generatedDirectories [jvm] val generatedDirectories : List < String >? myContentElementType [jvm] val myContentElementType : IElementType myManager [jvm] val myManager : PsiManagerEx myOriginalFile [jvm] val myOriginalFile : PsiFile order [jvm] open override val order : Int sqlStmtList [jvm] val sqlStmtList : SqlStmtList? version [jvm] val version : Int","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/-migration-file/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFile / MigrationFile MigrationFile [jvm] Content fun MigrationFile (viewProvider: FileViewProvider)","title":"MigrationFile   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/-migration-file/#migrationfile","text":"[jvm] Content fun MigrationFile (viewProvider: FileViewProvider)","title":"MigrationFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/get-file-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFile / getFileType getFileType [jvm] Content open override fun getFileType (): MigrationFileType","title":"getFileType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/get-file-type/#getfiletype","text":"[jvm] Content open override fun getFileType (): MigrationFileType","title":"getFileType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/order/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFile / order order [jvm] Content open override val order : Int","title":"order   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/order/#order","text":"[jvm] Content open override val order : Int","title":"order"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/version/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFile / version version [jvm] Content val version : Int","title":"version   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/version/#version","text":"[jvm] Content val version : Int","title":"version"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFileType MigrationFileType [jvm] object MigrationFileType : LanguageFileType Functions Name Summary extractCharsetFromFileContent [jvm] Content open fun extractCharsetFromFileContent (@Nullable()p0: @Nullable()Project?, @Nullable()p1: @Nullable()VirtualFile?, @NotNull()p2: @NotNull() CharSequence ): Charset ~~open~~ ~~fun~~ ~~extractCharsetFromFileContent~~ ~~(~~@Nullable()~~p0~~~~:~~ @Nullable()Project?~~,~~ @Nullable()~~p1~~~~:~~ @Nullable()VirtualFile?~~,~~ @NotNull()~~p2~~~~:~~ @NotNull() String ~~)~~~~:~~ Charset getCharset [jvm] Content open override fun getCharset (@NotNull()p0: @NotNull()VirtualFile, p1: ByteArray ): String ? getDefaultExtension [jvm] Content open override fun getDefaultExtension (): String getDescription [jvm] Content open override fun getDescription (): String getDisplayName [jvm] Content @NotNull() open fun getDisplayName (): @NotNull() String getIcon [jvm] Content open override fun getIcon (): @NotNull() Icon getLanguage [jvm] Content @NotNull() fun getLanguage (): @NotNull()Language getName [jvm] Content open override fun getName (): String isBinary [jvm] Content override fun isBinary (): Boolean isJVMDebuggingSupported [jvm] Content ~~open~~ ~~fun~~ ~~isJVMDebuggingSupported~~ ~~(~~~~)~~~~:~~ Boolean isReadOnly [jvm] Content open override fun isReadOnly (): Boolean isSecondary [jvm] Content open fun isSecondary (): Boolean Properties Name Summary EXTENSION [jvm] const val EXTENSION : String","title":"MigrationFileType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/#migrationfiletype","text":"[jvm] object MigrationFileType : LanguageFileType","title":"MigrationFileType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/#functions","text":"Name Summary extractCharsetFromFileContent [jvm] Content open fun extractCharsetFromFileContent (@Nullable()p0: @Nullable()Project?, @Nullable()p1: @Nullable()VirtualFile?, @NotNull()p2: @NotNull() CharSequence ): Charset ~~open~~ ~~fun~~ ~~extractCharsetFromFileContent~~ ~~(~~@Nullable()~~p0~~~~:~~ @Nullable()Project?~~,~~ @Nullable()~~p1~~~~:~~ @Nullable()VirtualFile?~~,~~ @NotNull()~~p2~~~~:~~ @NotNull() String ~~)~~~~:~~ Charset getCharset [jvm] Content open override fun getCharset (@NotNull()p0: @NotNull()VirtualFile, p1: ByteArray ): String ? getDefaultExtension [jvm] Content open override fun getDefaultExtension (): String getDescription [jvm] Content open override fun getDescription (): String getDisplayName [jvm] Content @NotNull() open fun getDisplayName (): @NotNull() String getIcon [jvm] Content open override fun getIcon (): @NotNull() Icon getLanguage [jvm] Content @NotNull() fun getLanguage (): @NotNull()Language getName [jvm] Content open override fun getName (): String isBinary [jvm] Content override fun isBinary (): Boolean isJVMDebuggingSupported [jvm] Content ~~open~~ ~~fun~~ ~~isJVMDebuggingSupported~~ ~~(~~~~)~~~~:~~ Boolean isReadOnly [jvm] Content open override fun isReadOnly (): Boolean isSecondary [jvm] Content open fun isSecondary (): Boolean","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/#properties","text":"Name Summary EXTENSION [jvm] const val EXTENSION : String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/-e-x-t-e-n-s-i-o-n/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFileType / EXTENSION EXTENSION [jvm] Content const val EXTENSION : String","title":"EXTENSION   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/-e-x-t-e-n-s-i-o-n/#extension","text":"[jvm] Content const val EXTENSION : String","title":"EXTENSION"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/get-default-extension/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFileType / getDefaultExtension getDefaultExtension [jvm] Content open override fun getDefaultExtension (): String","title":"getDefaultExtension   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/get-default-extension/#getdefaultextension","text":"[jvm] Content open override fun getDefaultExtension (): String","title":"getDefaultExtension"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/get-description/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFileType / getDescription getDescription [jvm] Content open override fun getDescription (): String","title":"getDescription   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/get-description/#getdescription","text":"[jvm] Content open override fun getDescription (): String","title":"getDescription"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/get-icon/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFileType / getIcon getIcon [jvm] Content open override fun getIcon (): @NotNull() Icon","title":"getIcon   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/get-icon/#geticon","text":"[jvm] Content open override fun getIcon (): @NotNull() Icon","title":"getIcon"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/get-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFileType / getName getName [jvm] Content open override fun getName (): String","title":"getName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/get-name/#getname","text":"[jvm] Content open override fun getName (): String","title":"getName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-language/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationLanguage MigrationLanguage [jvm] object MigrationLanguage : Language Functions Name Summary changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean clearUserData [jvm] Content open fun clearUserData () clone [jvm] Content open fun clone (): Any copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) findMyFileType [jvm] Content @ApiStatus.Internal() @Nullable() open fun findMyFileType (p0: Array ): @Nullable()LanguageFileType? getAssociatedFileType [jvm] Content @Nullable() open fun getAssociatedFileType (): @Nullable()LanguageFileType? getBaseLanguage [jvm] Content @Nullable() open fun getBaseLanguage (): @Nullable()Language? getCopyableUserData [jvm] Content open fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T getDialects [jvm] Content @NotNull() open fun getDialects (): @NotNull() MutableList getDisplayName [jvm] Content @NotNull() open fun getDisplayName (): @NotNull() String getID [jvm] Content @NotNull() open fun getID (): @NotNull() String getMimeTypes [jvm] Content open fun getMimeTypes (): @NotNull() Array < String > getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap is [jvm] Content fun is (p0: Language): Boolean isCaseSensitive [jvm] Content open fun isCaseSensitive (): Boolean isKindOf [jvm] Content fun isKindOf (p0: Language): Boolean fun isKindOf (@NotNull()p0: @NotNull() String ): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean putCopyableUserData [jvm] Content open fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T replace [jvm] Content open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) toString [jvm] Content open override fun toString (): String unregisterDialect [jvm] Content @ApiStatus.Internal() open fun unregisterDialect (p0: Language)","title":"MigrationLanguage   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-language/#migrationlanguage","text":"[jvm] object MigrationLanguage : Language","title":"MigrationLanguage"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-language/#functions","text":"Name Summary changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean clearUserData [jvm] Content open fun clearUserData () clone [jvm] Content open fun clone (): Any copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) findMyFileType [jvm] Content @ApiStatus.Internal() @Nullable() open fun findMyFileType (p0: Array ): @Nullable()LanguageFileType? getAssociatedFileType [jvm] Content @Nullable() open fun getAssociatedFileType (): @Nullable()LanguageFileType? getBaseLanguage [jvm] Content @Nullable() open fun getBaseLanguage (): @Nullable()Language? getCopyableUserData [jvm] Content open fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T getDialects [jvm] Content @NotNull() open fun getDialects (): @NotNull() MutableList getDisplayName [jvm] Content @NotNull() open fun getDisplayName (): @NotNull() String getID [jvm] Content @NotNull() open fun getID (): @NotNull() String getMimeTypes [jvm] Content open fun getMimeTypes (): @NotNull() Array < String > getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap is [jvm] Content fun is (p0: Language): Boolean isCaseSensitive [jvm] Content open fun isCaseSensitive (): Boolean isKindOf [jvm] Content fun isKindOf (p0: Language): Boolean fun isKindOf (@NotNull()p0: @NotNull() String ): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean putCopyableUserData [jvm] Content open fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T replace [jvm] Content open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) toString [jvm] Content open override fun toString (): String unregisterDialect [jvm] Content @ApiStatus.Internal() open fun unregisterDialect (p0: Language)","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationParserDefinition MigrationParserDefinition [jvm] class MigrationParserDefinition : SqlParserDefinition Types Name Summary Companion [jvm] Content object Companion Functions Name Summary createElement [jvm] Content open override fun createElement (node: ASTNode): PsiElement createFile [jvm] Content open override fun createFile (viewProvider: FileViewProvider): MigrationFile createLexer [jvm] Content open override fun createLexer (project: Project): Lexer createParser [jvm] Content open override fun createParser (project: Project): SqlParser getCommentTokens [jvm] Content open override fun getCommentTokens (): TokenSet getFileNodeType [jvm] Content open override fun getFileNodeType (): ILightStubFileElementType > getLanguage [jvm] Content open override fun getLanguage (): SqlDelightLanguage getStringLiteralElements [jvm] Content open override fun getStringLiteralElements (): TokenSet getWhitespaceTokens [jvm] Content open override fun getWhitespaceTokens (): TokenSet spaceExistanceTypeBetweenTokens [jvm] Content ~~open~~ ~~fun~~ ~~spaceExistanceTypeBetweenTokens~~ ~~(~~~~p0~~~~:~~ ASTNode~~,~~ ~~p1~~~~:~~ ASTNode~~)~~~~:~~ ParserDefinition.SpaceRequirements spaceExistenceTypeBetweenTokens [jvm] Content open override fun spaceExistenceTypeBetweenTokens (p0: ASTNode, p1: ASTNode): ParserDefinition.SpaceRequirements","title":"MigrationParserDefinition   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/#migrationparserdefinition","text":"[jvm] class MigrationParserDefinition : SqlParserDefinition","title":"MigrationParserDefinition"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/#functions","text":"Name Summary createElement [jvm] Content open override fun createElement (node: ASTNode): PsiElement createFile [jvm] Content open override fun createFile (viewProvider: FileViewProvider): MigrationFile createLexer [jvm] Content open override fun createLexer (project: Project): Lexer createParser [jvm] Content open override fun createParser (project: Project): SqlParser getCommentTokens [jvm] Content open override fun getCommentTokens (): TokenSet getFileNodeType [jvm] Content open override fun getFileNodeType (): ILightStubFileElementType > getLanguage [jvm] Content open override fun getLanguage (): SqlDelightLanguage getStringLiteralElements [jvm] Content open override fun getStringLiteralElements (): TokenSet getWhitespaceTokens [jvm] Content open override fun getWhitespaceTokens (): TokenSet spaceExistanceTypeBetweenTokens [jvm] Content ~~open~~ ~~fun~~ ~~spaceExistanceTypeBetweenTokens~~ ~~(~~~~p0~~~~:~~ ASTNode~~,~~ ~~p1~~~~:~~ ASTNode~~)~~~~:~~ ParserDefinition.SpaceRequirements spaceExistenceTypeBetweenTokens [jvm] Content open override fun spaceExistenceTypeBetweenTokens (p0: ASTNode, p1: ASTNode): ParserDefinition.SpaceRequirements","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/-migration-parser-definition/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationParserDefinition / MigrationParserDefinition MigrationParserDefinition [jvm] Content fun MigrationParserDefinition ()","title":"MigrationParserDefinition   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/-migration-parser-definition/#migrationparserdefinition","text":"[jvm] Content fun MigrationParserDefinition ()","title":"MigrationParserDefinition"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/create-file/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationParserDefinition / createFile createFile [jvm] Content open override fun createFile (viewProvider: FileViewProvider): MigrationFile","title":"createFile   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/create-file/#createfile","text":"[jvm] Content open override fun createFile (viewProvider: FileViewProvider): MigrationFile","title":"createFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/create-parser/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationParserDefinition / createParser createParser [jvm] Content open override fun createParser (project: Project): SqlParser","title":"createParser   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/create-parser/#createparser","text":"[jvm] Content open override fun createParser (project: Project): SqlParser","title":"createParser"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/get-file-node-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationParserDefinition / getFileNodeType getFileNodeType [jvm] Content open override fun getFileNodeType (): ILightStubFileElementType >","title":"getFileNodeType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/get-file-node-type/#getfilenodetype","text":"[jvm] Content open override fun getFileNodeType (): ILightStubFileElementType >","title":"getFileNodeType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/get-language/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationParserDefinition / getLanguage getLanguage [jvm] Content open override fun getLanguage (): SqlDelightLanguage","title":"getLanguage   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/get-language/#getlanguage","text":"[jvm] Content open override fun getLanguage (): SqlDelightLanguage","title":"getLanguage"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/-companion/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationParserDefinition / Companion Companion [jvm] object Companion","title":"Companion   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFile SqlDelightFile [jvm] abstract class SqlDelightFile ( viewProvider : FileViewProvider, language : Language) : SqlFileBase Functions Name Summary accept [jvm] Content open override fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content open override fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content open override fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content open override fun addAfter (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addBefore [jvm] Content open override fun addBefore (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addRange [jvm] Content open override fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content open override fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content open override fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement assertReadAccessAllowed [jvm] Content open fun assertReadAccessAllowed () beforeAstChange [jvm] Content fun beforeAstChange () calcStubTree [jvm] Content @NotNull() open fun calcStubTree (): @NotNull()StubTree calcTreeElement [jvm] Content @NotNull() fun calcTreeElement (): @NotNull()FileElement canNavigate [jvm] Content open override fun canNavigate (): Boolean canNavigateToSource [jvm] Content open override fun canNavigateToSource (): Boolean changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean checkAdd [jvm] Content override fun checkAdd (@NotNull()p0: @NotNull()PsiElement) checkDelete [jvm] Content open override fun checkDelete () checkSetName [jvm] Content open override fun checkSetName (p0: String ) clearCaches [jvm] Content open override fun clearCaches () clearContent [jvm] Content fun clearContent (p0: String ) clearUserData [jvm] Content open fun clearUserData () clone [jvm] Content open override fun clone (): PsiFileImpl cloneImpl [jvm] Content open fun cloneImpl (p0: FileElement): PsiFileImpl computeBaseIcon [jvm] Content open fun computeBaseIcon (p0: Int ): Icon copy [jvm] Content override fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) createContentLeafElement [jvm] Content open fun createContentLeafElement (p0: CharSequence ): TreeElement createFileElement [jvm] Content @NotNull() open fun createFileElement (p0: CharSequence ): @NotNull()FileElement delete [jvm] Content open override fun delete () deleteChildRange [jvm] Content open override fun deleteChildRange (p0: PsiElement, p1: PsiElement) derefStub [jvm] Content @Nullable() open fun derefStub (): @Nullable()StubTree? derefTreeElement [jvm] Content open fun derefTreeElement (): FileElement findChildByClass [jvm] Content @Nullable() open fun < T : Any > findChildByClass (p0: Class < T >): @Nullable() T ? findChildrenByClass [jvm] Content open fun < T : Any > findChildrenByClass (p0: Class < T >): @NotNull() Array < T > findElementAt [jvm] Content open override fun findElementAt (p0: Int ): PsiElement? findReferenceAt [jvm] Content open override fun findReferenceAt (p0: Int ): PsiReference? getAdjustedBaseIcon [jvm] Content open fun getAdjustedBaseIcon (p0: Icon , p1: Int ): Icon getBaseIcon [jvm] Content open fun getBaseIcon (): Icon getChildren [jvm] Content open override fun getChildren (): @NotNull() Array getContainingDirectory [jvm] Content @Nullable() open override fun getContainingDirectory (): @Nullable()PsiDirectory? getContainingFile [jvm] Content @NotNull() open override fun getContainingFile (): @NotNull()PsiFile getContentElementType [jvm] Content open fun getContentElementType (): IElementType getContext [jvm] Content open override fun getContext (): PsiElement? getCopyableUserData [jvm] Content open fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T getElementIcon [jvm] Content @Nullable() open fun getElementIcon (p0: Int ): @Nullable() Icon ? getElementTypeForStubBuilder [jvm] Content @Nullable() open fun getElementTypeForStubBuilder (): @Nullable()IStubFileElementType<PsiFileStub<*>>? getFileElementType [jvm] Content @Nullable() open override fun getFileElementType (): @Nullable()IFileElementType? getFileType [jvm] Content @NotNull() abstract fun getFileType (): @NotNull()FileType getFirstChild [jvm] Content open override fun getFirstChild (): PsiElement getGreenStub [jvm] Content @Nullable() fun getGreenStub (): @Nullable()StubElement ? getGreenStubTree [jvm] Content @Nullable() fun getGreenStubTree (): @Nullable()StubTree? getIcon [jvm] Content @Nullable() open override fun getIcon (p0: Int ): @Nullable() Icon ? getLanguage [jvm] Content @NotNull() override fun getLanguage (): @NotNull()Language getLastChild [jvm] Content open override fun getLastChild (): PsiElement getManager [jvm] Content override fun getManager (): PsiManager getModificationStamp [jvm] Content open override fun getModificationStamp (): Long getName [jvm] Content @NotNull() open override fun getName (): @NotNull() String getNavigationElement [jvm] Content open override fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open override fun getNextSibling (): PsiElement getNode [jvm] Content @NotNull() open override fun getNode (): @NotNull()FileASTNode getOriginalElement [jvm] Content open override fun getOriginalElement (): PsiElement getOriginalFile [jvm] Content @NotNull() open override fun getOriginalFile (): @NotNull()PsiFile getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content open override fun getParent (): PsiDirectory? getParserDefinition [jvm] Content @NotNull() open fun getParserDefinition (): @NotNull()ParserDefinition getPresentation [jvm] Content open override fun getPresentation (): ItemPresentation? getPrevSibling [jvm] Content open override fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() override fun getProject (): @NotNull()Project getPsiRoots [jvm] Content open override fun getPsiRoots (): @NotNull() Array getReference [jvm] Content open override fun getReference (): PsiReference? getReferences [jvm] Content open override fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() open override fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content open override fun getStartOffsetInParent (): Int getStub [jvm] Content @Nullable() open fun getStub (): @Nullable()StubElement ? getStubbedSpine [jvm] Content @NotNull() open override fun getStubbedSpine (): @NotNull()StubbedSpine getStubTree [jvm] Content @Nullable() open override fun getStubTree (): @Nullable()StubTree? getText [jvm] Content open override fun getText (): String getTextLength [jvm] Content open override fun getTextLength (): Int getTextOffset [jvm] Content open override fun getTextOffset (): Int getTextRange [jvm] Content open override fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getTreeElement [jvm] Content @Nullable() open fun getTreeElement (): @Nullable()FileElement? getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap getUseScope [jvm] Content @NotNull() open override fun getUseScope (): @NotNull()SearchScope getViewProvider [jvm] Content @NotNull() open override fun getViewProvider (): @NotNull()FileViewProvider getVirtualFile [jvm] Content open override fun getVirtualFile (): VirtualFile? init [jvm] Content open fun init (@NotNull()p0: @NotNull()IElementType, p1: IElementType) isContentsLoaded [jvm] Content open override fun isContentsLoaded (): Boolean isDirectory [jvm] Content open override fun isDirectory (): Boolean isEquivalentTo [jvm] Content open override fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content open override fun isPhysical (): Boolean isTemplateDataFile [jvm] Content open fun isTemplateDataFile (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open override fun isValid (): Boolean isVisibilitySupported [jvm] Content open fun isVisibilitySupported (): Boolean isWritable [jvm] Content open override fun isWritable (): Boolean markInvalidated [jvm] Content override fun markInvalidated () navigate [jvm] Content open override fun navigate (p0: Boolean ) onContentReload [jvm] Content open override fun onContentReload () processChildren [jvm] Content open override fun processChildren (@NotNull()p0: @NotNull()PsiElementProcessor ): Boolean processDeclarations [jvm] Content open override fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, p2: PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ) putInfo [jvm] Content open override fun putInfo (@NotNull()p0: @NotNull() MutableMap < String , String >) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T rebuildStub [jvm] Content fun rebuildStub () replace [jvm] Content open override fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean setContentElementType [jvm] Content open fun setContentElementType (p0: IElementType) setName [jvm] Content open override fun setName (@NotNull()p0: @NotNull() String ): PsiElement setOriginalFile [jvm] Content open fun setOriginalFile (@NotNull()p0: @NotNull()PsiFile) setTreeElementPointer [jvm] Content open fun setTreeElementPointer (@Nullable()p0: @Nullable()FileElement?) setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) subtreeChanged [jvm] Content open override fun subtreeChanged () tables [jvm] Content fun tables (includeAll: Boolean ): Collection tablesAvailable [jvm] Content fun tablesAvailable (child: PsiElement): List textContains [jvm] Content open override fun textContains (p0: Char ): Boolean textMatches [jvm] Content open override fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean open override fun textMatches (@NotNull()p0: @NotNull() CharSequence ): Boolean textToCharArray [jvm] Content open override fun textToCharArray (): CharArray toString [jvm] Content open override fun toString (): String triggers [jvm] Content fun triggers (sqlStmtElement: PsiElement?): Collection Properties Name Summary generatedDirectories [jvm] val generatedDirectories : List < String >? myContentElementType [jvm] val myContentElementType : IElementType myManager [jvm] val myManager : PsiManagerEx myOriginalFile [jvm] val myOriginalFile : PsiFile order [jvm] abstract val order : Int ? sqlStmtList [jvm] val sqlStmtList : SqlStmtList? Inheritors Name MigrationFile SqlDelightQueriesFile","title":"SqlDelightFile   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/#sqldelightfile","text":"[jvm] abstract class SqlDelightFile ( viewProvider : FileViewProvider, language : Language) : SqlFileBase","title":"SqlDelightFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/#functions","text":"Name Summary accept [jvm] Content open override fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content open override fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content open override fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content open override fun addAfter (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addBefore [jvm] Content open override fun addBefore (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addRange [jvm] Content open override fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content open override fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content open override fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement assertReadAccessAllowed [jvm] Content open fun assertReadAccessAllowed () beforeAstChange [jvm] Content fun beforeAstChange () calcStubTree [jvm] Content @NotNull() open fun calcStubTree (): @NotNull()StubTree calcTreeElement [jvm] Content @NotNull() fun calcTreeElement (): @NotNull()FileElement canNavigate [jvm] Content open override fun canNavigate (): Boolean canNavigateToSource [jvm] Content open override fun canNavigateToSource (): Boolean changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean checkAdd [jvm] Content override fun checkAdd (@NotNull()p0: @NotNull()PsiElement) checkDelete [jvm] Content open override fun checkDelete () checkSetName [jvm] Content open override fun checkSetName (p0: String ) clearCaches [jvm] Content open override fun clearCaches () clearContent [jvm] Content fun clearContent (p0: String ) clearUserData [jvm] Content open fun clearUserData () clone [jvm] Content open override fun clone (): PsiFileImpl cloneImpl [jvm] Content open fun cloneImpl (p0: FileElement): PsiFileImpl computeBaseIcon [jvm] Content open fun computeBaseIcon (p0: Int ): Icon copy [jvm] Content override fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) createContentLeafElement [jvm] Content open fun createContentLeafElement (p0: CharSequence ): TreeElement createFileElement [jvm] Content @NotNull() open fun createFileElement (p0: CharSequence ): @NotNull()FileElement delete [jvm] Content open override fun delete () deleteChildRange [jvm] Content open override fun deleteChildRange (p0: PsiElement, p1: PsiElement) derefStub [jvm] Content @Nullable() open fun derefStub (): @Nullable()StubTree? derefTreeElement [jvm] Content open fun derefTreeElement (): FileElement findChildByClass [jvm] Content @Nullable() open fun < T : Any > findChildByClass (p0: Class < T >): @Nullable() T ? findChildrenByClass [jvm] Content open fun < T : Any > findChildrenByClass (p0: Class < T >): @NotNull() Array < T > findElementAt [jvm] Content open override fun findElementAt (p0: Int ): PsiElement? findReferenceAt [jvm] Content open override fun findReferenceAt (p0: Int ): PsiReference? getAdjustedBaseIcon [jvm] Content open fun getAdjustedBaseIcon (p0: Icon , p1: Int ): Icon getBaseIcon [jvm] Content open fun getBaseIcon (): Icon getChildren [jvm] Content open override fun getChildren (): @NotNull() Array getContainingDirectory [jvm] Content @Nullable() open override fun getContainingDirectory (): @Nullable()PsiDirectory? getContainingFile [jvm] Content @NotNull() open override fun getContainingFile (): @NotNull()PsiFile getContentElementType [jvm] Content open fun getContentElementType (): IElementType getContext [jvm] Content open override fun getContext (): PsiElement? getCopyableUserData [jvm] Content open fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T getElementIcon [jvm] Content @Nullable() open fun getElementIcon (p0: Int ): @Nullable() Icon ? getElementTypeForStubBuilder [jvm] Content @Nullable() open fun getElementTypeForStubBuilder (): @Nullable()IStubFileElementType<PsiFileStub<*>>? getFileElementType [jvm] Content @Nullable() open override fun getFileElementType (): @Nullable()IFileElementType? getFileType [jvm] Content @NotNull() abstract fun getFileType (): @NotNull()FileType getFirstChild [jvm] Content open override fun getFirstChild (): PsiElement getGreenStub [jvm] Content @Nullable() fun getGreenStub (): @Nullable()StubElement ? getGreenStubTree [jvm] Content @Nullable() fun getGreenStubTree (): @Nullable()StubTree? getIcon [jvm] Content @Nullable() open override fun getIcon (p0: Int ): @Nullable() Icon ? getLanguage [jvm] Content @NotNull() override fun getLanguage (): @NotNull()Language getLastChild [jvm] Content open override fun getLastChild (): PsiElement getManager [jvm] Content override fun getManager (): PsiManager getModificationStamp [jvm] Content open override fun getModificationStamp (): Long getName [jvm] Content @NotNull() open override fun getName (): @NotNull() String getNavigationElement [jvm] Content open override fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open override fun getNextSibling (): PsiElement getNode [jvm] Content @NotNull() open override fun getNode (): @NotNull()FileASTNode getOriginalElement [jvm] Content open override fun getOriginalElement (): PsiElement getOriginalFile [jvm] Content @NotNull() open override fun getOriginalFile (): @NotNull()PsiFile getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content open override fun getParent (): PsiDirectory? getParserDefinition [jvm] Content @NotNull() open fun getParserDefinition (): @NotNull()ParserDefinition getPresentation [jvm] Content open override fun getPresentation (): ItemPresentation? getPrevSibling [jvm] Content open override fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() override fun getProject (): @NotNull()Project getPsiRoots [jvm] Content open override fun getPsiRoots (): @NotNull() Array getReference [jvm] Content open override fun getReference (): PsiReference? getReferences [jvm] Content open override fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() open override fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content open override fun getStartOffsetInParent (): Int getStub [jvm] Content @Nullable() open fun getStub (): @Nullable()StubElement ? getStubbedSpine [jvm] Content @NotNull() open override fun getStubbedSpine (): @NotNull()StubbedSpine getStubTree [jvm] Content @Nullable() open override fun getStubTree (): @Nullable()StubTree? getText [jvm] Content open override fun getText (): String getTextLength [jvm] Content open override fun getTextLength (): Int getTextOffset [jvm] Content open override fun getTextOffset (): Int getTextRange [jvm] Content open override fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getTreeElement [jvm] Content @Nullable() open fun getTreeElement (): @Nullable()FileElement? getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap getUseScope [jvm] Content @NotNull() open override fun getUseScope (): @NotNull()SearchScope getViewProvider [jvm] Content @NotNull() open override fun getViewProvider (): @NotNull()FileViewProvider getVirtualFile [jvm] Content open override fun getVirtualFile (): VirtualFile? init [jvm] Content open fun init (@NotNull()p0: @NotNull()IElementType, p1: IElementType) isContentsLoaded [jvm] Content open override fun isContentsLoaded (): Boolean isDirectory [jvm] Content open override fun isDirectory (): Boolean isEquivalentTo [jvm] Content open override fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content open override fun isPhysical (): Boolean isTemplateDataFile [jvm] Content open fun isTemplateDataFile (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open override fun isValid (): Boolean isVisibilitySupported [jvm] Content open fun isVisibilitySupported (): Boolean isWritable [jvm] Content open override fun isWritable (): Boolean markInvalidated [jvm] Content override fun markInvalidated () navigate [jvm] Content open override fun navigate (p0: Boolean ) onContentReload [jvm] Content open override fun onContentReload () processChildren [jvm] Content open override fun processChildren (@NotNull()p0: @NotNull()PsiElementProcessor ): Boolean processDeclarations [jvm] Content open override fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, p2: PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ) putInfo [jvm] Content open override fun putInfo (@NotNull()p0: @NotNull() MutableMap < String , String >) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T rebuildStub [jvm] Content fun rebuildStub () replace [jvm] Content open override fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean setContentElementType [jvm] Content open fun setContentElementType (p0: IElementType) setName [jvm] Content open override fun setName (@NotNull()p0: @NotNull() String ): PsiElement setOriginalFile [jvm] Content open fun setOriginalFile (@NotNull()p0: @NotNull()PsiFile) setTreeElementPointer [jvm] Content open fun setTreeElementPointer (@Nullable()p0: @Nullable()FileElement?) setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) subtreeChanged [jvm] Content open override fun subtreeChanged () tables [jvm] Content fun tables (includeAll: Boolean ): Collection tablesAvailable [jvm] Content fun tablesAvailable (child: PsiElement): List textContains [jvm] Content open override fun textContains (p0: Char ): Boolean textMatches [jvm] Content open override fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean open override fun textMatches (@NotNull()p0: @NotNull() CharSequence ): Boolean textToCharArray [jvm] Content open override fun textToCharArray (): CharArray toString [jvm] Content open override fun toString (): String triggers [jvm] Content fun triggers (sqlStmtElement: PsiElement?): Collection","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/#properties","text":"Name Summary generatedDirectories [jvm] val generatedDirectories : List < String >? myContentElementType [jvm] val myContentElementType : IElementType myManager [jvm] val myManager : PsiManagerEx myOriginalFile [jvm] val myOriginalFile : PsiFile order [jvm] abstract val order : Int ? sqlStmtList [jvm] val sqlStmtList : SqlStmtList?","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/#inheritors","text":"Name MigrationFile SqlDelightQueriesFile","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/-sql-delight-file/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFile / SqlDelightFile SqlDelightFile [jvm] Content fun SqlDelightFile (viewProvider: FileViewProvider, language: Language)","title":"SqlDelightFile   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/-sql-delight-file/#sqldelightfile","text":"[jvm] Content fun SqlDelightFile (viewProvider: FileViewProvider, language: Language)","title":"SqlDelightFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/generated-directories/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFile / generatedDirectories generatedDirectories [jvm] Content val generatedDirectories : List < String >?","title":"generatedDirectories   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/generated-directories/#generateddirectories","text":"[jvm] Content val generatedDirectories : List < String >?","title":"generatedDirectories"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/get-virtual-file/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFile / getVirtualFile getVirtualFile [jvm] Content open override fun getVirtualFile (): VirtualFile?","title":"getVirtualFile   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/get-virtual-file/#getvirtualfile","text":"[jvm] Content open override fun getVirtualFile (): VirtualFile?","title":"getVirtualFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFileType SqlDelightFileType [jvm] object SqlDelightFileType : LanguageFileType Functions Name Summary extractCharsetFromFileContent [jvm] Content open fun extractCharsetFromFileContent (@Nullable()p0: @Nullable()Project?, @Nullable()p1: @Nullable()VirtualFile?, @NotNull()p2: @NotNull() CharSequence ): Charset ~~open~~ ~~fun~~ ~~extractCharsetFromFileContent~~ ~~(~~@Nullable()~~p0~~~~:~~ @Nullable()Project?~~,~~ @Nullable()~~p1~~~~:~~ @Nullable()VirtualFile?~~,~~ @NotNull()~~p2~~~~:~~ @NotNull() String ~~)~~~~:~~ Charset getCharset [jvm] Content open override fun getCharset (@NotNull()p0: @NotNull()VirtualFile, p1: ByteArray ): String ? getDefaultExtension [jvm] Content open override fun getDefaultExtension (): String getDescription [jvm] Content open override fun getDescription (): String getDisplayName [jvm] Content @NotNull() open fun getDisplayName (): @NotNull() String getIcon [jvm] Content open override fun getIcon (): @NotNull() Icon getLanguage [jvm] Content @NotNull() fun getLanguage (): @NotNull()Language getName [jvm] Content open override fun getName (): String isBinary [jvm] Content override fun isBinary (): Boolean isJVMDebuggingSupported [jvm] Content ~~open~~ ~~fun~~ ~~isJVMDebuggingSupported~~ ~~(~~~~)~~~~:~~ Boolean isReadOnly [jvm] Content open override fun isReadOnly (): Boolean isSecondary [jvm] Content open fun isSecondary (): Boolean Properties Name Summary EXTENSION [jvm] const val EXTENSION : String FOLDER_NAME [jvm] const val FOLDER_NAME : String","title":"SqlDelightFileType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/#sqldelightfiletype","text":"[jvm] object SqlDelightFileType : LanguageFileType","title":"SqlDelightFileType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/#functions","text":"Name Summary extractCharsetFromFileContent [jvm] Content open fun extractCharsetFromFileContent (@Nullable()p0: @Nullable()Project?, @Nullable()p1: @Nullable()VirtualFile?, @NotNull()p2: @NotNull() CharSequence ): Charset ~~open~~ ~~fun~~ ~~extractCharsetFromFileContent~~ ~~(~~@Nullable()~~p0~~~~:~~ @Nullable()Project?~~,~~ @Nullable()~~p1~~~~:~~ @Nullable()VirtualFile?~~,~~ @NotNull()~~p2~~~~:~~ @NotNull() String ~~)~~~~:~~ Charset getCharset [jvm] Content open override fun getCharset (@NotNull()p0: @NotNull()VirtualFile, p1: ByteArray ): String ? getDefaultExtension [jvm] Content open override fun getDefaultExtension (): String getDescription [jvm] Content open override fun getDescription (): String getDisplayName [jvm] Content @NotNull() open fun getDisplayName (): @NotNull() String getIcon [jvm] Content open override fun getIcon (): @NotNull() Icon getLanguage [jvm] Content @NotNull() fun getLanguage (): @NotNull()Language getName [jvm] Content open override fun getName (): String isBinary [jvm] Content override fun isBinary (): Boolean isJVMDebuggingSupported [jvm] Content ~~open~~ ~~fun~~ ~~isJVMDebuggingSupported~~ ~~(~~~~)~~~~:~~ Boolean isReadOnly [jvm] Content open override fun isReadOnly (): Boolean isSecondary [jvm] Content open fun isSecondary (): Boolean","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/#properties","text":"Name Summary EXTENSION [jvm] const val EXTENSION : String FOLDER_NAME [jvm] const val FOLDER_NAME : String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/-e-x-t-e-n-s-i-o-n/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFileType / EXTENSION EXTENSION [jvm] Content const val EXTENSION : String","title":"EXTENSION   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/-e-x-t-e-n-s-i-o-n/#extension","text":"[jvm] Content const val EXTENSION : String","title":"EXTENSION"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/-f-o-l-d-e-r_-n-a-m-e/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFileType / FOLDER_NAME FOLDER_NAME [jvm] Content const val FOLDER_NAME : String","title":"FOLDER_NAME   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/-f-o-l-d-e-r_-n-a-m-e/#folder_name","text":"[jvm] Content const val FOLDER_NAME : String","title":"FOLDER_NAME"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/get-default-extension/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFileType / getDefaultExtension getDefaultExtension [jvm] Content open override fun getDefaultExtension (): String","title":"getDefaultExtension   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/get-default-extension/#getdefaultextension","text":"[jvm] Content open override fun getDefaultExtension (): String","title":"getDefaultExtension"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/get-description/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFileType / getDescription getDescription [jvm] Content open override fun getDescription (): String","title":"getDescription   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/get-description/#getdescription","text":"[jvm] Content open override fun getDescription (): String","title":"getDescription"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/get-icon/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFileType / getIcon getIcon [jvm] Content open override fun getIcon (): @NotNull() Icon","title":"getIcon   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/get-icon/#geticon","text":"[jvm] Content open override fun getIcon (): @NotNull() Icon","title":"getIcon"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/get-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFileType / getName getName [jvm] Content open override fun getName (): String","title":"getName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/get-name/#getname","text":"[jvm] Content open override fun getName (): String","title":"getName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-language/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightLanguage SqlDelightLanguage [jvm] object SqlDelightLanguage : Language Functions Name Summary changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean clearUserData [jvm] Content open fun clearUserData () clone [jvm] Content open fun clone (): Any copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) findMyFileType [jvm] Content @ApiStatus.Internal() @Nullable() open fun findMyFileType (p0: Array ): @Nullable()LanguageFileType? getAssociatedFileType [jvm] Content @Nullable() open fun getAssociatedFileType (): @Nullable()LanguageFileType? getBaseLanguage [jvm] Content @Nullable() open fun getBaseLanguage (): @Nullable()Language? getCopyableUserData [jvm] Content open fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T getDialects [jvm] Content @NotNull() open fun getDialects (): @NotNull() MutableList getDisplayName [jvm] Content @NotNull() open fun getDisplayName (): @NotNull() String getID [jvm] Content @NotNull() open fun getID (): @NotNull() String getMimeTypes [jvm] Content open fun getMimeTypes (): @NotNull() Array < String > getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap is [jvm] Content fun is (p0: Language): Boolean isCaseSensitive [jvm] Content open fun isCaseSensitive (): Boolean isKindOf [jvm] Content fun isKindOf (p0: Language): Boolean fun isKindOf (@NotNull()p0: @NotNull() String ): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean putCopyableUserData [jvm] Content open fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T replace [jvm] Content open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) toString [jvm] Content open override fun toString (): String unregisterDialect [jvm] Content @ApiStatus.Internal() open fun unregisterDialect (p0: Language)","title":"SqlDelightLanguage   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-language/#sqldelightlanguage","text":"[jvm] object SqlDelightLanguage : Language","title":"SqlDelightLanguage"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-language/#functions","text":"Name Summary changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean clearUserData [jvm] Content open fun clearUserData () clone [jvm] Content open fun clone (): Any copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) findMyFileType [jvm] Content @ApiStatus.Internal() @Nullable() open fun findMyFileType (p0: Array ): @Nullable()LanguageFileType? getAssociatedFileType [jvm] Content @Nullable() open fun getAssociatedFileType (): @Nullable()LanguageFileType? getBaseLanguage [jvm] Content @Nullable() open fun getBaseLanguage (): @Nullable()Language? getCopyableUserData [jvm] Content open fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T getDialects [jvm] Content @NotNull() open fun getDialects (): @NotNull() MutableList getDisplayName [jvm] Content @NotNull() open fun getDisplayName (): @NotNull() String getID [jvm] Content @NotNull() open fun getID (): @NotNull() String getMimeTypes [jvm] Content open fun getMimeTypes (): @NotNull() Array < String > getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap is [jvm] Content fun is (p0: Language): Boolean isCaseSensitive [jvm] Content open fun isCaseSensitive (): Boolean isKindOf [jvm] Content fun isKindOf (p0: Language): Boolean fun isKindOf (@NotNull()p0: @NotNull() String ): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean putCopyableUserData [jvm] Content open fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T replace [jvm] Content open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) toString [jvm] Content open override fun toString (): String unregisterDialect [jvm] Content @ApiStatus.Internal() open fun unregisterDialect (p0: Language)","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightParserDefinition SqlDelightParserDefinition [jvm] class SqlDelightParserDefinition : SqlParserDefinition Types Name Summary Companion [jvm] Content object Companion Functions Name Summary createElement [jvm] Content open override fun createElement (node: ASTNode): PsiElement createFile [jvm] Content open override fun createFile (viewProvider: FileViewProvider): SqlDelightQueriesFile createLexer [jvm] Content open override fun createLexer (project: Project): Lexer createParser [jvm] Content open override fun createParser (project: Project): SqlParser getCommentTokens [jvm] Content open override fun getCommentTokens (): TokenSet getFileNodeType [jvm] Content open override fun getFileNodeType (): ILightStubFileElementType > getLanguage [jvm] Content open override fun getLanguage (): SqlDelightLanguage getStringLiteralElements [jvm] Content open override fun getStringLiteralElements (): TokenSet getWhitespaceTokens [jvm] Content open override fun getWhitespaceTokens (): TokenSet spaceExistanceTypeBetweenTokens [jvm] Content ~~open~~ ~~fun~~ ~~spaceExistanceTypeBetweenTokens~~ ~~(~~~~p0~~~~:~~ ASTNode~~,~~ ~~p1~~~~:~~ ASTNode~~)~~~~:~~ ParserDefinition.SpaceRequirements spaceExistenceTypeBetweenTokens [jvm] Content open override fun spaceExistenceTypeBetweenTokens (p0: ASTNode, p1: ASTNode): ParserDefinition.SpaceRequirements","title":"SqlDelightParserDefinition   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/#sqldelightparserdefinition","text":"[jvm] class SqlDelightParserDefinition : SqlParserDefinition","title":"SqlDelightParserDefinition"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/#functions","text":"Name Summary createElement [jvm] Content open override fun createElement (node: ASTNode): PsiElement createFile [jvm] Content open override fun createFile (viewProvider: FileViewProvider): SqlDelightQueriesFile createLexer [jvm] Content open override fun createLexer (project: Project): Lexer createParser [jvm] Content open override fun createParser (project: Project): SqlParser getCommentTokens [jvm] Content open override fun getCommentTokens (): TokenSet getFileNodeType [jvm] Content open override fun getFileNodeType (): ILightStubFileElementType > getLanguage [jvm] Content open override fun getLanguage (): SqlDelightLanguage getStringLiteralElements [jvm] Content open override fun getStringLiteralElements (): TokenSet getWhitespaceTokens [jvm] Content open override fun getWhitespaceTokens (): TokenSet spaceExistanceTypeBetweenTokens [jvm] Content ~~open~~ ~~fun~~ ~~spaceExistanceTypeBetweenTokens~~ ~~(~~~~p0~~~~:~~ ASTNode~~,~~ ~~p1~~~~:~~ ASTNode~~)~~~~:~~ ParserDefinition.SpaceRequirements spaceExistenceTypeBetweenTokens [jvm] Content open override fun spaceExistenceTypeBetweenTokens (p0: ASTNode, p1: ASTNode): ParserDefinition.SpaceRequirements","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/-sql-delight-parser-definition/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightParserDefinition / SqlDelightParserDefinition SqlDelightParserDefinition [jvm] Content fun SqlDelightParserDefinition ()","title":"SqlDelightParserDefinition   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/-sql-delight-parser-definition/#sqldelightparserdefinition","text":"[jvm] Content fun SqlDelightParserDefinition ()","title":"SqlDelightParserDefinition"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/create-file/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightParserDefinition / createFile createFile [jvm] Content open override fun createFile (viewProvider: FileViewProvider): SqlDelightQueriesFile","title":"createFile   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/create-file/#createfile","text":"[jvm] Content open override fun createFile (viewProvider: FileViewProvider): SqlDelightQueriesFile","title":"createFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/create-parser/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightParserDefinition / createParser createParser [jvm] Content open override fun createParser (project: Project): SqlParser","title":"createParser   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/create-parser/#createparser","text":"[jvm] Content open override fun createParser (project: Project): SqlParser","title":"createParser"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/get-file-node-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightParserDefinition / getFileNodeType getFileNodeType [jvm] Content open override fun getFileNodeType (): ILightStubFileElementType >","title":"getFileNodeType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/get-file-node-type/#getfilenodetype","text":"[jvm] Content open override fun getFileNodeType (): ILightStubFileElementType >","title":"getFileNodeType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/get-language/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightParserDefinition / getLanguage getLanguage [jvm] Content open override fun getLanguage (): SqlDelightLanguage","title":"getLanguage   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/get-language/#getlanguage","text":"[jvm] Content open override fun getLanguage (): SqlDelightLanguage","title":"getLanguage"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/-companion/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightParserDefinition / Companion Companion [jvm] object Companion","title":"Companion   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile SqlDelightQueriesFile [jvm] class SqlDelightQueriesFile ( viewProvider : FileViewProvider) : SqlDelightFile , SqlAnnotatedElement Types Name Summary LabeledStatement [jvm] Content data class LabeledStatement ( identifier : StmtIdentifierMixin , statement : SqlStmt) Functions Name Summary accept [jvm] Content open override fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content open override fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content open override fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content open override fun addAfter (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addBefore [jvm] Content open override fun addBefore (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addRange [jvm] Content open override fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content open override fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content open override fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder) assertReadAccessAllowed [jvm] Content open fun assertReadAccessAllowed () beforeAstChange [jvm] Content fun beforeAstChange () calcStubTree [jvm] Content @NotNull() open fun calcStubTree (): @NotNull()StubTree calcTreeElement [jvm] Content @NotNull() fun calcTreeElement (): @NotNull()FileElement canNavigate [jvm] Content open override fun canNavigate (): Boolean canNavigateToSource [jvm] Content open override fun canNavigateToSource (): Boolean changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean checkAdd [jvm] Content override fun checkAdd (@NotNull()p0: @NotNull()PsiElement) checkDelete [jvm] Content open override fun checkDelete () checkSetName [jvm] Content open override fun checkSetName (p0: String ) clearCaches [jvm] Content open override fun clearCaches () clearContent [jvm] Content fun clearContent (p0: String ) clearUserData [jvm] Content open fun clearUserData () clone [jvm] Content open override fun clone (): PsiFileImpl cloneImpl [jvm] Content open fun cloneImpl (p0: FileElement): PsiFileImpl computeBaseIcon [jvm] Content open fun computeBaseIcon (p0: Int ): Icon copy [jvm] Content override fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) createContentLeafElement [jvm] Content open fun createContentLeafElement (p0: CharSequence ): TreeElement createFileElement [jvm] Content @NotNull() open fun createFileElement (p0: CharSequence ): @NotNull()FileElement delete [jvm] Content open override fun delete () deleteChildRange [jvm] Content open override fun deleteChildRange (p0: PsiElement, p1: PsiElement) derefStub [jvm] Content @Nullable() open fun derefStub (): @Nullable()StubTree? derefTreeElement [jvm] Content open fun derefTreeElement (): FileElement findChildByClass [jvm] Content @Nullable() open fun < T : Any > findChildByClass (p0: Class < T >): @Nullable() T ? findChildrenByClass [jvm] Content open fun < T : Any > findChildrenByClass (p0: Class < T >): @NotNull() Array < T > findElementAt [jvm] Content open override fun findElementAt (p0: Int ): PsiElement? findReferenceAt [jvm] Content open override fun findReferenceAt (p0: Int ): PsiReference? getAdjustedBaseIcon [jvm] Content open fun getAdjustedBaseIcon (p0: Icon , p1: Int ): Icon getBaseIcon [jvm] Content open fun getBaseIcon (): Icon getChildren [jvm] Content open override fun getChildren (): @NotNull() Array getContainingDirectory [jvm] Content @Nullable() open override fun getContainingDirectory (): @Nullable()PsiDirectory? getContainingFile [jvm] Content @NotNull() open override fun getContainingFile (): @NotNull()PsiFile getContentElementType [jvm] Content open fun getContentElementType (): IElementType getContext [jvm] Content open override fun getContext (): PsiElement? getCopyableUserData [jvm] Content open fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T getElementIcon [jvm] Content @Nullable() open fun getElementIcon (p0: Int ): @Nullable() Icon ? getElementTypeForStubBuilder [jvm] Content @Nullable() open fun getElementTypeForStubBuilder (): @Nullable()IStubFileElementType<PsiFileStub<*>>? getFileElementType [jvm] Content @Nullable() open override fun getFileElementType (): @Nullable()IFileElementType? getFileType [jvm] Content open override fun getFileType (): SqlDelightFileType getFirstChild [jvm] Content open override fun getFirstChild (): PsiElement getGreenStub [jvm] Content @Nullable() fun getGreenStub (): @Nullable()StubElement ? getGreenStubTree [jvm] Content @Nullable() fun getGreenStubTree (): @Nullable()StubTree? getIcon [jvm] Content @Nullable() open override fun getIcon (p0: Int ): @Nullable() Icon ? getLanguage [jvm] Content @NotNull() override fun getLanguage (): @NotNull()Language getLastChild [jvm] Content open override fun getLastChild (): PsiElement getManager [jvm] Content override fun getManager (): PsiManager getModificationStamp [jvm] Content open override fun getModificationStamp (): Long getName [jvm] Content @NotNull() open override fun getName (): @NotNull() String getNavigationElement [jvm] Content open override fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open override fun getNextSibling (): PsiElement getNode [jvm] Content @NotNull() open override fun getNode (): @NotNull()FileASTNode getOriginalElement [jvm] Content open override fun getOriginalElement (): PsiElement getOriginalFile [jvm] Content @NotNull() open override fun getOriginalFile (): @NotNull()PsiFile getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content open override fun getParent (): PsiDirectory? getParserDefinition [jvm] Content @NotNull() open fun getParserDefinition (): @NotNull()ParserDefinition getPresentation [jvm] Content open override fun getPresentation (): ItemPresentation? getPrevSibling [jvm] Content open override fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() override fun getProject (): @NotNull()Project getPsiRoots [jvm] Content open override fun getPsiRoots (): @NotNull() Array getReference [jvm] Content open override fun getReference (): PsiReference? getReferences [jvm] Content open override fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() open override fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content open override fun getStartOffsetInParent (): Int getStub [jvm] Content @Nullable() open fun getStub (): @Nullable()StubElement ? getStubbedSpine [jvm] Content @NotNull() open override fun getStubbedSpine (): @NotNull()StubbedSpine getStubTree [jvm] Content @Nullable() open override fun getStubTree (): @Nullable()StubTree? getText [jvm] Content open override fun getText (): String getTextLength [jvm] Content open override fun getTextLength (): Int getTextOffset [jvm] Content open override fun getTextOffset (): Int getTextRange [jvm] Content open override fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getTreeElement [jvm] Content @Nullable() open fun getTreeElement (): @Nullable()FileElement? getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap getUseScope [jvm] Content @NotNull() open override fun getUseScope (): @NotNull()SearchScope getViewProvider [jvm] Content @NotNull() open override fun getViewProvider (): @NotNull()FileViewProvider getVirtualFile [jvm] Content open override fun getVirtualFile (): VirtualFile? init [jvm] Content open fun init (@NotNull()p0: @NotNull()IElementType, p1: IElementType) isContentsLoaded [jvm] Content open override fun isContentsLoaded (): Boolean isDirectory [jvm] Content open override fun isDirectory (): Boolean isEquivalentTo [jvm] Content open override fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content open override fun isPhysical (): Boolean isTemplateDataFile [jvm] Content open fun isTemplateDataFile (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open override fun isValid (): Boolean isVisibilitySupported [jvm] Content open fun isVisibilitySupported (): Boolean isWritable [jvm] Content open override fun isWritable (): Boolean iterateSqlFiles [jvm] Content fun iterateSqlFiles (block: ( SqlDelightQueriesFile ) -> Unit ) markInvalidated [jvm] Content override fun markInvalidated () navigate [jvm] Content open override fun navigate (p0: Boolean ) onContentReload [jvm] Content open override fun onContentReload () processChildren [jvm] Content open override fun processChildren (@NotNull()p0: @NotNull()PsiElementProcessor ): Boolean processDeclarations [jvm] Content open override fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, p2: PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ) putInfo [jvm] Content open override fun putInfo (@NotNull()p0: @NotNull() MutableMap < String , String >) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T rebuildStub [jvm] Content fun rebuildStub () replace [jvm] Content open override fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean setContentElementType [jvm] Content open fun setContentElementType (p0: IElementType) setName [jvm] Content open override fun setName (@NotNull()p0: @NotNull() String ): PsiElement setOriginalFile [jvm] Content open fun setOriginalFile (@NotNull()p0: @NotNull()PsiFile) setTreeElementPointer [jvm] Content open fun setTreeElementPointer (@Nullable()p0: @Nullable()FileElement?) setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) subtreeChanged [jvm] Content open override fun subtreeChanged () tables [jvm] Content fun tables (includeAll: Boolean ): Collection tablesAvailable [jvm] Content fun tablesAvailable (child: PsiElement): List textContains [jvm] Content open override fun textContains (p0: Char ): Boolean textMatches [jvm] Content open override fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean open override fun textMatches (@NotNull()p0: @NotNull() CharSequence ): Boolean textToCharArray [jvm] Content open override fun textToCharArray (): CharArray toString [jvm] Content open override fun toString (): String triggers [jvm] Content fun triggers (sqlStmtElement: PsiElement?): Collection Properties Name Summary generatedDirectories [jvm] val generatedDirectories : List < String >? myContentElementType [jvm] val myContentElementType : IElementType myManager [jvm] val myManager : PsiManagerEx myOriginalFile [jvm] val myOriginalFile : PsiFile order [jvm] open override val order : Nothing ? = null sqlStmtList [jvm] val sqlStmtList : SqlStmtList?","title":"SqlDelightQueriesFile   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/#sqldelightqueriesfile","text":"[jvm] class SqlDelightQueriesFile ( viewProvider : FileViewProvider) : SqlDelightFile , SqlAnnotatedElement","title":"SqlDelightQueriesFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/#types","text":"Name Summary LabeledStatement [jvm] Content data class LabeledStatement ( identifier : StmtIdentifierMixin , statement : SqlStmt)","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/#functions","text":"Name Summary accept [jvm] Content open override fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content open override fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content open override fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content open override fun addAfter (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addBefore [jvm] Content open override fun addBefore (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addRange [jvm] Content open override fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content open override fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content open override fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder) assertReadAccessAllowed [jvm] Content open fun assertReadAccessAllowed () beforeAstChange [jvm] Content fun beforeAstChange () calcStubTree [jvm] Content @NotNull() open fun calcStubTree (): @NotNull()StubTree calcTreeElement [jvm] Content @NotNull() fun calcTreeElement (): @NotNull()FileElement canNavigate [jvm] Content open override fun canNavigate (): Boolean canNavigateToSource [jvm] Content open override fun canNavigateToSource (): Boolean changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean checkAdd [jvm] Content override fun checkAdd (@NotNull()p0: @NotNull()PsiElement) checkDelete [jvm] Content open override fun checkDelete () checkSetName [jvm] Content open override fun checkSetName (p0: String ) clearCaches [jvm] Content open override fun clearCaches () clearContent [jvm] Content fun clearContent (p0: String ) clearUserData [jvm] Content open fun clearUserData () clone [jvm] Content open override fun clone (): PsiFileImpl cloneImpl [jvm] Content open fun cloneImpl (p0: FileElement): PsiFileImpl computeBaseIcon [jvm] Content open fun computeBaseIcon (p0: Int ): Icon copy [jvm] Content override fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) createContentLeafElement [jvm] Content open fun createContentLeafElement (p0: CharSequence ): TreeElement createFileElement [jvm] Content @NotNull() open fun createFileElement (p0: CharSequence ): @NotNull()FileElement delete [jvm] Content open override fun delete () deleteChildRange [jvm] Content open override fun deleteChildRange (p0: PsiElement, p1: PsiElement) derefStub [jvm] Content @Nullable() open fun derefStub (): @Nullable()StubTree? derefTreeElement [jvm] Content open fun derefTreeElement (): FileElement findChildByClass [jvm] Content @Nullable() open fun < T : Any > findChildByClass (p0: Class < T >): @Nullable() T ? findChildrenByClass [jvm] Content open fun < T : Any > findChildrenByClass (p0: Class < T >): @NotNull() Array < T > findElementAt [jvm] Content open override fun findElementAt (p0: Int ): PsiElement? findReferenceAt [jvm] Content open override fun findReferenceAt (p0: Int ): PsiReference? getAdjustedBaseIcon [jvm] Content open fun getAdjustedBaseIcon (p0: Icon , p1: Int ): Icon getBaseIcon [jvm] Content open fun getBaseIcon (): Icon getChildren [jvm] Content open override fun getChildren (): @NotNull() Array getContainingDirectory [jvm] Content @Nullable() open override fun getContainingDirectory (): @Nullable()PsiDirectory? getContainingFile [jvm] Content @NotNull() open override fun getContainingFile (): @NotNull()PsiFile getContentElementType [jvm] Content open fun getContentElementType (): IElementType getContext [jvm] Content open override fun getContext (): PsiElement? getCopyableUserData [jvm] Content open fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T getElementIcon [jvm] Content @Nullable() open fun getElementIcon (p0: Int ): @Nullable() Icon ? getElementTypeForStubBuilder [jvm] Content @Nullable() open fun getElementTypeForStubBuilder (): @Nullable()IStubFileElementType<PsiFileStub<*>>? getFileElementType [jvm] Content @Nullable() open override fun getFileElementType (): @Nullable()IFileElementType? getFileType [jvm] Content open override fun getFileType (): SqlDelightFileType getFirstChild [jvm] Content open override fun getFirstChild (): PsiElement getGreenStub [jvm] Content @Nullable() fun getGreenStub (): @Nullable()StubElement ? getGreenStubTree [jvm] Content @Nullable() fun getGreenStubTree (): @Nullable()StubTree? getIcon [jvm] Content @Nullable() open override fun getIcon (p0: Int ): @Nullable() Icon ? getLanguage [jvm] Content @NotNull() override fun getLanguage (): @NotNull()Language getLastChild [jvm] Content open override fun getLastChild (): PsiElement getManager [jvm] Content override fun getManager (): PsiManager getModificationStamp [jvm] Content open override fun getModificationStamp (): Long getName [jvm] Content @NotNull() open override fun getName (): @NotNull() String getNavigationElement [jvm] Content open override fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open override fun getNextSibling (): PsiElement getNode [jvm] Content @NotNull() open override fun getNode (): @NotNull()FileASTNode getOriginalElement [jvm] Content open override fun getOriginalElement (): PsiElement getOriginalFile [jvm] Content @NotNull() open override fun getOriginalFile (): @NotNull()PsiFile getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content open override fun getParent (): PsiDirectory? getParserDefinition [jvm] Content @NotNull() open fun getParserDefinition (): @NotNull()ParserDefinition getPresentation [jvm] Content open override fun getPresentation (): ItemPresentation? getPrevSibling [jvm] Content open override fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() override fun getProject (): @NotNull()Project getPsiRoots [jvm] Content open override fun getPsiRoots (): @NotNull() Array getReference [jvm] Content open override fun getReference (): PsiReference? getReferences [jvm] Content open override fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() open override fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content open override fun getStartOffsetInParent (): Int getStub [jvm] Content @Nullable() open fun getStub (): @Nullable()StubElement ? getStubbedSpine [jvm] Content @NotNull() open override fun getStubbedSpine (): @NotNull()StubbedSpine getStubTree [jvm] Content @Nullable() open override fun getStubTree (): @Nullable()StubTree? getText [jvm] Content open override fun getText (): String getTextLength [jvm] Content open override fun getTextLength (): Int getTextOffset [jvm] Content open override fun getTextOffset (): Int getTextRange [jvm] Content open override fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getTreeElement [jvm] Content @Nullable() open fun getTreeElement (): @Nullable()FileElement? getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap getUseScope [jvm] Content @NotNull() open override fun getUseScope (): @NotNull()SearchScope getViewProvider [jvm] Content @NotNull() open override fun getViewProvider (): @NotNull()FileViewProvider getVirtualFile [jvm] Content open override fun getVirtualFile (): VirtualFile? init [jvm] Content open fun init (@NotNull()p0: @NotNull()IElementType, p1: IElementType) isContentsLoaded [jvm] Content open override fun isContentsLoaded (): Boolean isDirectory [jvm] Content open override fun isDirectory (): Boolean isEquivalentTo [jvm] Content open override fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content open override fun isPhysical (): Boolean isTemplateDataFile [jvm] Content open fun isTemplateDataFile (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open override fun isValid (): Boolean isVisibilitySupported [jvm] Content open fun isVisibilitySupported (): Boolean isWritable [jvm] Content open override fun isWritable (): Boolean iterateSqlFiles [jvm] Content fun iterateSqlFiles (block: ( SqlDelightQueriesFile ) -> Unit ) markInvalidated [jvm] Content override fun markInvalidated () navigate [jvm] Content open override fun navigate (p0: Boolean ) onContentReload [jvm] Content open override fun onContentReload () processChildren [jvm] Content open override fun processChildren (@NotNull()p0: @NotNull()PsiElementProcessor ): Boolean processDeclarations [jvm] Content open override fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, p2: PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ) putInfo [jvm] Content open override fun putInfo (@NotNull()p0: @NotNull() MutableMap < String , String >) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T rebuildStub [jvm] Content fun rebuildStub () replace [jvm] Content open override fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean setContentElementType [jvm] Content open fun setContentElementType (p0: IElementType) setName [jvm] Content open override fun setName (@NotNull()p0: @NotNull() String ): PsiElement setOriginalFile [jvm] Content open fun setOriginalFile (@NotNull()p0: @NotNull()PsiFile) setTreeElementPointer [jvm] Content open fun setTreeElementPointer (@Nullable()p0: @Nullable()FileElement?) setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) subtreeChanged [jvm] Content open override fun subtreeChanged () tables [jvm] Content fun tables (includeAll: Boolean ): Collection tablesAvailable [jvm] Content fun tablesAvailable (child: PsiElement): List textContains [jvm] Content open override fun textContains (p0: Char ): Boolean textMatches [jvm] Content open override fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean open override fun textMatches (@NotNull()p0: @NotNull() CharSequence ): Boolean textToCharArray [jvm] Content open override fun textToCharArray (): CharArray toString [jvm] Content open override fun toString (): String triggers [jvm] Content fun triggers (sqlStmtElement: PsiElement?): Collection","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/#properties","text":"Name Summary generatedDirectories [jvm] val generatedDirectories : List < String >? myContentElementType [jvm] val myContentElementType : IElementType myManager [jvm] val myManager : PsiManagerEx myOriginalFile [jvm] val myOriginalFile : PsiFile order [jvm] open override val order : Nothing ? = null sqlStmtList [jvm] val sqlStmtList : SqlStmtList?","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-sql-delight-queries-file/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / SqlDelightQueriesFile SqlDelightQueriesFile [jvm] Content fun SqlDelightQueriesFile (viewProvider: FileViewProvider)","title":"SqlDelightQueriesFile   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-sql-delight-queries-file/#sqldelightqueriesfile","text":"[jvm] Content fun SqlDelightQueriesFile (viewProvider: FileViewProvider)","title":"SqlDelightQueriesFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/annotate/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / annotate annotate [jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder)","title":"annotate   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/annotate/#annotate","text":"[jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder)","title":"annotate"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/get-file-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / getFileType getFileType [jvm] Content open override fun getFileType (): SqlDelightFileType","title":"getFileType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/get-file-type/#getfiletype","text":"[jvm] Content open override fun getFileType (): SqlDelightFileType","title":"getFileType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/iterate-sql-files/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / iterateSqlFiles iterateSqlFiles [jvm] Content fun iterateSqlFiles (block: ( SqlDelightQueriesFile ) -> Unit )","title":"iterateSqlFiles   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/iterate-sql-files/#iteratesqlfiles","text":"[jvm] Content fun iterateSqlFiles (block: ( SqlDelightQueriesFile ) -> Unit )","title":"iterateSqlFiles"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/order/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / order order [jvm] Content open override val order : Nothing ? = null","title":"order   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/order/#order","text":"[jvm] Content open override val order : Nothing ? = null","title":"order"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / LabeledStatement LabeledStatement [jvm] data class LabeledStatement ( identifier : StmtIdentifierMixin , statement : SqlStmt) Properties Name Summary identifier [jvm] val identifier : StmtIdentifierMixin statement [jvm] val statement : SqlStmt","title":"LabeledStatement   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/#labeledstatement","text":"[jvm] data class LabeledStatement ( identifier : StmtIdentifierMixin , statement : SqlStmt)","title":"LabeledStatement"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/#properties","text":"Name Summary identifier [jvm] val identifier : StmtIdentifierMixin statement [jvm] val statement : SqlStmt","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/-labeled-statement/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / LabeledStatement / LabeledStatement LabeledStatement [jvm] Content fun LabeledStatement (identifier: StmtIdentifierMixin , statement: SqlStmt)","title":"LabeledStatement   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/-labeled-statement/#labeledstatement","text":"[jvm] Content fun LabeledStatement (identifier: StmtIdentifierMixin , statement: SqlStmt)","title":"LabeledStatement"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/identifier/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / LabeledStatement / identifier identifier [jvm] Content val identifier : StmtIdentifierMixin","title":"identifier   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/identifier/#identifier","text":"[jvm] Content val identifier : StmtIdentifierMixin","title":"identifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/statement/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / LabeledStatement / statement statement [jvm] Content val statement : SqlStmt","title":"statement   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/statement/#statement","text":"[jvm] Content val statement : SqlStmt","title":"statement"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi Package com.squareup.sqldelight.core.lang.psi Types Name Summary ClojureStmtListMixin [jvm] Content abstract class ClojureStmtListMixin ( node : ASTNode) : SqlCompositeElementImpl, SqlDelightStmtClojureStmtList ImportStmtMixin [jvm] Content abstract class ImportStmtMixin ( node : ASTNode) : ASTWrapperPsiElement, SqlDelightImportStmt , SqlAnnotatedElement InsertStmtValuesMixin [jvm] Content open class InsertStmtValuesMixin ( node : ASTNode) : SqlInsertStmtValuesImpl, SqlDelightInsertStmtValues JavaTypeMixin [jvm] Content abstract class JavaTypeMixin ( node : ASTNode) : ASTWrapperPsiElement StmtIdentifier [jvm] Content interface StmtIdentifier : PsiNamedElement StmtIdentifierMixin [jvm] Content abstract class StmtIdentifierMixin ( node : ASTNode) : ASTWrapperPsiElement, SqlDelightStmtIdentifier , SqlDelightStmtIdentifierClojure , SqlAnnotatedElement Functions Name Summary isColumnSameAs [jvm] Content fun SqlColumnName. isColumnSameAs (other: SqlColumnName): Boolean isTypeSameAs [jvm] Content fun SqlColumnName. isTypeSameAs (other: SqlColumnName): Boolean","title":"Package com.squareup.sqldelight.core.lang.psi   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/#package-comsquareupsqldelightcorelangpsi","text":"","title":"Package com.squareup.sqldelight.core.lang.psi"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/#types","text":"Name Summary ClojureStmtListMixin [jvm] Content abstract class ClojureStmtListMixin ( node : ASTNode) : SqlCompositeElementImpl, SqlDelightStmtClojureStmtList ImportStmtMixin [jvm] Content abstract class ImportStmtMixin ( node : ASTNode) : ASTWrapperPsiElement, SqlDelightImportStmt , SqlAnnotatedElement InsertStmtValuesMixin [jvm] Content open class InsertStmtValuesMixin ( node : ASTNode) : SqlInsertStmtValuesImpl, SqlDelightInsertStmtValues JavaTypeMixin [jvm] Content abstract class JavaTypeMixin ( node : ASTNode) : ASTWrapperPsiElement StmtIdentifier [jvm] Content interface StmtIdentifier : PsiNamedElement StmtIdentifierMixin [jvm] Content abstract class StmtIdentifierMixin ( node : ASTNode) : ASTWrapperPsiElement, SqlDelightStmtIdentifier , SqlDelightStmtIdentifierClojure , SqlAnnotatedElement","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/#functions","text":"Name Summary isColumnSameAs [jvm] Content fun SqlColumnName. isColumnSameAs (other: SqlColumnName): Boolean isTypeSameAs [jvm] Content fun SqlColumnName. isTypeSameAs (other: SqlColumnName): Boolean","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/is-column-same-as/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / isColumnSameAs isColumnSameAs [jvm] Content fun SqlColumnName. isColumnSameAs (other: SqlColumnName): Boolean","title":"isColumnSameAs   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/is-column-same-as/#iscolumnsameas","text":"[jvm] Content fun SqlColumnName. isColumnSameAs (other: SqlColumnName): Boolean","title":"isColumnSameAs"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/is-type-same-as/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / isTypeSameAs isTypeSameAs [jvm] Content fun SqlColumnName. isTypeSameAs (other: SqlColumnName): Boolean","title":"isTypeSameAs   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/is-type-same-as/#istypesameas","text":"[jvm] Content fun SqlColumnName. isTypeSameAs (other: SqlColumnName): Boolean","title":"isTypeSameAs"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / ClojureStmtListMixin ClojureStmtListMixin [jvm] abstract class ClojureStmtListMixin ( node : ASTNode) : SqlCompositeElementImpl, SqlDelightStmtClojureStmtList Functions Name Summary accept [jvm] Content open override fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content open override fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content open override fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content open override fun addAfter (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addBefore [jvm] Content open override fun addBefore (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addInternal [jvm] Content open fun addInternal (p0: ASTNode, p1: ASTNode, p2: ASTNode, p3: Boolean ): ASTNode addRange [jvm] Content open override fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content open override fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content open override fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder) canNavigate [jvm] Content open override fun canNavigate (): Boolean canNavigateToSource [jvm] Content open override fun canNavigateToSource (): Boolean changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean checkAdd [jvm] Content open override fun checkAdd (@NotNull()p0: @NotNull()PsiElement) checkDelete [jvm] Content open override fun checkDelete () clearUserData [jvm] Content open fun clearUserData () computeBaseIcon [jvm] Content open fun computeBaseIcon (p0: Int ): Icon copy [jvm] Content open override fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) delete [jvm] Content open override fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (@NotNull()p0: @NotNull()ASTNode) deleteChildRange [jvm] Content open override fun deleteChildRange (p0: PsiElement, p1: PsiElement) findChildByClass [jvm] Content @Nullable() open fun < T : Any > findChildByClass (p0: Class < T >): @Nullable() T ? findChildByFilter [jvm] Content @Nullable() open fun findChildByFilter (p0: TokenSet): @Nullable()PsiElement? findChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findChildByType (p0: IElementType): @Nullable() T ? @Nullable() open fun < T : PsiElement> findChildByType (p0: TokenSet): @Nullable() T ? findChildrenByClass [jvm] Content open fun < T : Any > findChildrenByClass (p0: Class < T >): @NotNull() Array < T > findChildrenByType [jvm] Content open fun < T : PsiElement> findChildrenByType (p0: IElementType): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: IElementType, p1: Class < T >): @NotNull() Array < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet, p1: Class < T >): @NotNull() Array < T > findElementAt [jvm] Content open override fun findElementAt (p0: Int ): PsiElement? findLastChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findLastChildByType (p0: IElementType): @Nullable() T ? findNotNullChildByClass [jvm] Content @NotNull() open fun < T : Any > findNotNullChildByClass (p0: Class < T >): @NotNull() T findNotNullChildByType [jvm] Content @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: IElementType): @NotNull() T @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: TokenSet): @NotNull() T findReferenceAt [jvm] Content open override fun findReferenceAt (p0: Int ): PsiReference? getAdjustedBaseIcon [jvm] Content open fun getAdjustedBaseIcon (p0: Icon , p1: Int ): Icon getBaseIcon [jvm] Content open fun getBaseIcon (): Icon getChildren [jvm] Content open override fun getChildren (): @NotNull() Array getContainingFile [jvm] Content open override fun getContainingFile (): SqlFileBase getContext [jvm] Content open override fun getContext (): PsiElement? getCopyableUserData [jvm] Content open override fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T ? getElementIcon [jvm] Content @Nullable() open fun getElementIcon (p0: Int ): @Nullable() Icon ? getFirstChild [jvm] Content open override fun getFirstChild (): PsiElement getIcon [jvm] Content @Nullable() open override fun getIcon (p0: Int ): @Nullable() Icon ? getLanguage [jvm] Content @NotNull() open override fun getLanguage (): @NotNull()Language getLastChild [jvm] Content open override fun getLastChild (): PsiElement getManager [jvm] Content open override fun getManager (): PsiManagerEx getName [jvm] Content open override fun getName (): String ? getNavigationElement [jvm] Content @NotNull() open override fun getNavigationElement (): @NotNull()PsiElement getNextSibling [jvm] Content open override fun getNextSibling (): PsiElement getNode [jvm] Content @NotNull() open override fun getNode (): @NotNull()ASTNode getOriginalElement [jvm] Content open override fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content open override fun getParent (): PsiElement getPresentation [jvm] Content open override fun getPresentation (): ItemPresentation? getPrevSibling [jvm] Content open override fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() open override fun getProject (): @NotNull()Project getReference [jvm] Content open override fun getReference (): PsiReference? getReferences [jvm] Content open override fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() open override fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content open override fun getStartOffsetInParent (): Int getText [jvm] Content open override fun getText (): String getTextLength [jvm] Content open override fun getTextLength (): Int getTextOffset [jvm] Content open override fun getTextOffset (): Int getTextRange [jvm] Content open override fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap getUseScope [jvm] Content @NotNull() open override fun getUseScope (): @NotNull()SearchScope isEquivalentTo [jvm] Content open override fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content open override fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open override fun isValid (): Boolean isVisibilitySupported [jvm] Content open fun isVisibilitySupported (): Boolean isWritable [jvm] Content open override fun isWritable (): Boolean navigate [jvm] Content open override fun navigate (p0: Boolean ) notNullChild [jvm] Content @NotNull() open fun < T : Any > notNullChild (p0: T ): @NotNull() T processDeclarations [jvm] Content open override fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, p2: PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content open override fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ?) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T queryAvailable [jvm] Content open override fun queryAvailable (child: PsiElement): Collection replace [jvm] Content open override fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (p0: PsiElement, p1: TreeElement) setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) subtreeChanged [jvm] Content open fun subtreeChanged () tablesAvailable [jvm] Content open override fun tablesAvailable (child: PsiElement): Collection textContains [jvm] Content open override fun textContains (p0: Char ): Boolean textMatches [jvm] Content open override fun textMatches (@NotNull()p0: @NotNull() CharSequence ): Boolean open override fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean textToCharArray [jvm] Content open override fun textToCharArray (): CharArray toString [jvm] Content open override fun toString (): String Inheritors Name SqlDelightStmtClojureStmtListImpl","title":"ClojureStmtListMixin   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/#clojurestmtlistmixin","text":"[jvm] abstract class ClojureStmtListMixin ( node : ASTNode) : SqlCompositeElementImpl, SqlDelightStmtClojureStmtList","title":"ClojureStmtListMixin"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/#functions","text":"Name Summary accept [jvm] Content open override fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content open override fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content open override fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content open override fun addAfter (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addBefore [jvm] Content open override fun addBefore (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addInternal [jvm] Content open fun addInternal (p0: ASTNode, p1: ASTNode, p2: ASTNode, p3: Boolean ): ASTNode addRange [jvm] Content open override fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content open override fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content open override fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder) canNavigate [jvm] Content open override fun canNavigate (): Boolean canNavigateToSource [jvm] Content open override fun canNavigateToSource (): Boolean changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean checkAdd [jvm] Content open override fun checkAdd (@NotNull()p0: @NotNull()PsiElement) checkDelete [jvm] Content open override fun checkDelete () clearUserData [jvm] Content open fun clearUserData () computeBaseIcon [jvm] Content open fun computeBaseIcon (p0: Int ): Icon copy [jvm] Content open override fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) delete [jvm] Content open override fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (@NotNull()p0: @NotNull()ASTNode) deleteChildRange [jvm] Content open override fun deleteChildRange (p0: PsiElement, p1: PsiElement) findChildByClass [jvm] Content @Nullable() open fun < T : Any > findChildByClass (p0: Class < T >): @Nullable() T ? findChildByFilter [jvm] Content @Nullable() open fun findChildByFilter (p0: TokenSet): @Nullable()PsiElement? findChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findChildByType (p0: IElementType): @Nullable() T ? @Nullable() open fun < T : PsiElement> findChildByType (p0: TokenSet): @Nullable() T ? findChildrenByClass [jvm] Content open fun < T : Any > findChildrenByClass (p0: Class < T >): @NotNull() Array < T > findChildrenByType [jvm] Content open fun < T : PsiElement> findChildrenByType (p0: IElementType): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: IElementType, p1: Class < T >): @NotNull() Array < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet, p1: Class < T >): @NotNull() Array < T > findElementAt [jvm] Content open override fun findElementAt (p0: Int ): PsiElement? findLastChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findLastChildByType (p0: IElementType): @Nullable() T ? findNotNullChildByClass [jvm] Content @NotNull() open fun < T : Any > findNotNullChildByClass (p0: Class < T >): @NotNull() T findNotNullChildByType [jvm] Content @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: IElementType): @NotNull() T @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: TokenSet): @NotNull() T findReferenceAt [jvm] Content open override fun findReferenceAt (p0: Int ): PsiReference? getAdjustedBaseIcon [jvm] Content open fun getAdjustedBaseIcon (p0: Icon , p1: Int ): Icon getBaseIcon [jvm] Content open fun getBaseIcon (): Icon getChildren [jvm] Content open override fun getChildren (): @NotNull() Array getContainingFile [jvm] Content open override fun getContainingFile (): SqlFileBase getContext [jvm] Content open override fun getContext (): PsiElement? getCopyableUserData [jvm] Content open override fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T ? getElementIcon [jvm] Content @Nullable() open fun getElementIcon (p0: Int ): @Nullable() Icon ? getFirstChild [jvm] Content open override fun getFirstChild (): PsiElement getIcon [jvm] Content @Nullable() open override fun getIcon (p0: Int ): @Nullable() Icon ? getLanguage [jvm] Content @NotNull() open override fun getLanguage (): @NotNull()Language getLastChild [jvm] Content open override fun getLastChild (): PsiElement getManager [jvm] Content open override fun getManager (): PsiManagerEx getName [jvm] Content open override fun getName (): String ? getNavigationElement [jvm] Content @NotNull() open override fun getNavigationElement (): @NotNull()PsiElement getNextSibling [jvm] Content open override fun getNextSibling (): PsiElement getNode [jvm] Content @NotNull() open override fun getNode (): @NotNull()ASTNode getOriginalElement [jvm] Content open override fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content open override fun getParent (): PsiElement getPresentation [jvm] Content open override fun getPresentation (): ItemPresentation? getPrevSibling [jvm] Content open override fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() open override fun getProject (): @NotNull()Project getReference [jvm] Content open override fun getReference (): PsiReference? getReferences [jvm] Content open override fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() open override fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content open override fun getStartOffsetInParent (): Int getText [jvm] Content open override fun getText (): String getTextLength [jvm] Content open override fun getTextLength (): Int getTextOffset [jvm] Content open override fun getTextOffset (): Int getTextRange [jvm] Content open override fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap getUseScope [jvm] Content @NotNull() open override fun getUseScope (): @NotNull()SearchScope isEquivalentTo [jvm] Content open override fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content open override fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open override fun isValid (): Boolean isVisibilitySupported [jvm] Content open fun isVisibilitySupported (): Boolean isWritable [jvm] Content open override fun isWritable (): Boolean navigate [jvm] Content open override fun navigate (p0: Boolean ) notNullChild [jvm] Content @NotNull() open fun < T : Any > notNullChild (p0: T ): @NotNull() T processDeclarations [jvm] Content open override fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, p2: PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content open override fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ?) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T queryAvailable [jvm] Content open override fun queryAvailable (child: PsiElement): Collection replace [jvm] Content open override fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (p0: PsiElement, p1: TreeElement) setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) subtreeChanged [jvm] Content open fun subtreeChanged () tablesAvailable [jvm] Content open override fun tablesAvailable (child: PsiElement): Collection textContains [jvm] Content open override fun textContains (p0: Char ): Boolean textMatches [jvm] Content open override fun textMatches (@NotNull()p0: @NotNull() CharSequence ): Boolean open override fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean textToCharArray [jvm] Content open override fun textToCharArray (): CharArray toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/#inheritors","text":"Name SqlDelightStmtClojureStmtListImpl","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/-clojure-stmt-list-mixin/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / ClojureStmtListMixin / ClojureStmtListMixin ClojureStmtListMixin [jvm] Content fun ClojureStmtListMixin (node: ASTNode)","title":"ClojureStmtListMixin   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/-clojure-stmt-list-mixin/#clojurestmtlistmixin","text":"[jvm] Content fun ClojureStmtListMixin (node: ASTNode)","title":"ClojureStmtListMixin"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/tables-available/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / ClojureStmtListMixin / tablesAvailable tablesAvailable [jvm] Content open override fun tablesAvailable (child: PsiElement): Collection","title":"tablesAvailable   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/tables-available/#tablesavailable","text":"[jvm] Content open override fun tablesAvailable (child: PsiElement): Collection","title":"tablesAvailable"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / ImportStmtMixin ImportStmtMixin [jvm] abstract class ImportStmtMixin ( node : ASTNode) : ASTWrapperPsiElement, SqlDelightImportStmt , SqlAnnotatedElement Functions Name Summary accept [jvm] Content open override fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content open override fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content open override fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content open override fun addAfter (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addBefore [jvm] Content open override fun addBefore (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addInternal [jvm] Content open fun addInternal (p0: ASTNode, p1: ASTNode, p2: ASTNode, p3: Boolean ): ASTNode addRange [jvm] Content open override fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content open override fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content open override fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder) canNavigate [jvm] Content open override fun canNavigate (): Boolean canNavigateToSource [jvm] Content open override fun canNavigateToSource (): Boolean changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean checkAdd [jvm] Content open override fun checkAdd (@NotNull()p0: @NotNull()PsiElement) checkDelete [jvm] Content open override fun checkDelete () clearUserData [jvm] Content open fun clearUserData () computeBaseIcon [jvm] Content open fun computeBaseIcon (p0: Int ): Icon copy [jvm] Content open override fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) delete [jvm] Content open override fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (@NotNull()p0: @NotNull()ASTNode) deleteChildRange [jvm] Content open override fun deleteChildRange (p0: PsiElement, p1: PsiElement) findChildByClass [jvm] Content @Nullable() open fun < T : Any > findChildByClass (p0: Class < T >): @Nullable() T ? findChildByFilter [jvm] Content @Nullable() open fun findChildByFilter (p0: TokenSet): @Nullable()PsiElement? findChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findChildByType (p0: IElementType): @Nullable() T ? @Nullable() open fun < T : PsiElement> findChildByType (p0: TokenSet): @Nullable() T ? findChildrenByClass [jvm] Content open fun < T : Any > findChildrenByClass (p0: Class < T >): @NotNull() Array < T > findChildrenByType [jvm] Content open fun < T : PsiElement> findChildrenByType (p0: IElementType): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: IElementType, p1: Class < T >): @NotNull() Array < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet, p1: Class < T >): @NotNull() Array < T > findElementAt [jvm] Content open override fun findElementAt (p0: Int ): PsiElement? findLastChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findLastChildByType (p0: IElementType): @Nullable() T ? findNotNullChildByClass [jvm] Content @NotNull() open fun < T : Any > findNotNullChildByClass (p0: Class < T >): @NotNull() T findNotNullChildByType [jvm] Content @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: IElementType): @NotNull() T @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: TokenSet): @NotNull() T findReferenceAt [jvm] Content open override fun findReferenceAt (p0: Int ): PsiReference? getAdjustedBaseIcon [jvm] Content open fun getAdjustedBaseIcon (p0: Icon , p1: Int ): Icon getBaseIcon [jvm] Content open fun getBaseIcon (): Icon getChildren [jvm] Content open override fun getChildren (): @NotNull() Array getContainingFile [jvm] Content open override fun getContainingFile (): PsiFile getContext [jvm] Content open override fun getContext (): PsiElement? getCopyableUserData [jvm] Content open override fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T ? getElementIcon [jvm] Content @Nullable() open fun getElementIcon (p0: Int ): @Nullable() Icon ? getFirstChild [jvm] Content open override fun getFirstChild (): PsiElement getIcon [jvm] Content @Nullable() open override fun getIcon (p0: Int ): @Nullable() Icon ? getJavaType [jvm] Content @NotNull() abstract fun getJavaType (): @NotNull() SqlDelightJavaType getLanguage [jvm] Content @NotNull() open override fun getLanguage (): @NotNull()Language getLastChild [jvm] Content open override fun getLastChild (): PsiElement getManager [jvm] Content open override fun getManager (): PsiManagerEx getName [jvm] Content open override fun getName (): String ? getNavigationElement [jvm] Content @NotNull() open override fun getNavigationElement (): @NotNull()PsiElement getNextSibling [jvm] Content open override fun getNextSibling (): PsiElement getNode [jvm] Content @NotNull() open override fun getNode (): @NotNull()ASTNode getOriginalElement [jvm] Content open override fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content open override fun getParent (): PsiElement getPresentation [jvm] Content open override fun getPresentation (): ItemPresentation? getPrevSibling [jvm] Content open override fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() open override fun getProject (): @NotNull()Project getReference [jvm] Content open override fun getReference (): PsiReference? getReferences [jvm] Content open override fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() open override fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content open override fun getStartOffsetInParent (): Int getText [jvm] Content open override fun getText (): String getTextLength [jvm] Content open override fun getTextLength (): Int getTextOffset [jvm] Content open override fun getTextOffset (): Int getTextRange [jvm] Content open override fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap getUseScope [jvm] Content @NotNull() open override fun getUseScope (): @NotNull()SearchScope isEquivalentTo [jvm] Content open override fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content open override fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open override fun isValid (): Boolean isVisibilitySupported [jvm] Content open fun isVisibilitySupported (): Boolean isWritable [jvm] Content open override fun isWritable (): Boolean navigate [jvm] Content open override fun navigate (p0: Boolean ) notNullChild [jvm] Content @NotNull() open fun < T : Any > notNullChild (p0: T ): @NotNull() T processDeclarations [jvm] Content open override fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, p2: PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content open override fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ?) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T replace [jvm] Content open override fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (p0: PsiElement, p1: TreeElement) setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open override fun textContains (p0: Char ): Boolean textMatches [jvm] Content open override fun textMatches (@NotNull()p0: @NotNull() CharSequence ): Boolean open override fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean textToCharArray [jvm] Content open override fun textToCharArray (): CharArray toString [jvm] Content open override fun toString (): String Inheritors Name SqlDelightImportStmtImpl","title":"ImportStmtMixin   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/#importstmtmixin","text":"[jvm] abstract class ImportStmtMixin ( node : ASTNode) : ASTWrapperPsiElement, SqlDelightImportStmt , SqlAnnotatedElement","title":"ImportStmtMixin"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/#functions","text":"Name Summary accept [jvm] Content open override fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content open override fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content open override fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content open override fun addAfter (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addBefore [jvm] Content open override fun addBefore (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addInternal [jvm] Content open fun addInternal (p0: ASTNode, p1: ASTNode, p2: ASTNode, p3: Boolean ): ASTNode addRange [jvm] Content open override fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content open override fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content open override fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder) canNavigate [jvm] Content open override fun canNavigate (): Boolean canNavigateToSource [jvm] Content open override fun canNavigateToSource (): Boolean changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean checkAdd [jvm] Content open override fun checkAdd (@NotNull()p0: @NotNull()PsiElement) checkDelete [jvm] Content open override fun checkDelete () clearUserData [jvm] Content open fun clearUserData () computeBaseIcon [jvm] Content open fun computeBaseIcon (p0: Int ): Icon copy [jvm] Content open override fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) delete [jvm] Content open override fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (@NotNull()p0: @NotNull()ASTNode) deleteChildRange [jvm] Content open override fun deleteChildRange (p0: PsiElement, p1: PsiElement) findChildByClass [jvm] Content @Nullable() open fun < T : Any > findChildByClass (p0: Class < T >): @Nullable() T ? findChildByFilter [jvm] Content @Nullable() open fun findChildByFilter (p0: TokenSet): @Nullable()PsiElement? findChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findChildByType (p0: IElementType): @Nullable() T ? @Nullable() open fun < T : PsiElement> findChildByType (p0: TokenSet): @Nullable() T ? findChildrenByClass [jvm] Content open fun < T : Any > findChildrenByClass (p0: Class < T >): @NotNull() Array < T > findChildrenByType [jvm] Content open fun < T : PsiElement> findChildrenByType (p0: IElementType): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: IElementType, p1: Class < T >): @NotNull() Array < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet, p1: Class < T >): @NotNull() Array < T > findElementAt [jvm] Content open override fun findElementAt (p0: Int ): PsiElement? findLastChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findLastChildByType (p0: IElementType): @Nullable() T ? findNotNullChildByClass [jvm] Content @NotNull() open fun < T : Any > findNotNullChildByClass (p0: Class < T >): @NotNull() T findNotNullChildByType [jvm] Content @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: IElementType): @NotNull() T @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: TokenSet): @NotNull() T findReferenceAt [jvm] Content open override fun findReferenceAt (p0: Int ): PsiReference? getAdjustedBaseIcon [jvm] Content open fun getAdjustedBaseIcon (p0: Icon , p1: Int ): Icon getBaseIcon [jvm] Content open fun getBaseIcon (): Icon getChildren [jvm] Content open override fun getChildren (): @NotNull() Array getContainingFile [jvm] Content open override fun getContainingFile (): PsiFile getContext [jvm] Content open override fun getContext (): PsiElement? getCopyableUserData [jvm] Content open override fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T ? getElementIcon [jvm] Content @Nullable() open fun getElementIcon (p0: Int ): @Nullable() Icon ? getFirstChild [jvm] Content open override fun getFirstChild (): PsiElement getIcon [jvm] Content @Nullable() open override fun getIcon (p0: Int ): @Nullable() Icon ? getJavaType [jvm] Content @NotNull() abstract fun getJavaType (): @NotNull() SqlDelightJavaType getLanguage [jvm] Content @NotNull() open override fun getLanguage (): @NotNull()Language getLastChild [jvm] Content open override fun getLastChild (): PsiElement getManager [jvm] Content open override fun getManager (): PsiManagerEx getName [jvm] Content open override fun getName (): String ? getNavigationElement [jvm] Content @NotNull() open override fun getNavigationElement (): @NotNull()PsiElement getNextSibling [jvm] Content open override fun getNextSibling (): PsiElement getNode [jvm] Content @NotNull() open override fun getNode (): @NotNull()ASTNode getOriginalElement [jvm] Content open override fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content open override fun getParent (): PsiElement getPresentation [jvm] Content open override fun getPresentation (): ItemPresentation? getPrevSibling [jvm] Content open override fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() open override fun getProject (): @NotNull()Project getReference [jvm] Content open override fun getReference (): PsiReference? getReferences [jvm] Content open override fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() open override fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content open override fun getStartOffsetInParent (): Int getText [jvm] Content open override fun getText (): String getTextLength [jvm] Content open override fun getTextLength (): Int getTextOffset [jvm] Content open override fun getTextOffset (): Int getTextRange [jvm] Content open override fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap getUseScope [jvm] Content @NotNull() open override fun getUseScope (): @NotNull()SearchScope isEquivalentTo [jvm] Content open override fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content open override fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open override fun isValid (): Boolean isVisibilitySupported [jvm] Content open fun isVisibilitySupported (): Boolean isWritable [jvm] Content open override fun isWritable (): Boolean navigate [jvm] Content open override fun navigate (p0: Boolean ) notNullChild [jvm] Content @NotNull() open fun < T : Any > notNullChild (p0: T ): @NotNull() T processDeclarations [jvm] Content open override fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, p2: PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content open override fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ?) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T replace [jvm] Content open override fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (p0: PsiElement, p1: TreeElement) setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open override fun textContains (p0: Char ): Boolean textMatches [jvm] Content open override fun textMatches (@NotNull()p0: @NotNull() CharSequence ): Boolean open override fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean textToCharArray [jvm] Content open override fun textToCharArray (): CharArray toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/#inheritors","text":"Name SqlDelightImportStmtImpl","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/-import-stmt-mixin/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / ImportStmtMixin / ImportStmtMixin ImportStmtMixin [jvm] Content fun ImportStmtMixin (node: ASTNode)","title":"ImportStmtMixin   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/-import-stmt-mixin/#importstmtmixin","text":"[jvm] Content fun ImportStmtMixin (node: ASTNode)","title":"ImportStmtMixin"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/annotate/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / ImportStmtMixin / annotate annotate [jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder)","title":"annotate   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/annotate/#annotate","text":"[jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder)","title":"annotate"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / InsertStmtValuesMixin InsertStmtValuesMixin [jvm] open class InsertStmtValuesMixin ( node : ASTNode) : SqlInsertStmtValuesImpl, SqlDelightInsertStmtValues Functions Name Summary accept [jvm] Content open fun accept (@NotNull()p0: @NotNull()SqlVisitor) open override fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content abstract fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (@NotNull()p0: @NotNull()PsiElement, @Nullable()p1: @Nullable()PsiElement?): PsiElement addBefore [jvm] Content abstract fun addBefore (@NotNull()p0: @NotNull()PsiElement, @Nullable()p1: @Nullable()PsiElement?): PsiElement addInternal [jvm] Content open fun addInternal (p0: ASTNode, p1: ASTNode, p2: ASTNode, p3: Boolean ): ASTNode addRange [jvm] Content abstract fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder) canNavigate [jvm] Content open override fun canNavigate (): Boolean canNavigateToSource [jvm] Content open override fun canNavigateToSource (): Boolean changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean checkAdd [jvm] Content ~~abstract~~ ~~fun~~ ~~checkAdd~~ ~~(~~@NotNull()~~p0~~~~:~~ @NotNull()PsiElement~~)~~ checkDelete [jvm] Content ~~abstract~~ ~~fun~~ ~~checkDelete~~ ~~(~~~~)~~ clearUserData [jvm] Content open fun clearUserData () computeBaseIcon [jvm] Content open fun computeBaseIcon (p0: Int ): Icon copy [jvm] Content abstract fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) delete [jvm] Content abstract fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (@NotNull()p0: @NotNull()ASTNode) deleteChildRange [jvm] Content abstract fun deleteChildRange (p0: PsiElement, p1: PsiElement) findChildByClass [jvm] Content @Nullable() open fun < T : Any > findChildByClass (p0: Class < T >): @Nullable() T ? findChildByFilter [jvm] Content @Nullable() open fun findChildByFilter (p0: TokenSet): @Nullable()PsiElement? findChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findChildByType (p0: IElementType): @Nullable() T ? @Nullable() open fun < T : PsiElement> findChildByType (p0: TokenSet): @Nullable() T ? findChildrenByClass [jvm] Content open fun < T : Any > findChildrenByClass (p0: Class < T >): @NotNull() Array < T > findChildrenByType [jvm] Content open fun < T : PsiElement> findChildrenByType (p0: IElementType): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: IElementType, p1: Class < T >): @NotNull() Array < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet, p1: Class < T >): @NotNull() Array < T > findElementAt [jvm] Content @Nullable() @Contract(pure = true) abstract fun findElementAt (p0: Int ): @Nullable()PsiElement? findLastChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findLastChildByType (p0: IElementType): @Nullable() T ? findNotNullChildByClass [jvm] Content @NotNull() open fun < T : Any > findNotNullChildByClass (p0: Class < T >): @NotNull() T findNotNullChildByType [jvm] Content @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: IElementType): @NotNull() T @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: TokenSet): @NotNull() T findReferenceAt [jvm] Content @Nullable() @Contract(pure = true) abstract fun findReferenceAt (p0: Int ): @Nullable()PsiReference? getAdjustedBaseIcon [jvm] Content open fun getAdjustedBaseIcon (p0: Icon , p1: Int ): Icon getBaseIcon [jvm] Content open fun getBaseIcon (): Icon getChildren [jvm] Content @Contract(pure = true) abstract fun getChildren (): @NotNull() Array getCompoundSelectStmt [jvm] Content @Nullable() open override fun getCompoundSelectStmt (): @Nullable()SqlCompoundSelectStmt? getContainingFile [jvm] Content abstract override fun getContainingFile (): SqlFileBase getContext [jvm] Content @Nullable() @Contract(pure = true) abstract fun getContext (): @Nullable()PsiElement? getCopyableUserData [jvm] Content @Nullable() @Contract(pure = true) abstract fun < T : Any > getCopyableUserData (p0: Key< T >): @Nullable() T ? getElementIcon [jvm] Content @Nullable() open fun getElementIcon (p0: Int ): @Nullable() Icon ? getFirstChild [jvm] Content @Contract(pure = true) abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p0: Int ): Icon getLanguage [jvm] Content @NotNull() @Contract(pure = true) abstract fun getLanguage (): @NotNull()Language getLastChild [jvm] Content @Contract(pure = true) abstract fun getLastChild (): PsiElement getManager [jvm] Content @Contract(pure = true) abstract fun getManager (): PsiManager getName [jvm] Content open override fun getName (): String ? getNavigationElement [jvm] Content @Contract(pure = true) abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content @Contract(pure = true) abstract fun getNextSibling (): PsiElement getNode [jvm] Content @Contract(pure = true) abstract fun getNode (): ASTNode getOriginalElement [jvm] Content @Contract(pure = true) abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content @Contract(pure = true) abstract fun getParent (): PsiElement getPresentation [jvm] Content open override fun getPresentation (): ItemPresentation? getPrevSibling [jvm] Content @Contract(pure = true) abstract fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() @Contract(pure = true) abstract fun getProject (): @NotNull()Project getReference [jvm] Content @Nullable() @Contract(pure = true) abstract fun getReference (): @Nullable()PsiReference? getReferences [jvm] Content @Contract(pure = true) abstract fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() @Contract(pure = true) abstract fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content @Contract(pure = true) abstract fun getStartOffsetInParent (): Int getText [jvm] Content @NonNls() @Contract(pure = true) abstract fun getText (): String getTextLength [jvm] Content @Contract(pure = true) abstract fun getTextLength (): Int getTextOffset [jvm] Content @Contract(pure = true) abstract fun getTextOffset (): Int getTextRange [jvm] Content @Contract(pure = true) abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getUserData [jvm] Content @Nullable() abstract fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): @Nullable() T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap getUseScope [jvm] Content @NotNull() @Contract(pure = true) abstract fun getUseScope (): @NotNull()SearchScope getValuesExpressionList [jvm] Content @NotNull() open override fun getValuesExpressionList (): @NotNull() MutableList isEquivalentTo [jvm] Content @Contract(pure = true) abstract fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content @Contract(pure = true) abstract fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content @Contract(pure = true) abstract fun isValid (): Boolean isVisibilitySupported [jvm] Content open fun isVisibilitySupported (): Boolean isWritable [jvm] Content @Contract(pure = true) abstract fun isWritable (): Boolean navigate [jvm] Content open override fun navigate (p0: Boolean ) notNullChild [jvm] Content @NotNull() open fun < T : Any > notNullChild (p0: T ): @NotNull() T processDeclarations [jvm] Content abstract fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, @Nullable()p2: @Nullable()PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T : Any > putCopyableUserData (p0: Key< T >, @Nullable()p1: @Nullable() T ?) putUserData [jvm] Content abstract fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T queryAvailable [jvm] Content abstract fun queryAvailable (child: PsiElement): Collection replace [jvm] Content abstract fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (p0: PsiElement, p1: TreeElement) setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) subtreeChanged [jvm] Content open fun subtreeChanged () tablesAvailable [jvm] Content abstract fun tablesAvailable (child: PsiElement): Collection textContains [jvm] Content @Contract(pure = true) abstract fun textContains (p0: Char ): Boolean textMatches [jvm] Content @Contract(pure = true) abstract fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean @Contract(pure = true) abstract fun textMatches (@NotNull()@NonNls()p0: @NotNull() CharSequence ): Boolean textToCharArray [jvm] Content @Contract(pure = true) abstract fun textToCharArray (): CharArray Inheritors Name SqlDelightInsertStmtValuesRealImpl SqlDelightInsertStmtValuesImpl","title":"InsertStmtValuesMixin   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/#insertstmtvaluesmixin","text":"[jvm] open class InsertStmtValuesMixin ( node : ASTNode) : SqlInsertStmtValuesImpl, SqlDelightInsertStmtValues","title":"InsertStmtValuesMixin"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/#functions","text":"Name Summary accept [jvm] Content open fun accept (@NotNull()p0: @NotNull()SqlVisitor) open override fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content abstract fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (@NotNull()p0: @NotNull()PsiElement, @Nullable()p1: @Nullable()PsiElement?): PsiElement addBefore [jvm] Content abstract fun addBefore (@NotNull()p0: @NotNull()PsiElement, @Nullable()p1: @Nullable()PsiElement?): PsiElement addInternal [jvm] Content open fun addInternal (p0: ASTNode, p1: ASTNode, p2: ASTNode, p3: Boolean ): ASTNode addRange [jvm] Content abstract fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder) canNavigate [jvm] Content open override fun canNavigate (): Boolean canNavigateToSource [jvm] Content open override fun canNavigateToSource (): Boolean changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean checkAdd [jvm] Content ~~abstract~~ ~~fun~~ ~~checkAdd~~ ~~(~~@NotNull()~~p0~~~~:~~ @NotNull()PsiElement~~)~~ checkDelete [jvm] Content ~~abstract~~ ~~fun~~ ~~checkDelete~~ ~~(~~~~)~~ clearUserData [jvm] Content open fun clearUserData () computeBaseIcon [jvm] Content open fun computeBaseIcon (p0: Int ): Icon copy [jvm] Content abstract fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) delete [jvm] Content abstract fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (@NotNull()p0: @NotNull()ASTNode) deleteChildRange [jvm] Content abstract fun deleteChildRange (p0: PsiElement, p1: PsiElement) findChildByClass [jvm] Content @Nullable() open fun < T : Any > findChildByClass (p0: Class < T >): @Nullable() T ? findChildByFilter [jvm] Content @Nullable() open fun findChildByFilter (p0: TokenSet): @Nullable()PsiElement? findChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findChildByType (p0: IElementType): @Nullable() T ? @Nullable() open fun < T : PsiElement> findChildByType (p0: TokenSet): @Nullable() T ? findChildrenByClass [jvm] Content open fun < T : Any > findChildrenByClass (p0: Class < T >): @NotNull() Array < T > findChildrenByType [jvm] Content open fun < T : PsiElement> findChildrenByType (p0: IElementType): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: IElementType, p1: Class < T >): @NotNull() Array < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet, p1: Class < T >): @NotNull() Array < T > findElementAt [jvm] Content @Nullable() @Contract(pure = true) abstract fun findElementAt (p0: Int ): @Nullable()PsiElement? findLastChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findLastChildByType (p0: IElementType): @Nullable() T ? findNotNullChildByClass [jvm] Content @NotNull() open fun < T : Any > findNotNullChildByClass (p0: Class < T >): @NotNull() T findNotNullChildByType [jvm] Content @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: IElementType): @NotNull() T @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: TokenSet): @NotNull() T findReferenceAt [jvm] Content @Nullable() @Contract(pure = true) abstract fun findReferenceAt (p0: Int ): @Nullable()PsiReference? getAdjustedBaseIcon [jvm] Content open fun getAdjustedBaseIcon (p0: Icon , p1: Int ): Icon getBaseIcon [jvm] Content open fun getBaseIcon (): Icon getChildren [jvm] Content @Contract(pure = true) abstract fun getChildren (): @NotNull() Array getCompoundSelectStmt [jvm] Content @Nullable() open override fun getCompoundSelectStmt (): @Nullable()SqlCompoundSelectStmt? getContainingFile [jvm] Content abstract override fun getContainingFile (): SqlFileBase getContext [jvm] Content @Nullable() @Contract(pure = true) abstract fun getContext (): @Nullable()PsiElement? getCopyableUserData [jvm] Content @Nullable() @Contract(pure = true) abstract fun < T : Any > getCopyableUserData (p0: Key< T >): @Nullable() T ? getElementIcon [jvm] Content @Nullable() open fun getElementIcon (p0: Int ): @Nullable() Icon ? getFirstChild [jvm] Content @Contract(pure = true) abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p0: Int ): Icon getLanguage [jvm] Content @NotNull() @Contract(pure = true) abstract fun getLanguage (): @NotNull()Language getLastChild [jvm] Content @Contract(pure = true) abstract fun getLastChild (): PsiElement getManager [jvm] Content @Contract(pure = true) abstract fun getManager (): PsiManager getName [jvm] Content open override fun getName (): String ? getNavigationElement [jvm] Content @Contract(pure = true) abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content @Contract(pure = true) abstract fun getNextSibling (): PsiElement getNode [jvm] Content @Contract(pure = true) abstract fun getNode (): ASTNode getOriginalElement [jvm] Content @Contract(pure = true) abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content @Contract(pure = true) abstract fun getParent (): PsiElement getPresentation [jvm] Content open override fun getPresentation (): ItemPresentation? getPrevSibling [jvm] Content @Contract(pure = true) abstract fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() @Contract(pure = true) abstract fun getProject (): @NotNull()Project getReference [jvm] Content @Nullable() @Contract(pure = true) abstract fun getReference (): @Nullable()PsiReference? getReferences [jvm] Content @Contract(pure = true) abstract fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() @Contract(pure = true) abstract fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content @Contract(pure = true) abstract fun getStartOffsetInParent (): Int getText [jvm] Content @NonNls() @Contract(pure = true) abstract fun getText (): String getTextLength [jvm] Content @Contract(pure = true) abstract fun getTextLength (): Int getTextOffset [jvm] Content @Contract(pure = true) abstract fun getTextOffset (): Int getTextRange [jvm] Content @Contract(pure = true) abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getUserData [jvm] Content @Nullable() abstract fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): @Nullable() T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap getUseScope [jvm] Content @NotNull() @Contract(pure = true) abstract fun getUseScope (): @NotNull()SearchScope getValuesExpressionList [jvm] Content @NotNull() open override fun getValuesExpressionList (): @NotNull() MutableList isEquivalentTo [jvm] Content @Contract(pure = true) abstract fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content @Contract(pure = true) abstract fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content @Contract(pure = true) abstract fun isValid (): Boolean isVisibilitySupported [jvm] Content open fun isVisibilitySupported (): Boolean isWritable [jvm] Content @Contract(pure = true) abstract fun isWritable (): Boolean navigate [jvm] Content open override fun navigate (p0: Boolean ) notNullChild [jvm] Content @NotNull() open fun < T : Any > notNullChild (p0: T ): @NotNull() T processDeclarations [jvm] Content abstract fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, @Nullable()p2: @Nullable()PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T : Any > putCopyableUserData (p0: Key< T >, @Nullable()p1: @Nullable() T ?) putUserData [jvm] Content abstract fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T queryAvailable [jvm] Content abstract fun queryAvailable (child: PsiElement): Collection replace [jvm] Content abstract fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (p0: PsiElement, p1: TreeElement) setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) subtreeChanged [jvm] Content open fun subtreeChanged () tablesAvailable [jvm] Content abstract fun tablesAvailable (child: PsiElement): Collection textContains [jvm] Content @Contract(pure = true) abstract fun textContains (p0: Char ): Boolean textMatches [jvm] Content @Contract(pure = true) abstract fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean @Contract(pure = true) abstract fun textMatches (@NotNull()@NonNls()p0: @NotNull() CharSequence ): Boolean textToCharArray [jvm] Content @Contract(pure = true) abstract fun textToCharArray (): CharArray","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/#inheritors","text":"Name SqlDelightInsertStmtValuesRealImpl SqlDelightInsertStmtValuesImpl","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/-insert-stmt-values-mixin/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / InsertStmtValuesMixin / InsertStmtValuesMixin InsertStmtValuesMixin [jvm] Content fun InsertStmtValuesMixin (node: ASTNode)","title":"InsertStmtValuesMixin   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/-insert-stmt-values-mixin/#insertstmtvaluesmixin","text":"[jvm] Content fun InsertStmtValuesMixin (node: ASTNode)","title":"InsertStmtValuesMixin"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/annotate/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / InsertStmtValuesMixin / annotate annotate [jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder)","title":"annotate   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/annotate/#annotate","text":"[jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder)","title":"annotate"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / JavaTypeMixin JavaTypeMixin [jvm] abstract class JavaTypeMixin ( node : ASTNode) : ASTWrapperPsiElement Functions Name Summary accept [jvm] Content open override fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content open override fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content open override fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content open override fun addAfter (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addBefore [jvm] Content open override fun addBefore (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addInternal [jvm] Content open fun addInternal (p0: ASTNode, p1: ASTNode, p2: ASTNode, p3: Boolean ): ASTNode addRange [jvm] Content open override fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content open override fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content open override fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement canNavigate [jvm] Content open override fun canNavigate (): Boolean canNavigateToSource [jvm] Content open override fun canNavigateToSource (): Boolean changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean checkAdd [jvm] Content open override fun checkAdd (@NotNull()p0: @NotNull()PsiElement) checkDelete [jvm] Content open override fun checkDelete () clearUserData [jvm] Content open fun clearUserData () computeBaseIcon [jvm] Content open fun computeBaseIcon (p0: Int ): Icon copy [jvm] Content open override fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) delete [jvm] Content open override fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (@NotNull()p0: @NotNull()ASTNode) deleteChildRange [jvm] Content open override fun deleteChildRange (p0: PsiElement, p1: PsiElement) findChildByClass [jvm] Content @Nullable() open fun < T : Any > findChildByClass (p0: Class < T >): @Nullable() T ? findChildByFilter [jvm] Content @Nullable() open fun findChildByFilter (p0: TokenSet): @Nullable()PsiElement? findChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findChildByType (p0: IElementType): @Nullable() T ? @Nullable() open fun < T : PsiElement> findChildByType (p0: TokenSet): @Nullable() T ? findChildrenByClass [jvm] Content open fun < T : Any > findChildrenByClass (p0: Class < T >): @NotNull() Array < T > findChildrenByType [jvm] Content open fun < T : PsiElement> findChildrenByType (p0: IElementType): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: IElementType, p1: Class < T >): @NotNull() Array < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet, p1: Class < T >): @NotNull() Array < T > findElementAt [jvm] Content open override fun findElementAt (p0: Int ): PsiElement? findLastChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findLastChildByType (p0: IElementType): @Nullable() T ? findNotNullChildByClass [jvm] Content @NotNull() open fun < T : Any > findNotNullChildByClass (p0: Class < T >): @NotNull() T findNotNullChildByType [jvm] Content @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: IElementType): @NotNull() T @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: TokenSet): @NotNull() T findReferenceAt [jvm] Content open override fun findReferenceAt (p0: Int ): PsiReference? getAdjustedBaseIcon [jvm] Content open fun getAdjustedBaseIcon (p0: Icon , p1: Int ): Icon getBaseIcon [jvm] Content open fun getBaseIcon (): Icon getChildren [jvm] Content open override fun getChildren (): @NotNull() Array getContainingFile [jvm] Content open override fun getContainingFile (): PsiFile getContext [jvm] Content open override fun getContext (): PsiElement? getCopyableUserData [jvm] Content open override fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T ? getElementIcon [jvm] Content @Nullable() open fun getElementIcon (p0: Int ): @Nullable() Icon ? getFirstChild [jvm] Content open override fun getFirstChild (): PsiElement getIcon [jvm] Content @Nullable() open override fun getIcon (p0: Int ): @Nullable() Icon ? getLanguage [jvm] Content @NotNull() open override fun getLanguage (): @NotNull()Language getLastChild [jvm] Content open override fun getLastChild (): PsiElement getManager [jvm] Content open override fun getManager (): PsiManagerEx getName [jvm] Content open override fun getName (): String ? getNavigationElement [jvm] Content @NotNull() open override fun getNavigationElement (): @NotNull()PsiElement getNextSibling [jvm] Content open override fun getNextSibling (): PsiElement getNode [jvm] Content @NotNull() open override fun getNode (): @NotNull()ASTNode getOriginalElement [jvm] Content open override fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content open override fun getParent (): PsiElement getPresentation [jvm] Content open override fun getPresentation (): ItemPresentation? getPrevSibling [jvm] Content open override fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() open override fun getProject (): @NotNull()Project getReference [jvm] Content open override fun getReference (): PsiReference getReferences [jvm] Content open override fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() open override fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content open override fun getStartOffsetInParent (): Int getText [jvm] Content open override fun getText (): String getTextLength [jvm] Content open override fun getTextLength (): Int getTextOffset [jvm] Content open override fun getTextOffset (): Int getTextRange [jvm] Content open override fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap getUseScope [jvm] Content @NotNull() open override fun getUseScope (): @NotNull()SearchScope isEquivalentTo [jvm] Content open override fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content open override fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open override fun isValid (): Boolean isVisibilitySupported [jvm] Content open fun isVisibilitySupported (): Boolean isWritable [jvm] Content open override fun isWritable (): Boolean navigate [jvm] Content open override fun navigate (p0: Boolean ) notNullChild [jvm] Content @NotNull() open fun < T : Any > notNullChild (p0: T ): @NotNull() T processDeclarations [jvm] Content open override fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, p2: PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content open override fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ?) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T replace [jvm] Content open override fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (p0: PsiElement, p1: TreeElement) setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open override fun textContains (p0: Char ): Boolean textMatches [jvm] Content open override fun textMatches (@NotNull()p0: @NotNull() CharSequence ): Boolean open override fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean textToCharArray [jvm] Content open override fun textToCharArray (): CharArray toString [jvm] Content open override fun toString (): String Inheritors Name SqlDelightJavaTypeImpl","title":"JavaTypeMixin   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/#javatypemixin","text":"[jvm] abstract class JavaTypeMixin ( node : ASTNode) : ASTWrapperPsiElement","title":"JavaTypeMixin"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/#functions","text":"Name Summary accept [jvm] Content open override fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content open override fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content open override fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content open override fun addAfter (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addBefore [jvm] Content open override fun addBefore (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addInternal [jvm] Content open fun addInternal (p0: ASTNode, p1: ASTNode, p2: ASTNode, p3: Boolean ): ASTNode addRange [jvm] Content open override fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content open override fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content open override fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement canNavigate [jvm] Content open override fun canNavigate (): Boolean canNavigateToSource [jvm] Content open override fun canNavigateToSource (): Boolean changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean checkAdd [jvm] Content open override fun checkAdd (@NotNull()p0: @NotNull()PsiElement) checkDelete [jvm] Content open override fun checkDelete () clearUserData [jvm] Content open fun clearUserData () computeBaseIcon [jvm] Content open fun computeBaseIcon (p0: Int ): Icon copy [jvm] Content open override fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) delete [jvm] Content open override fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (@NotNull()p0: @NotNull()ASTNode) deleteChildRange [jvm] Content open override fun deleteChildRange (p0: PsiElement, p1: PsiElement) findChildByClass [jvm] Content @Nullable() open fun < T : Any > findChildByClass (p0: Class < T >): @Nullable() T ? findChildByFilter [jvm] Content @Nullable() open fun findChildByFilter (p0: TokenSet): @Nullable()PsiElement? findChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findChildByType (p0: IElementType): @Nullable() T ? @Nullable() open fun < T : PsiElement> findChildByType (p0: TokenSet): @Nullable() T ? findChildrenByClass [jvm] Content open fun < T : Any > findChildrenByClass (p0: Class < T >): @NotNull() Array < T > findChildrenByType [jvm] Content open fun < T : PsiElement> findChildrenByType (p0: IElementType): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: IElementType, p1: Class < T >): @NotNull() Array < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet, p1: Class < T >): @NotNull() Array < T > findElementAt [jvm] Content open override fun findElementAt (p0: Int ): PsiElement? findLastChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findLastChildByType (p0: IElementType): @Nullable() T ? findNotNullChildByClass [jvm] Content @NotNull() open fun < T : Any > findNotNullChildByClass (p0: Class < T >): @NotNull() T findNotNullChildByType [jvm] Content @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: IElementType): @NotNull() T @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: TokenSet): @NotNull() T findReferenceAt [jvm] Content open override fun findReferenceAt (p0: Int ): PsiReference? getAdjustedBaseIcon [jvm] Content open fun getAdjustedBaseIcon (p0: Icon , p1: Int ): Icon getBaseIcon [jvm] Content open fun getBaseIcon (): Icon getChildren [jvm] Content open override fun getChildren (): @NotNull() Array getContainingFile [jvm] Content open override fun getContainingFile (): PsiFile getContext [jvm] Content open override fun getContext (): PsiElement? getCopyableUserData [jvm] Content open override fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T ? getElementIcon [jvm] Content @Nullable() open fun getElementIcon (p0: Int ): @Nullable() Icon ? getFirstChild [jvm] Content open override fun getFirstChild (): PsiElement getIcon [jvm] Content @Nullable() open override fun getIcon (p0: Int ): @Nullable() Icon ? getLanguage [jvm] Content @NotNull() open override fun getLanguage (): @NotNull()Language getLastChild [jvm] Content open override fun getLastChild (): PsiElement getManager [jvm] Content open override fun getManager (): PsiManagerEx getName [jvm] Content open override fun getName (): String ? getNavigationElement [jvm] Content @NotNull() open override fun getNavigationElement (): @NotNull()PsiElement getNextSibling [jvm] Content open override fun getNextSibling (): PsiElement getNode [jvm] Content @NotNull() open override fun getNode (): @NotNull()ASTNode getOriginalElement [jvm] Content open override fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content open override fun getParent (): PsiElement getPresentation [jvm] Content open override fun getPresentation (): ItemPresentation? getPrevSibling [jvm] Content open override fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() open override fun getProject (): @NotNull()Project getReference [jvm] Content open override fun getReference (): PsiReference getReferences [jvm] Content open override fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() open override fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content open override fun getStartOffsetInParent (): Int getText [jvm] Content open override fun getText (): String getTextLength [jvm] Content open override fun getTextLength (): Int getTextOffset [jvm] Content open override fun getTextOffset (): Int getTextRange [jvm] Content open override fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap getUseScope [jvm] Content @NotNull() open override fun getUseScope (): @NotNull()SearchScope isEquivalentTo [jvm] Content open override fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content open override fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open override fun isValid (): Boolean isVisibilitySupported [jvm] Content open fun isVisibilitySupported (): Boolean isWritable [jvm] Content open override fun isWritable (): Boolean navigate [jvm] Content open override fun navigate (p0: Boolean ) notNullChild [jvm] Content @NotNull() open fun < T : Any > notNullChild (p0: T ): @NotNull() T processDeclarations [jvm] Content open override fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, p2: PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content open override fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ?) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T replace [jvm] Content open override fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (p0: PsiElement, p1: TreeElement) setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open override fun textContains (p0: Char ): Boolean textMatches [jvm] Content open override fun textMatches (@NotNull()p0: @NotNull() CharSequence ): Boolean open override fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean textToCharArray [jvm] Content open override fun textToCharArray (): CharArray toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/#inheritors","text":"Name SqlDelightJavaTypeImpl","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/-java-type-mixin/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / JavaTypeMixin / JavaTypeMixin JavaTypeMixin [jvm] Content fun JavaTypeMixin (node: ASTNode)","title":"JavaTypeMixin   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/-java-type-mixin/#javatypemixin","text":"[jvm] Content fun JavaTypeMixin (node: ASTNode)","title":"JavaTypeMixin"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/get-reference/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / JavaTypeMixin / getReference getReference [jvm] Content open override fun getReference (): PsiReference","title":"getReference   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/get-reference/#getreference","text":"[jvm] Content open override fun getReference (): PsiReference","title":"getReference"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / StmtIdentifier StmtIdentifier [jvm] interface StmtIdentifier : PsiNamedElement Functions Name Summary accept [jvm] Content abstract fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content abstract fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (@NotNull()p0: @NotNull()PsiElement, @Nullable()p1: @Nullable()PsiElement?): PsiElement addBefore [jvm] Content abstract fun addBefore (@NotNull()p0: @NotNull()PsiElement, @Nullable()p1: @Nullable()PsiElement?): PsiElement addRange [jvm] Content abstract fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content ~~abstract~~ ~~fun~~ ~~checkAdd~~ ~~(~~@NotNull()~~p0~~~~:~~ @NotNull()PsiElement~~)~~ checkDelete [jvm] Content ~~abstract~~ ~~fun~~ ~~checkDelete~~ ~~(~~~~)~~ copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p0: PsiElement, p1: PsiElement) findElementAt [jvm] Content @Nullable() @Contract(pure = true) abstract fun findElementAt (p0: Int ): @Nullable()PsiElement? findReferenceAt [jvm] Content @Nullable() @Contract(pure = true) abstract fun findReferenceAt (p0: Int ): @Nullable()PsiReference? getChildren [jvm] Content @Contract(pure = true) abstract fun getChildren (): @NotNull() Array getContainingFile [jvm] Content @Contract(pure = true) abstract fun getContainingFile (): PsiFile getContext [jvm] Content @Nullable() @Contract(pure = true) abstract fun getContext (): @Nullable()PsiElement? getCopyableUserData [jvm] Content @Nullable() @Contract(pure = true) abstract fun < T : Any > getCopyableUserData (p0: Key< T >): @Nullable() T ? getFirstChild [jvm] Content @Contract(pure = true) abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p0: Int ): Icon getLanguage [jvm] Content @NotNull() @Contract(pure = true) abstract fun getLanguage (): @NotNull()Language getLastChild [jvm] Content @Contract(pure = true) abstract fun getLastChild (): PsiElement getManager [jvm] Content @Contract(pure = true) abstract fun getManager (): PsiManager getName [jvm] Content @Nullable() abstract fun getName (): @Nullable() String ? getNavigationElement [jvm] Content @Contract(pure = true) abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content @Contract(pure = true) abstract fun getNextSibling (): PsiElement getNode [jvm] Content @Contract(pure = true) abstract fun getNode (): ASTNode getOriginalElement [jvm] Content @Contract(pure = true) abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content @Contract(pure = true) abstract fun getParent (): PsiElement getPrevSibling [jvm] Content @Contract(pure = true) abstract fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() @Contract(pure = true) abstract fun getProject (): @NotNull()Project getReference [jvm] Content @Nullable() @Contract(pure = true) abstract fun getReference (): @Nullable()PsiReference? getReferences [jvm] Content @Contract(pure = true) abstract fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() @Contract(pure = true) abstract fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content @Contract(pure = true) abstract fun getStartOffsetInParent (): Int getText [jvm] Content @NonNls() @Contract(pure = true) abstract fun getText (): String getTextLength [jvm] Content @Contract(pure = true) abstract fun getTextLength (): Int getTextOffset [jvm] Content @Contract(pure = true) abstract fun getTextOffset (): Int getTextRange [jvm] Content @Contract(pure = true) abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getUserData [jvm] Content @Nullable() abstract fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): @Nullable() T ? getUseScope [jvm] Content @NotNull() @Contract(pure = true) abstract fun getUseScope (): @NotNull()SearchScope identifier [jvm] Content abstract fun identifier (): SqlIdentifier? isEquivalentTo [jvm] Content @Contract(pure = true) abstract fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content @Contract(pure = true) abstract fun isPhysical (): Boolean isValid [jvm] Content @Contract(pure = true) abstract fun isValid (): Boolean isWritable [jvm] Content @Contract(pure = true) abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, @Nullable()p2: @Nullable()PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T : Any > putCopyableUserData (p0: Key< T >, @Nullable()p1: @Nullable() T ?) putUserData [jvm] Content abstract fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) replace [jvm] Content abstract fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement setName [jvm] Content abstract fun setName (@NotNull()p0: @NotNull() String ): PsiElement textContains [jvm] Content @Contract(pure = true) abstract fun textContains (p0: Char ): Boolean textMatches [jvm] Content @Contract(pure = true) abstract fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean @Contract(pure = true) abstract fun textMatches (@NotNull()@NonNls()p0: @NotNull() CharSequence ): Boolean textToCharArray [jvm] Content @Contract(pure = true) abstract fun textToCharArray (): CharArray Inheritors Name SqlDelightStmtIdentifier","title":"StmtIdentifier   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier/#stmtidentifier","text":"[jvm] interface StmtIdentifier : PsiNamedElement","title":"StmtIdentifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content abstract fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (@NotNull()p0: @NotNull()PsiElement, @Nullable()p1: @Nullable()PsiElement?): PsiElement addBefore [jvm] Content abstract fun addBefore (@NotNull()p0: @NotNull()PsiElement, @Nullable()p1: @Nullable()PsiElement?): PsiElement addRange [jvm] Content abstract fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content ~~abstract~~ ~~fun~~ ~~checkAdd~~ ~~(~~@NotNull()~~p0~~~~:~~ @NotNull()PsiElement~~)~~ checkDelete [jvm] Content ~~abstract~~ ~~fun~~ ~~checkDelete~~ ~~(~~~~)~~ copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p0: PsiElement, p1: PsiElement) findElementAt [jvm] Content @Nullable() @Contract(pure = true) abstract fun findElementAt (p0: Int ): @Nullable()PsiElement? findReferenceAt [jvm] Content @Nullable() @Contract(pure = true) abstract fun findReferenceAt (p0: Int ): @Nullable()PsiReference? getChildren [jvm] Content @Contract(pure = true) abstract fun getChildren (): @NotNull() Array getContainingFile [jvm] Content @Contract(pure = true) abstract fun getContainingFile (): PsiFile getContext [jvm] Content @Nullable() @Contract(pure = true) abstract fun getContext (): @Nullable()PsiElement? getCopyableUserData [jvm] Content @Nullable() @Contract(pure = true) abstract fun < T : Any > getCopyableUserData (p0: Key< T >): @Nullable() T ? getFirstChild [jvm] Content @Contract(pure = true) abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p0: Int ): Icon getLanguage [jvm] Content @NotNull() @Contract(pure = true) abstract fun getLanguage (): @NotNull()Language getLastChild [jvm] Content @Contract(pure = true) abstract fun getLastChild (): PsiElement getManager [jvm] Content @Contract(pure = true) abstract fun getManager (): PsiManager getName [jvm] Content @Nullable() abstract fun getName (): @Nullable() String ? getNavigationElement [jvm] Content @Contract(pure = true) abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content @Contract(pure = true) abstract fun getNextSibling (): PsiElement getNode [jvm] Content @Contract(pure = true) abstract fun getNode (): ASTNode getOriginalElement [jvm] Content @Contract(pure = true) abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content @Contract(pure = true) abstract fun getParent (): PsiElement getPrevSibling [jvm] Content @Contract(pure = true) abstract fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() @Contract(pure = true) abstract fun getProject (): @NotNull()Project getReference [jvm] Content @Nullable() @Contract(pure = true) abstract fun getReference (): @Nullable()PsiReference? getReferences [jvm] Content @Contract(pure = true) abstract fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() @Contract(pure = true) abstract fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content @Contract(pure = true) abstract fun getStartOffsetInParent (): Int getText [jvm] Content @NonNls() @Contract(pure = true) abstract fun getText (): String getTextLength [jvm] Content @Contract(pure = true) abstract fun getTextLength (): Int getTextOffset [jvm] Content @Contract(pure = true) abstract fun getTextOffset (): Int getTextRange [jvm] Content @Contract(pure = true) abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getUserData [jvm] Content @Nullable() abstract fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): @Nullable() T ? getUseScope [jvm] Content @NotNull() @Contract(pure = true) abstract fun getUseScope (): @NotNull()SearchScope identifier [jvm] Content abstract fun identifier (): SqlIdentifier? isEquivalentTo [jvm] Content @Contract(pure = true) abstract fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content @Contract(pure = true) abstract fun isPhysical (): Boolean isValid [jvm] Content @Contract(pure = true) abstract fun isValid (): Boolean isWritable [jvm] Content @Contract(pure = true) abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, @Nullable()p2: @Nullable()PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T : Any > putCopyableUserData (p0: Key< T >, @Nullable()p1: @Nullable() T ?) putUserData [jvm] Content abstract fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) replace [jvm] Content abstract fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement setName [jvm] Content abstract fun setName (@NotNull()p0: @NotNull() String ): PsiElement textContains [jvm] Content @Contract(pure = true) abstract fun textContains (p0: Char ): Boolean textMatches [jvm] Content @Contract(pure = true) abstract fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean @Contract(pure = true) abstract fun textMatches (@NotNull()@NonNls()p0: @NotNull() CharSequence ): Boolean textToCharArray [jvm] Content @Contract(pure = true) abstract fun textToCharArray (): CharArray","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier/#inheritors","text":"Name SqlDelightStmtIdentifier","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier/identifier/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / StmtIdentifier / identifier identifier [jvm] Content abstract fun identifier (): SqlIdentifier?","title":"identifier   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier/identifier/#identifier","text":"[jvm] Content abstract fun identifier (): SqlIdentifier?","title":"identifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / StmtIdentifierMixin StmtIdentifierMixin [jvm] abstract class StmtIdentifierMixin ( node : ASTNode) : ASTWrapperPsiElement, SqlDelightStmtIdentifier , SqlDelightStmtIdentifierClojure , SqlAnnotatedElement Functions Name Summary accept [jvm] Content open override fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content open override fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content open override fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content open override fun addAfter (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addBefore [jvm] Content open override fun addBefore (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addInternal [jvm] Content open fun addInternal (p0: ASTNode, p1: ASTNode, p2: ASTNode, p3: Boolean ): ASTNode addRange [jvm] Content open override fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content open override fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content open override fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder) canNavigate [jvm] Content open override fun canNavigate (): Boolean canNavigateToSource [jvm] Content open override fun canNavigateToSource (): Boolean changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean checkAdd [jvm] Content open override fun checkAdd (@NotNull()p0: @NotNull()PsiElement) checkDelete [jvm] Content open override fun checkDelete () clearUserData [jvm] Content open fun clearUserData () computeBaseIcon [jvm] Content open fun computeBaseIcon (p0: Int ): Icon copy [jvm] Content open override fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) delete [jvm] Content open override fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (@NotNull()p0: @NotNull()ASTNode) deleteChildRange [jvm] Content open override fun deleteChildRange (p0: PsiElement, p1: PsiElement) findChildByClass [jvm] Content @Nullable() open fun < T : Any > findChildByClass (p0: Class < T >): @Nullable() T ? findChildByFilter [jvm] Content @Nullable() open fun findChildByFilter (p0: TokenSet): @Nullable()PsiElement? findChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findChildByType (p0: IElementType): @Nullable() T ? @Nullable() open fun < T : PsiElement> findChildByType (p0: TokenSet): @Nullable() T ? findChildrenByClass [jvm] Content open fun < T : Any > findChildrenByClass (p0: Class < T >): @NotNull() Array < T > findChildrenByType [jvm] Content open fun < T : PsiElement> findChildrenByType (p0: IElementType): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: IElementType, p1: Class < T >): @NotNull() Array < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet, p1: Class < T >): @NotNull() Array < T > findElementAt [jvm] Content open override fun findElementAt (p0: Int ): PsiElement? findLastChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findLastChildByType (p0: IElementType): @Nullable() T ? findNotNullChildByClass [jvm] Content @NotNull() open fun < T : Any > findNotNullChildByClass (p0: Class < T >): @NotNull() T findNotNullChildByType [jvm] Content @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: IElementType): @NotNull() T @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: TokenSet): @NotNull() T findReferenceAt [jvm] Content open override fun findReferenceAt (p0: Int ): PsiReference? getAdjustedBaseIcon [jvm] Content open fun getAdjustedBaseIcon (p0: Icon , p1: Int ): Icon getBaseIcon [jvm] Content open fun getBaseIcon (): Icon getChildren [jvm] Content open override fun getChildren (): @NotNull() Array getContainingFile [jvm] Content open override fun getContainingFile (): PsiFile getContext [jvm] Content open override fun getContext (): PsiElement? getCopyableUserData [jvm] Content open override fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T ? getElementIcon [jvm] Content @Nullable() open fun getElementIcon (p0: Int ): @Nullable() Icon ? getFirstChild [jvm] Content open override fun getFirstChild (): PsiElement getIcon [jvm] Content @Nullable() open override fun getIcon (p0: Int ): @Nullable() Icon ? getLanguage [jvm] Content @NotNull() open override fun getLanguage (): @NotNull()Language getLastChild [jvm] Content open override fun getLastChild (): PsiElement getManager [jvm] Content open override fun getManager (): PsiManagerEx getName [jvm] Content open override fun getName (): getNavigationElement [jvm] Content @NotNull() open override fun getNavigationElement (): @NotNull()PsiElement getNextSibling [jvm] Content open override fun getNextSibling (): PsiElement getNode [jvm] Content @NotNull() open override fun getNode (): @NotNull()ASTNode getOriginalElement [jvm] Content open override fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content open override fun getParent (): PsiElement getPresentation [jvm] Content open override fun getPresentation (): ItemPresentation? getPrevSibling [jvm] Content open override fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() open override fun getProject (): @NotNull()Project getReference [jvm] Content open override fun getReference (): PsiReference? getReferences [jvm] Content open override fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() open override fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content open override fun getStartOffsetInParent (): Int getText [jvm] Content open override fun getText (): String getTextLength [jvm] Content open override fun getTextLength (): Int getTextOffset [jvm] Content open override fun getTextOffset (): Int getTextRange [jvm] Content open override fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap getUseScope [jvm] Content @NotNull() open override fun getUseScope (): @NotNull()SearchScope identifier [jvm] Content open override fun identifier (): SqlIdentifier? isEquivalentTo [jvm] Content open override fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content open override fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open override fun isValid (): Boolean isVisibilitySupported [jvm] Content open fun isVisibilitySupported (): Boolean isWritable [jvm] Content open override fun isWritable (): Boolean navigate [jvm] Content open override fun navigate (p0: Boolean ) notNullChild [jvm] Content @NotNull() open fun < T : Any > notNullChild (p0: T ): @NotNull() T processDeclarations [jvm] Content open override fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, p2: PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content open override fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ?) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T replace [jvm] Content open override fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (p0: PsiElement, p1: TreeElement) setName [jvm] Content open override fun setName (name: String ): PsiElement setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open override fun textContains (p0: Char ): Boolean textMatches [jvm] Content open override fun textMatches (@NotNull()p0: @NotNull() CharSequence ): Boolean open override fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean textToCharArray [jvm] Content open override fun textToCharArray (): CharArray toString [jvm] Content open override fun toString (): String Inheritors Name SqlDelightStmtIdentifierClojureImpl SqlDelightStmtIdentifierImpl","title":"StmtIdentifierMixin   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/#stmtidentifiermixin","text":"[jvm] abstract class StmtIdentifierMixin ( node : ASTNode) : ASTWrapperPsiElement, SqlDelightStmtIdentifier , SqlDelightStmtIdentifierClojure , SqlAnnotatedElement","title":"StmtIdentifierMixin"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/#functions","text":"Name Summary accept [jvm] Content open override fun accept (@NotNull()p0: @NotNull()PsiElementVisitor) acceptChildren [jvm] Content open override fun acceptChildren (@NotNull()p0: @NotNull()PsiElementVisitor) add [jvm] Content open override fun add (@NotNull()p0: @NotNull()PsiElement): PsiElement addAfter [jvm] Content open override fun addAfter (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addBefore [jvm] Content open override fun addBefore (@NotNull()p0: @NotNull()PsiElement, p1: PsiElement?): PsiElement addInternal [jvm] Content open fun addInternal (p0: ASTNode, p1: ASTNode, p2: ASTNode, p3: Boolean ): ASTNode addRange [jvm] Content open override fun addRange (p0: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content open override fun addRangeAfter (p0: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content open override fun addRangeBefore (@NotNull()p0: @NotNull()PsiElement, @NotNull()p1: @NotNull()PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder) canNavigate [jvm] Content open override fun canNavigate (): Boolean canNavigateToSource [jvm] Content open override fun canNavigateToSource (): Boolean changeUserMap [jvm] Content open fun changeUserMap (@NotNull()p0: @NotNull()KeyFMap, @NotNull()p1: @NotNull()KeyFMap): Boolean checkAdd [jvm] Content open override fun checkAdd (@NotNull()p0: @NotNull()PsiElement) checkDelete [jvm] Content open override fun checkDelete () clearUserData [jvm] Content open fun clearUserData () computeBaseIcon [jvm] Content open fun computeBaseIcon (p0: Int ): Icon copy [jvm] Content open override fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (@NotNull()p0: @NotNull()UserDataHolderBase) delete [jvm] Content open override fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (@NotNull()p0: @NotNull()ASTNode) deleteChildRange [jvm] Content open override fun deleteChildRange (p0: PsiElement, p1: PsiElement) findChildByClass [jvm] Content @Nullable() open fun < T : Any > findChildByClass (p0: Class < T >): @Nullable() T ? findChildByFilter [jvm] Content @Nullable() open fun findChildByFilter (p0: TokenSet): @Nullable()PsiElement? findChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findChildByType (p0: IElementType): @Nullable() T ? @Nullable() open fun < T : PsiElement> findChildByType (p0: TokenSet): @Nullable() T ? findChildrenByClass [jvm] Content open fun < T : Any > findChildrenByClass (p0: Class < T >): @NotNull() Array < T > findChildrenByType [jvm] Content open fun < T : PsiElement> findChildrenByType (p0: IElementType): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet): MutableList < T > open fun < T : PsiElement> findChildrenByType (p0: IElementType, p1: Class < T >): @NotNull() Array < T > open fun < T : PsiElement> findChildrenByType (p0: TokenSet, p1: Class < T >): @NotNull() Array < T > findElementAt [jvm] Content open override fun findElementAt (p0: Int ): PsiElement? findLastChildByType [jvm] Content @Nullable() open fun < T : PsiElement> findLastChildByType (p0: IElementType): @Nullable() T ? findNotNullChildByClass [jvm] Content @NotNull() open fun < T : Any > findNotNullChildByClass (p0: Class < T >): @NotNull() T findNotNullChildByType [jvm] Content @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: IElementType): @NotNull() T @NotNull() open fun < T : PsiElement> findNotNullChildByType (p0: TokenSet): @NotNull() T findReferenceAt [jvm] Content open override fun findReferenceAt (p0: Int ): PsiReference? getAdjustedBaseIcon [jvm] Content open fun getAdjustedBaseIcon (p0: Icon , p1: Int ): Icon getBaseIcon [jvm] Content open fun getBaseIcon (): Icon getChildren [jvm] Content open override fun getChildren (): @NotNull() Array getContainingFile [jvm] Content open override fun getContainingFile (): PsiFile getContext [jvm] Content open override fun getContext (): PsiElement? getCopyableUserData [jvm] Content open override fun < T : Any > getCopyableUserData (@NotNull()p0: @NotNull()Key< T >): T ? getElementIcon [jvm] Content @Nullable() open fun getElementIcon (p0: Int ): @Nullable() Icon ? getFirstChild [jvm] Content open override fun getFirstChild (): PsiElement getIcon [jvm] Content @Nullable() open override fun getIcon (p0: Int ): @Nullable() Icon ? getLanguage [jvm] Content @NotNull() open override fun getLanguage (): @NotNull()Language getLastChild [jvm] Content open override fun getLastChild (): PsiElement getManager [jvm] Content open override fun getManager (): PsiManagerEx getName [jvm] Content open override fun getName (): getNavigationElement [jvm] Content @NotNull() open override fun getNavigationElement (): @NotNull()PsiElement getNextSibling [jvm] Content open override fun getNextSibling (): PsiElement getNode [jvm] Content @NotNull() open override fun getNode (): @NotNull()ASTNode getOriginalElement [jvm] Content open override fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content @ApiStatus.Experimental() @NotNull() open fun getOwnReferences (): @NotNull() MutableIterable @NotNull()PsiSymbolReference getParent [jvm] Content open override fun getParent (): PsiElement getPresentation [jvm] Content open override fun getPresentation (): ItemPresentation? getPrevSibling [jvm] Content open override fun getPrevSibling (): PsiElement getProject [jvm] Content @NotNull() open override fun getProject (): @NotNull()Project getReference [jvm] Content open override fun getReference (): PsiReference? getReferences [jvm] Content open override fun getReferences (): @NotNull() Array getResolveScope [jvm] Content @NotNull() open override fun getResolveScope (): @NotNull()GlobalSearchScope getStartOffsetInParent [jvm] Content open override fun getStartOffsetInParent (): Int getText [jvm] Content open override fun getText (): String getTextLength [jvm] Content open override fun getTextLength (): Int getTextOffset [jvm] Content open override fun getTextOffset (): Int getTextRange [jvm] Content open override fun getTextRange (): TextRange getTextRangeInParent [jvm] Content @Contract(pure = true) @NotNull() open fun getTextRangeInParent (): @NotNull()TextRange getUserData [jvm] Content open override fun < T : Any > getUserData (@NotNull()p0: @NotNull()Key< T >): T ? getUserDataString [jvm] Content open fun getUserDataString (): String getUserMap [jvm] Content @NotNull() open fun getUserMap (): @NotNull()KeyFMap getUseScope [jvm] Content @NotNull() open override fun getUseScope (): @NotNull()SearchScope identifier [jvm] Content open override fun identifier (): SqlIdentifier? isEquivalentTo [jvm] Content open override fun isEquivalentTo (p0: PsiElement): Boolean isPhysical [jvm] Content open override fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open override fun isValid (): Boolean isVisibilitySupported [jvm] Content open fun isVisibilitySupported (): Boolean isWritable [jvm] Content open override fun isWritable (): Boolean navigate [jvm] Content open override fun navigate (p0: Boolean ) notNullChild [jvm] Content @NotNull() open fun < T : Any > notNullChild (p0: T ): @NotNull() T processDeclarations [jvm] Content open override fun processDeclarations (@NotNull()p0: @NotNull()PsiScopeProcessor, @NotNull()p1: @NotNull()ResolveState, p2: PsiElement?, @NotNull()p3: @NotNull()PsiElement): Boolean putCopyableUserData [jvm] Content open override fun < T : Any > putCopyableUserData (@NotNull()p0: @NotNull()Key< T >, p1: T ?) putUserData [jvm] Content open override fun < T : Any > putUserData (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?) putUserDataIfAbsent [jvm] Content @NotNull() open override fun < T : Any > putUserDataIfAbsent (@NotNull()p0: @NotNull()Key< T >, @NotNull()p1: @NotNull() T ): @NotNull() T replace [jvm] Content open override fun replace (@NotNull()p0: @NotNull()PsiElement): PsiElement open override fun < T : Any > replace (@NotNull()p0: @NotNull()Key< T >, @Nullable()p1: @Nullable() T ?, @Nullable()p2: @Nullable() T ?): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (p0: PsiElement, p1: TreeElement) setName [jvm] Content open override fun setName (name: String ): PsiElement setUserMap [jvm] Content open fun setUserMap (@NotNull()p0: @NotNull()KeyFMap) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open override fun textContains (p0: Char ): Boolean textMatches [jvm] Content open override fun textMatches (@NotNull()p0: @NotNull() CharSequence ): Boolean open override fun textMatches (@NotNull()p0: @NotNull()PsiElement): Boolean textToCharArray [jvm] Content open override fun textToCharArray (): CharArray toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/#inheritors","text":"Name SqlDelightStmtIdentifierClojureImpl SqlDelightStmtIdentifierImpl","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/-stmt-identifier-mixin/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / StmtIdentifierMixin / StmtIdentifierMixin StmtIdentifierMixin [jvm] Content fun StmtIdentifierMixin (node: ASTNode)","title":"StmtIdentifierMixin   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/-stmt-identifier-mixin/#stmtidentifiermixin","text":"[jvm] Content fun StmtIdentifierMixin (node: ASTNode)","title":"StmtIdentifierMixin"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/annotate/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / StmtIdentifierMixin / annotate annotate [jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder)","title":"annotate   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/annotate/#annotate","text":"[jvm] Content open override fun annotate (annotationHolder: SqlAnnotationHolder)","title":"annotate"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/get-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / StmtIdentifierMixin / getName getName [jvm] Content open override fun getName ():","title":"getName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/get-name/#getname","text":"[jvm] Content open override fun getName ():","title":"getName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/identifier/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / StmtIdentifierMixin / identifier identifier [jvm] Content open override fun identifier (): SqlIdentifier?","title":"identifier   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/identifier/#identifier","text":"[jvm] Content open override fun identifier (): SqlIdentifier?","title":"identifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/set-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / StmtIdentifierMixin / setName setName [jvm] Content open override fun setName (name: String ): PsiElement","title":"setName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/set-name/#setname","text":"[jvm] Content open override fun setName (name: String ): PsiElement","title":"setName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.util Package com.squareup.sqldelight.core.lang.util Functions Name Summary childOfType [jvm] Content fun PsiElement. childOfType (type: IElementType): PsiElement? fun PsiElement. childOfType (types: TokenSet): PsiElement? findChildOfType [jvm] Content inline fun < T : PsiElement> PsiElement. findChildOfType (): T ? findChildrenOfType [jvm] Content inline fun < T : PsiElement> PsiElement. findChildrenOfType (): Collection < T > forInitializationStatements [jvm] Content fun Collection < SqlDelightQueriesFile >. forInitializationStatements (allowReferenceCycles: Boolean , body: (sqlText: String ) -> Unit ) nextSiblingOfType [jvm] Content inline fun < T : PsiElement> PsiElement. nextSiblingOfType (): T rawSqlText [jvm] Content fun PsiElement. rawSqlText (replacements: List < Pair < IntRange , String >> = emptyList()): String Properties Name Summary allowsReferenceCycles [jvm] val DialectPreset. allowsReferenceCycles : Boolean","title":"Package com.squareup.sqldelight.core.lang.util   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/#package-comsquareupsqldelightcorelangutil","text":"","title":"Package com.squareup.sqldelight.core.lang.util"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/#functions","text":"Name Summary childOfType [jvm] Content fun PsiElement. childOfType (type: IElementType): PsiElement? fun PsiElement. childOfType (types: TokenSet): PsiElement? findChildOfType [jvm] Content inline fun < T : PsiElement> PsiElement. findChildOfType (): T ? findChildrenOfType [jvm] Content inline fun < T : PsiElement> PsiElement. findChildrenOfType (): Collection < T > forInitializationStatements [jvm] Content fun Collection < SqlDelightQueriesFile >. forInitializationStatements (allowReferenceCycles: Boolean , body: (sqlText: String ) -> Unit ) nextSiblingOfType [jvm] Content inline fun < T : PsiElement> PsiElement. nextSiblingOfType (): T rawSqlText [jvm] Content fun PsiElement. rawSqlText (replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/#properties","text":"Name Summary allowsReferenceCycles [jvm] val DialectPreset. allowsReferenceCycles : Boolean","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/allows-reference-cycles/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.util / allowsReferenceCycles allowsReferenceCycles [jvm] Content val DialectPreset. allowsReferenceCycles : Boolean","title":"allowsReferenceCycles   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/allows-reference-cycles/#allowsreferencecycles","text":"[jvm] Content val DialectPreset. allowsReferenceCycles : Boolean","title":"allowsReferenceCycles"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/child-of-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.util / childOfType childOfType [jvm] Content fun PsiElement. childOfType (type: IElementType): PsiElement? fun PsiElement. childOfType (types: TokenSet): PsiElement?","title":"childOfType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/child-of-type/#childoftype","text":"[jvm] Content fun PsiElement. childOfType (type: IElementType): PsiElement? fun PsiElement. childOfType (types: TokenSet): PsiElement?","title":"childOfType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/find-child-of-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.util / findChildOfType findChildOfType [jvm] Content inline fun < T : PsiElement> PsiElement. findChildOfType (): T ?","title":"findChildOfType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/find-child-of-type/#findchildoftype","text":"[jvm] Content inline fun < T : PsiElement> PsiElement. findChildOfType (): T ?","title":"findChildOfType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/find-children-of-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.util / findChildrenOfType findChildrenOfType [jvm] Content inline fun < T : PsiElement> PsiElement. findChildrenOfType (): Collection < T >","title":"findChildrenOfType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/find-children-of-type/#findchildrenoftype","text":"[jvm] Content inline fun < T : PsiElement> PsiElement. findChildrenOfType (): Collection < T >","title":"findChildrenOfType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/for-initialization-statements/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.util / forInitializationStatements forInitializationStatements [jvm] Content fun Collection < SqlDelightQueriesFile >. forInitializationStatements (allowReferenceCycles: Boolean , body: (sqlText: String ) -> Unit )","title":"forInitializationStatements   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/for-initialization-statements/#forinitializationstatements","text":"[jvm] Content fun Collection < SqlDelightQueriesFile >. forInitializationStatements (allowReferenceCycles: Boolean , body: (sqlText: String ) -> Unit )","title":"forInitializationStatements"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/next-sibling-of-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.util / nextSiblingOfType nextSiblingOfType [jvm] Content inline fun < T : PsiElement> PsiElement. nextSiblingOfType (): T","title":"nextSiblingOfType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/next-sibling-of-type/#nextsiblingoftype","text":"[jvm] Content inline fun < T : PsiElement> PsiElement. nextSiblingOfType (): T","title":"nextSiblingOfType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/raw-sql-text/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.lang.util / rawSqlText rawSqlText [jvm] Content fun PsiElement. rawSqlText (replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"rawSqlText   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/raw-sql-text/#rawsqltext","text":"[jvm] Content fun PsiElement. rawSqlText (replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"rawSqlText"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi Package com.squareup.sqldelight.core.psi Types Name Summary SqlDelightAnnotation [jvm] Content interface SqlDelightAnnotation : PsiElement SqlDelightAnnotationValue [jvm] Content interface SqlDelightAnnotationValue : PsiElement SqlDelightColumnType [jvm] Content interface SqlDelightColumnType : SqlColumnType, TypedColumn SqlDelightImportStmt [jvm] Content interface SqlDelightImportStmt : PsiElement SqlDelightImportStmtList [jvm] Content interface SqlDelightImportStmtList : PsiElement SqlDelightInsertStmtValues [jvm] Content interface SqlDelightInsertStmtValues : SqlInsertStmtValues SqlDelightInsertStmtValuesReal [jvm] Content interface SqlDelightInsertStmtValuesReal : SqlInsertStmtValues SqlDelightJavaType [jvm] Content interface SqlDelightJavaType : PsiElement SqlDelightJavaTypeName [jvm] Content interface SqlDelightJavaTypeName : PsiElement SqlDelightJavaTypeName2 [jvm] Content interface SqlDelightJavaTypeName2 : PsiElement SqlDelightOverrides [jvm] Content interface SqlDelightOverrides : PsiElement SqlDelightParameterizedJavaType [jvm] Content interface SqlDelightParameterizedJavaType : PsiElement SqlDelightStmtClojure [jvm] Content interface SqlDelightStmtClojure : SqlCompositeElement SqlDelightStmtClojureStmtList [jvm] Content interface SqlDelightStmtClojureStmtList : SqlCompositeElement SqlDelightStmtIdentifier [jvm] Content interface SqlDelightStmtIdentifier : StmtIdentifier SqlDelightStmtIdentifierClojure [jvm] Content interface SqlDelightStmtIdentifierClojure : SqlDelightStmtIdentifier SqlDelightStmtList [jvm] Content interface SqlDelightStmtList : SqlStmtList SqldelightTypes [jvm] Content interface SqldelightTypes SqlDelightVisitor [jvm] Content open class SqlDelightVisitor : PsiElementVisitor","title":"Package com.squareup.sqldelight.core.psi   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/#package-comsquareupsqldelightcorepsi","text":"","title":"Package com.squareup.sqldelight.core.psi"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/#types","text":"Name Summary SqlDelightAnnotation [jvm] Content interface SqlDelightAnnotation : PsiElement SqlDelightAnnotationValue [jvm] Content interface SqlDelightAnnotationValue : PsiElement SqlDelightColumnType [jvm] Content interface SqlDelightColumnType : SqlColumnType, TypedColumn SqlDelightImportStmt [jvm] Content interface SqlDelightImportStmt : PsiElement SqlDelightImportStmtList [jvm] Content interface SqlDelightImportStmtList : PsiElement SqlDelightInsertStmtValues [jvm] Content interface SqlDelightInsertStmtValues : SqlInsertStmtValues SqlDelightInsertStmtValuesReal [jvm] Content interface SqlDelightInsertStmtValuesReal : SqlInsertStmtValues SqlDelightJavaType [jvm] Content interface SqlDelightJavaType : PsiElement SqlDelightJavaTypeName [jvm] Content interface SqlDelightJavaTypeName : PsiElement SqlDelightJavaTypeName2 [jvm] Content interface SqlDelightJavaTypeName2 : PsiElement SqlDelightOverrides [jvm] Content interface SqlDelightOverrides : PsiElement SqlDelightParameterizedJavaType [jvm] Content interface SqlDelightParameterizedJavaType : PsiElement SqlDelightStmtClojure [jvm] Content interface SqlDelightStmtClojure : SqlCompositeElement SqlDelightStmtClojureStmtList [jvm] Content interface SqlDelightStmtClojureStmtList : SqlCompositeElement SqlDelightStmtIdentifier [jvm] Content interface SqlDelightStmtIdentifier : StmtIdentifier SqlDelightStmtIdentifierClojure [jvm] Content interface SqlDelightStmtIdentifierClojure : SqlDelightStmtIdentifier SqlDelightStmtList [jvm] Content interface SqlDelightStmtList : SqlStmtList SqldelightTypes [jvm] Content interface SqldelightTypes SqlDelightVisitor [jvm] Content open class SqlDelightVisitor : PsiElementVisitor","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightAnnotation SqlDelightAnnotation [jvm] interface SqlDelightAnnotation : PsiElement Functions Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getAnnotationValueList [jvm] Content @NotNull() abstract fun getAnnotationValueList (): @NotNull() List < SqlDelightAnnotationValue > getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getJavaType [jvm] Content @NotNull() abstract fun getJavaType (): @NotNull() SqlDelightJavaType getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String Inheritors Name SqlDelightAnnotationImpl","title":"SqlDelightAnnotation   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation/#sqldelightannotation","text":"[jvm] interface SqlDelightAnnotation : PsiElement","title":"SqlDelightAnnotation"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getAnnotationValueList [jvm] Content @NotNull() abstract fun getAnnotationValueList (): @NotNull() List < SqlDelightAnnotationValue > getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getJavaType [jvm] Content @NotNull() abstract fun getJavaType (): @NotNull() SqlDelightJavaType getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation/#inheritors","text":"Name SqlDelightAnnotationImpl","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation/get-annotation-value-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightAnnotation / getAnnotationValueList getAnnotationValueList [jvm] Content @NotNull() abstract fun getAnnotationValueList (): @NotNull() List < SqlDelightAnnotationValue >","title":"getAnnotationValueList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation/get-annotation-value-list/#getannotationvaluelist","text":"[jvm] Content @NotNull() abstract fun getAnnotationValueList (): @NotNull() List < SqlDelightAnnotationValue >","title":"getAnnotationValueList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation/get-java-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightAnnotation / getJavaType getJavaType [jvm] Content @NotNull() abstract fun getJavaType (): @NotNull() SqlDelightJavaType","title":"getJavaType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation/get-java-type/#getjavatype","text":"[jvm] Content @NotNull() abstract fun getJavaType (): @NotNull() SqlDelightJavaType","title":"getJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightAnnotationValue SqlDelightAnnotationValue [jvm] interface SqlDelightAnnotationValue : PsiElement Functions Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getAnnotation [jvm] Content @Nullable() abstract fun getAnnotation (): @Nullable() SqlDelightAnnotation getAnnotationValueList [jvm] Content @NotNull() abstract fun getAnnotationValueList (): @NotNull() List < SqlDelightAnnotationValue > getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getJavaTypeName [jvm] Content @Nullable() abstract fun getJavaTypeName (): @Nullable() SqlDelightJavaTypeName getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String Inheritors Name SqlDelightAnnotationValueImpl","title":"SqlDelightAnnotationValue   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/#sqldelightannotationvalue","text":"[jvm] interface SqlDelightAnnotationValue : PsiElement","title":"SqlDelightAnnotationValue"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getAnnotation [jvm] Content @Nullable() abstract fun getAnnotation (): @Nullable() SqlDelightAnnotation getAnnotationValueList [jvm] Content @NotNull() abstract fun getAnnotationValueList (): @NotNull() List < SqlDelightAnnotationValue > getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getJavaTypeName [jvm] Content @Nullable() abstract fun getJavaTypeName (): @Nullable() SqlDelightJavaTypeName getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/#inheritors","text":"Name SqlDelightAnnotationValueImpl","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/get-annotation-value-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightAnnotationValue / getAnnotationValueList getAnnotationValueList [jvm] Content @NotNull() abstract fun getAnnotationValueList (): @NotNull() List < SqlDelightAnnotationValue >","title":"getAnnotationValueList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/get-annotation-value-list/#getannotationvaluelist","text":"[jvm] Content @NotNull() abstract fun getAnnotationValueList (): @NotNull() List < SqlDelightAnnotationValue >","title":"getAnnotationValueList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/get-annotation/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightAnnotationValue / getAnnotation getAnnotation [jvm] Content @Nullable() abstract fun getAnnotation (): @Nullable() SqlDelightAnnotation","title":"getAnnotation   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/get-annotation/#getannotation","text":"[jvm] Content @Nullable() abstract fun getAnnotation (): @Nullable() SqlDelightAnnotation","title":"getAnnotation"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/get-java-type-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightAnnotationValue / getJavaTypeName getJavaTypeName [jvm] Content @Nullable() abstract fun getJavaTypeName (): @Nullable() SqlDelightJavaTypeName","title":"getJavaTypeName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/get-java-type-name/#getjavatypename","text":"[jvm] Content @Nullable() abstract fun getJavaTypeName (): @Nullable() SqlDelightJavaTypeName","title":"getJavaTypeName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-column-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightColumnType SqlDelightColumnType [jvm] interface SqlDelightColumnType : SqlColumnType, TypedColumn Functions Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) adapter [jvm] Content abstract fun adapter (): PropertySpec add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getAnnotationList [jvm] Content @NotNull() abstract fun getAnnotationList (): @NotNull() List < SqlDelightAnnotation > getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): SqlFileBase abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getJavaTypeName [jvm] Content @Nullable() abstract fun getJavaTypeName (): @Nullable() SqlDelightJavaTypeName getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getTypeName [jvm] Content abstract fun getTypeName (): SqlTypeName getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) queryAvailable [jvm] Content abstract fun queryAvailable (p: PsiElement): Collection replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement tablesAvailable [jvm] Content abstract fun tablesAvailable (p: PsiElement): Collection textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String type [jvm] Content abstract fun type (): IntermediateType Inheritors Name SqlDelightColumnTypeImpl","title":"SqlDelightColumnType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-column-type/#sqldelightcolumntype","text":"[jvm] interface SqlDelightColumnType : SqlColumnType, TypedColumn","title":"SqlDelightColumnType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-column-type/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) adapter [jvm] Content abstract fun adapter (): PropertySpec add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getAnnotationList [jvm] Content @NotNull() abstract fun getAnnotationList (): @NotNull() List < SqlDelightAnnotation > getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): SqlFileBase abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getJavaTypeName [jvm] Content @Nullable() abstract fun getJavaTypeName (): @Nullable() SqlDelightJavaTypeName getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getTypeName [jvm] Content abstract fun getTypeName (): SqlTypeName getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) queryAvailable [jvm] Content abstract fun queryAvailable (p: PsiElement): Collection replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement tablesAvailable [jvm] Content abstract fun tablesAvailable (p: PsiElement): Collection textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String type [jvm] Content abstract fun type (): IntermediateType","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-column-type/#inheritors","text":"Name SqlDelightColumnTypeImpl","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-column-type/get-annotation-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightColumnType / getAnnotationList getAnnotationList [jvm] Content @NotNull() abstract fun getAnnotationList (): @NotNull() List < SqlDelightAnnotation >","title":"getAnnotationList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-column-type/get-annotation-list/#getannotationlist","text":"[jvm] Content @NotNull() abstract fun getAnnotationList (): @NotNull() List < SqlDelightAnnotation >","title":"getAnnotationList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-column-type/get-java-type-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightColumnType / getJavaTypeName getJavaTypeName [jvm] Content @Nullable() abstract fun getJavaTypeName (): @Nullable() SqlDelightJavaTypeName","title":"getJavaTypeName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-column-type/get-java-type-name/#getjavatypename","text":"[jvm] Content @Nullable() abstract fun getJavaTypeName (): @Nullable() SqlDelightJavaTypeName","title":"getJavaTypeName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightImportStmt SqlDelightImportStmt [jvm] interface SqlDelightImportStmt : PsiElement Functions Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getJavaType [jvm] Content @NotNull() abstract fun getJavaType (): @NotNull() SqlDelightJavaType getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String Inheritors Name SqlDelightImportStmtImpl ImportStmtMixin","title":"SqlDelightImportStmt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt/#sqldelightimportstmt","text":"[jvm] interface SqlDelightImportStmt : PsiElement","title":"SqlDelightImportStmt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getJavaType [jvm] Content @NotNull() abstract fun getJavaType (): @NotNull() SqlDelightJavaType getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt/#inheritors","text":"Name SqlDelightImportStmtImpl ImportStmtMixin","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt/get-java-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightImportStmt / getJavaType getJavaType [jvm] Content @NotNull() abstract fun getJavaType (): @NotNull() SqlDelightJavaType","title":"getJavaType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt/get-java-type/#getjavatype","text":"[jvm] Content @NotNull() abstract fun getJavaType (): @NotNull() SqlDelightJavaType","title":"getJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightImportStmtList SqlDelightImportStmtList [jvm] interface SqlDelightImportStmtList : PsiElement Functions Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getImportStmtList [jvm] Content @NotNull() abstract fun getImportStmtList (): @NotNull() List < SqlDelightImportStmt > getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String Inheritors Name SqlDelightImportStmtListImpl","title":"SqlDelightImportStmtList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt-list/#sqldelightimportstmtlist","text":"[jvm] interface SqlDelightImportStmtList : PsiElement","title":"SqlDelightImportStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt-list/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getImportStmtList [jvm] Content @NotNull() abstract fun getImportStmtList (): @NotNull() List < SqlDelightImportStmt > getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt-list/#inheritors","text":"Name SqlDelightImportStmtListImpl","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt-list/get-import-stmt-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightImportStmtList / getImportStmtList getImportStmtList [jvm] Content @NotNull() abstract fun getImportStmtList (): @NotNull() List < SqlDelightImportStmt >","title":"getImportStmtList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt-list/get-import-stmt-list/#getimportstmtlist","text":"[jvm] Content @NotNull() abstract fun getImportStmtList (): @NotNull() List < SqlDelightImportStmt >","title":"getImportStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-insert-stmt-values/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightInsertStmtValues SqlDelightInsertStmtValues [jvm] interface SqlDelightInsertStmtValues : SqlInsertStmtValues Functions Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getCompoundSelectStmt [jvm] Content abstract fun getCompoundSelectStmt (): SqlCompoundSelectStmt getContainingFile [jvm] Content abstract fun getContainingFile (): SqlFileBase abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope getValuesExpressionList [jvm] Content abstract fun getValuesExpressionList (): List isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) queryAvailable [jvm] Content abstract fun queryAvailable (p: PsiElement): Collection replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement tablesAvailable [jvm] Content abstract fun tablesAvailable (p: PsiElement): Collection textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String Inheritors Name SqlDelightInsertStmtValuesImpl InsertStmtValuesMixin","title":"SqlDelightInsertStmtValues   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-insert-stmt-values/#sqldelightinsertstmtvalues","text":"[jvm] interface SqlDelightInsertStmtValues : SqlInsertStmtValues","title":"SqlDelightInsertStmtValues"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-insert-stmt-values/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getCompoundSelectStmt [jvm] Content abstract fun getCompoundSelectStmt (): SqlCompoundSelectStmt getContainingFile [jvm] Content abstract fun getContainingFile (): SqlFileBase abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope getValuesExpressionList [jvm] Content abstract fun getValuesExpressionList (): List isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) queryAvailable [jvm] Content abstract fun queryAvailable (p: PsiElement): Collection replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement tablesAvailable [jvm] Content abstract fun tablesAvailable (p: PsiElement): Collection textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-insert-stmt-values/#inheritors","text":"Name SqlDelightInsertStmtValuesImpl InsertStmtValuesMixin","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-insert-stmt-values-real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightInsertStmtValuesReal SqlDelightInsertStmtValuesReal [jvm] interface SqlDelightInsertStmtValuesReal : SqlInsertStmtValues Functions Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getCompoundSelectStmt [jvm] Content abstract fun getCompoundSelectStmt (): SqlCompoundSelectStmt getContainingFile [jvm] Content abstract fun getContainingFile (): SqlFileBase abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope getValuesExpressionList [jvm] Content abstract fun getValuesExpressionList (): List isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) queryAvailable [jvm] Content abstract fun queryAvailable (p: PsiElement): Collection replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement tablesAvailable [jvm] Content abstract fun tablesAvailable (p: PsiElement): Collection textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String Inheritors Name SqlDelightInsertStmtValuesRealImpl","title":"SqlDelightInsertStmtValuesReal   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-insert-stmt-values-real/#sqldelightinsertstmtvaluesreal","text":"[jvm] interface SqlDelightInsertStmtValuesReal : SqlInsertStmtValues","title":"SqlDelightInsertStmtValuesReal"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-insert-stmt-values-real/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getCompoundSelectStmt [jvm] Content abstract fun getCompoundSelectStmt (): SqlCompoundSelectStmt getContainingFile [jvm] Content abstract fun getContainingFile (): SqlFileBase abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope getValuesExpressionList [jvm] Content abstract fun getValuesExpressionList (): List isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) queryAvailable [jvm] Content abstract fun queryAvailable (p: PsiElement): Collection replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement tablesAvailable [jvm] Content abstract fun tablesAvailable (p: PsiElement): Collection textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-insert-stmt-values-real/#inheritors","text":"Name SqlDelightInsertStmtValuesRealImpl","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightJavaType SqlDelightJavaType [jvm] interface SqlDelightJavaType : PsiElement Functions Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String Inheritors Name SqlDelightJavaTypeImpl","title":"SqlDelightJavaType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type/#sqldelightjavatype","text":"[jvm] interface SqlDelightJavaType : PsiElement","title":"SqlDelightJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type/#inheritors","text":"Name SqlDelightJavaTypeImpl","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightJavaTypeName SqlDelightJavaTypeName [jvm] interface SqlDelightJavaTypeName : PsiElement Functions Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParameterizedJavaType [jvm] Content @Nullable() abstract fun getParameterizedJavaType (): @Nullable() SqlDelightParameterizedJavaType getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String Inheritors Name SqlDelightJavaTypeNameImpl","title":"SqlDelightJavaTypeName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name/#sqldelightjavatypename","text":"[jvm] interface SqlDelightJavaTypeName : PsiElement","title":"SqlDelightJavaTypeName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParameterizedJavaType [jvm] Content @Nullable() abstract fun getParameterizedJavaType (): @Nullable() SqlDelightParameterizedJavaType getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name/#inheritors","text":"Name SqlDelightJavaTypeNameImpl","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name/get-parameterized-java-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightJavaTypeName / getParameterizedJavaType getParameterizedJavaType [jvm] Content @Nullable() abstract fun getParameterizedJavaType (): @Nullable() SqlDelightParameterizedJavaType","title":"getParameterizedJavaType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name/get-parameterized-java-type/#getparameterizedjavatype","text":"[jvm] Content @Nullable() abstract fun getParameterizedJavaType (): @Nullable() SqlDelightParameterizedJavaType","title":"getParameterizedJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name2/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightJavaTypeName2 SqlDelightJavaTypeName2 [jvm] interface SqlDelightJavaTypeName2 : PsiElement Functions Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getJavaType [jvm] Content @NotNull() abstract fun getJavaType (): @NotNull() SqlDelightJavaType getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String Inheritors Name SqlDelightJavaTypeName2Impl","title":"SqlDelightJavaTypeName2   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name2/#sqldelightjavatypename2","text":"[jvm] interface SqlDelightJavaTypeName2 : PsiElement","title":"SqlDelightJavaTypeName2"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name2/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getJavaType [jvm] Content @NotNull() abstract fun getJavaType (): @NotNull() SqlDelightJavaType getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name2/#inheritors","text":"Name SqlDelightJavaTypeName2Impl","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name2/get-java-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightJavaTypeName2 / getJavaType getJavaType [jvm] Content @NotNull() abstract fun getJavaType (): @NotNull() SqlDelightJavaType","title":"getJavaType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name2/get-java-type/#getjavatype","text":"[jvm] Content @NotNull() abstract fun getJavaType (): @NotNull() SqlDelightJavaType","title":"getJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightOverrides SqlDelightOverrides [jvm] interface SqlDelightOverrides : PsiElement Functions Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getColumnType [jvm] Content @Nullable() abstract fun getColumnType (): @Nullable() SqlDelightColumnType getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getInsertStmtValues [jvm] Content @Nullable() abstract fun getInsertStmtValues (): @Nullable() SqlDelightInsertStmtValues getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getStmtList [jvm] Content @Nullable() abstract fun getStmtList (): @Nullable() SqlDelightStmtList getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String Inheritors Name SqlDelightOverridesImpl","title":"SqlDelightOverrides   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/#sqldelightoverrides","text":"[jvm] interface SqlDelightOverrides : PsiElement","title":"SqlDelightOverrides"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getColumnType [jvm] Content @Nullable() abstract fun getColumnType (): @Nullable() SqlDelightColumnType getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getInsertStmtValues [jvm] Content @Nullable() abstract fun getInsertStmtValues (): @Nullable() SqlDelightInsertStmtValues getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getStmtList [jvm] Content @Nullable() abstract fun getStmtList (): @Nullable() SqlDelightStmtList getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/#inheritors","text":"Name SqlDelightOverridesImpl","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/get-column-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightOverrides / getColumnType getColumnType [jvm] Content @Nullable() abstract fun getColumnType (): @Nullable() SqlDelightColumnType","title":"getColumnType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/get-column-type/#getcolumntype","text":"[jvm] Content @Nullable() abstract fun getColumnType (): @Nullable() SqlDelightColumnType","title":"getColumnType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/get-insert-stmt-values/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightOverrides / getInsertStmtValues getInsertStmtValues [jvm] Content @Nullable() abstract fun getInsertStmtValues (): @Nullable() SqlDelightInsertStmtValues","title":"getInsertStmtValues   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/get-insert-stmt-values/#getinsertstmtvalues","text":"[jvm] Content @Nullable() abstract fun getInsertStmtValues (): @Nullable() SqlDelightInsertStmtValues","title":"getInsertStmtValues"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/get-stmt-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightOverrides / getStmtList getStmtList [jvm] Content @Nullable() abstract fun getStmtList (): @Nullable() SqlDelightStmtList","title":"getStmtList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/get-stmt-list/#getstmtlist","text":"[jvm] Content @Nullable() abstract fun getStmtList (): @Nullable() SqlDelightStmtList","title":"getStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightParameterizedJavaType SqlDelightParameterizedJavaType [jvm] interface SqlDelightParameterizedJavaType : PsiElement Functions Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getJavaTypeList [jvm] Content @NotNull() abstract fun getJavaTypeList (): @NotNull() List < SqlDelightJavaType > getJavaTypeName2List [jvm] Content @NotNull() abstract fun getJavaTypeName2List (): @NotNull() List < SqlDelightJavaTypeName2 > getJavaTypeNameList [jvm] Content @NotNull() abstract fun getJavaTypeNameList (): @NotNull() List < SqlDelightJavaTypeName > getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String Inheritors Name SqlDelightParameterizedJavaTypeImpl","title":"SqlDelightParameterizedJavaType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/#sqldelightparameterizedjavatype","text":"[jvm] interface SqlDelightParameterizedJavaType : PsiElement","title":"SqlDelightParameterizedJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getJavaTypeList [jvm] Content @NotNull() abstract fun getJavaTypeList (): @NotNull() List < SqlDelightJavaType > getJavaTypeName2List [jvm] Content @NotNull() abstract fun getJavaTypeName2List (): @NotNull() List < SqlDelightJavaTypeName2 > getJavaTypeNameList [jvm] Content @NotNull() abstract fun getJavaTypeNameList (): @NotNull() List < SqlDelightJavaTypeName > getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/#inheritors","text":"Name SqlDelightParameterizedJavaTypeImpl","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/get-java-type-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightParameterizedJavaType / getJavaTypeList getJavaTypeList [jvm] Content @NotNull() abstract fun getJavaTypeList (): @NotNull() List < SqlDelightJavaType >","title":"getJavaTypeList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/get-java-type-list/#getjavatypelist","text":"[jvm] Content @NotNull() abstract fun getJavaTypeList (): @NotNull() List < SqlDelightJavaType >","title":"getJavaTypeList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/get-java-type-name-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightParameterizedJavaType / getJavaTypeNameList getJavaTypeNameList [jvm] Content @NotNull() abstract fun getJavaTypeNameList (): @NotNull() List < SqlDelightJavaTypeName >","title":"getJavaTypeNameList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/get-java-type-name-list/#getjavatypenamelist","text":"[jvm] Content @NotNull() abstract fun getJavaTypeNameList (): @NotNull() List < SqlDelightJavaTypeName >","title":"getJavaTypeNameList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/get-java-type-name2-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightParameterizedJavaType / getJavaTypeName2List getJavaTypeName2List [jvm] Content @NotNull() abstract fun getJavaTypeName2List (): @NotNull() List < SqlDelightJavaTypeName2 >","title":"getJavaTypeName2List   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/get-java-type-name2-list/#getjavatypename2list","text":"[jvm] Content @NotNull() abstract fun getJavaTypeName2List (): @NotNull() List < SqlDelightJavaTypeName2 >","title":"getJavaTypeName2List"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtClojure SqlDelightStmtClojure [jvm] interface SqlDelightStmtClojure : SqlCompositeElement Functions Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): SqlFileBase abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getStmtClojureStmtList [jvm] Content @Nullable() abstract fun getStmtClojureStmtList (): @Nullable() SqlDelightStmtClojureStmtList getStmtIdentifierClojure [jvm] Content @NotNull() abstract fun getStmtIdentifierClojure (): @NotNull() SqlDelightStmtIdentifierClojure getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) queryAvailable [jvm] Content abstract fun queryAvailable (p: PsiElement): Collection replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement tablesAvailable [jvm] Content abstract fun tablesAvailable (p: PsiElement): Collection textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String Inheritors Name SqlDelightStmtClojureImpl","title":"SqlDelightStmtClojure   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure/#sqldelightstmtclojure","text":"[jvm] interface SqlDelightStmtClojure : SqlCompositeElement","title":"SqlDelightStmtClojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): SqlFileBase abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getStmtClojureStmtList [jvm] Content @Nullable() abstract fun getStmtClojureStmtList (): @Nullable() SqlDelightStmtClojureStmtList getStmtIdentifierClojure [jvm] Content @NotNull() abstract fun getStmtIdentifierClojure (): @NotNull() SqlDelightStmtIdentifierClojure getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) queryAvailable [jvm] Content abstract fun queryAvailable (p: PsiElement): Collection replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement tablesAvailable [jvm] Content abstract fun tablesAvailable (p: PsiElement): Collection textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure/#inheritors","text":"Name SqlDelightStmtClojureImpl","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure/get-stmt-clojure-stmt-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtClojure / getStmtClojureStmtList getStmtClojureStmtList [jvm] Content @Nullable() abstract fun getStmtClojureStmtList (): @Nullable() SqlDelightStmtClojureStmtList","title":"getStmtClojureStmtList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure/get-stmt-clojure-stmt-list/#getstmtclojurestmtlist","text":"[jvm] Content @Nullable() abstract fun getStmtClojureStmtList (): @Nullable() SqlDelightStmtClojureStmtList","title":"getStmtClojureStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure/get-stmt-identifier-clojure/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtClojure / getStmtIdentifierClojure getStmtIdentifierClojure [jvm] Content @NotNull() abstract fun getStmtIdentifierClojure (): @NotNull() SqlDelightStmtIdentifierClojure","title":"getStmtIdentifierClojure   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure/get-stmt-identifier-clojure/#getstmtidentifierclojure","text":"[jvm] Content @NotNull() abstract fun getStmtIdentifierClojure (): @NotNull() SqlDelightStmtIdentifierClojure","title":"getStmtIdentifierClojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure-stmt-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtClojureStmtList SqlDelightStmtClojureStmtList [jvm] interface SqlDelightStmtClojureStmtList : SqlCompositeElement Functions Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): SqlFileBase abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) queryAvailable [jvm] Content abstract fun queryAvailable (p: PsiElement): Collection replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement tablesAvailable [jvm] Content abstract fun tablesAvailable (p: PsiElement): Collection textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String Inheritors Name SqlDelightStmtClojureStmtListImpl ClojureStmtListMixin","title":"SqlDelightStmtClojureStmtList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure-stmt-list/#sqldelightstmtclojurestmtlist","text":"[jvm] interface SqlDelightStmtClojureStmtList : SqlCompositeElement","title":"SqlDelightStmtClojureStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure-stmt-list/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): SqlFileBase abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) queryAvailable [jvm] Content abstract fun queryAvailable (p: PsiElement): Collection replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement tablesAvailable [jvm] Content abstract fun tablesAvailable (p: PsiElement): Collection textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure-stmt-list/#inheritors","text":"Name SqlDelightStmtClojureStmtListImpl ClojureStmtListMixin","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-identifier/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtIdentifier SqlDelightStmtIdentifier [jvm] interface SqlDelightStmtIdentifier : StmtIdentifier Functions Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getName [jvm] Content abstract fun getName (): String getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope identifier [jvm] Content abstract fun identifier (): Null isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement setName [jvm] Content abstract fun setName (p: String ): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String Inheritors Name SqlDelightStmtIdentifierClojure SqlDelightStmtIdentifierImpl StmtIdentifierMixin","title":"SqlDelightStmtIdentifier   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-identifier/#sqldelightstmtidentifier","text":"[jvm] interface SqlDelightStmtIdentifier : StmtIdentifier","title":"SqlDelightStmtIdentifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-identifier/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getName [jvm] Content abstract fun getName (): String getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope identifier [jvm] Content abstract fun identifier (): Null isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement setName [jvm] Content abstract fun setName (p: String ): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-identifier/#inheritors","text":"Name SqlDelightStmtIdentifierClojure SqlDelightStmtIdentifierImpl StmtIdentifierMixin","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-identifier-clojure/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtIdentifierClojure SqlDelightStmtIdentifierClojure [jvm] interface SqlDelightStmtIdentifierClojure : SqlDelightStmtIdentifier Functions Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getName [jvm] Content abstract fun getName (): String getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope identifier [jvm] Content abstract fun identifier (): Null isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement setName [jvm] Content abstract fun setName (p: String ): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String Inheritors Name SqlDelightStmtIdentifierClojureImpl StmtIdentifierMixin","title":"SqlDelightStmtIdentifierClojure   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-identifier-clojure/#sqldelightstmtidentifierclojure","text":"[jvm] interface SqlDelightStmtIdentifierClojure : SqlDelightStmtIdentifier","title":"SqlDelightStmtIdentifierClojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-identifier-clojure/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getName [jvm] Content abstract fun getName (): String getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope identifier [jvm] Content abstract fun identifier (): Null isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement setName [jvm] Content abstract fun setName (p: String ): PsiElement textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-identifier-clojure/#inheritors","text":"Name SqlDelightStmtIdentifierClojureImpl StmtIdentifierMixin","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtList SqlDelightStmtList [jvm] interface SqlDelightStmtList : SqlStmtList Functions Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): SqlFileBase abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getImportStmtList [jvm] Content @NotNull() abstract fun getImportStmtList (): @NotNull() SqlDelightImportStmtList getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getStmtClojureList [jvm] Content @NotNull() abstract fun getStmtClojureList (): @NotNull() List < SqlDelightStmtClojure > getStmtIdentifierList [jvm] Content @NotNull() abstract fun getStmtIdentifierList (): @NotNull() List < SqlDelightStmtIdentifier > getStmtList [jvm] Content abstract fun getStmtList (): List getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) queryAvailable [jvm] Content abstract fun queryAvailable (p: PsiElement): Collection replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement tablesAvailable [jvm] Content abstract fun tablesAvailable (p: PsiElement): Collection textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String Inheritors Name SqlDelightStmtListImpl","title":"SqlDelightStmtList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/#sqldelightstmtlist","text":"[jvm] interface SqlDelightStmtList : SqlStmtList","title":"SqlDelightStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/#functions","text":"Name Summary accept [jvm] Content abstract fun accept (p: PsiElementVisitor) acceptChildren [jvm] Content abstract fun acceptChildren (p: PsiElementVisitor) add [jvm] Content abstract fun add (p: PsiElement): PsiElement addAfter [jvm] Content abstract fun addAfter (p: PsiElement, p1: PsiElement): PsiElement addBefore [jvm] Content abstract fun addBefore (p: PsiElement, p1: PsiElement): PsiElement addRange [jvm] Content abstract fun addRange (p: PsiElement, p1: PsiElement): PsiElement addRangeAfter [jvm] Content abstract fun addRangeAfter (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement addRangeBefore [jvm] Content abstract fun addRangeBefore (p: PsiElement, p1: PsiElement, p2: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) checkAdd [jvm] Content abstract fun checkAdd (p: PsiElement) checkDelete [jvm] Content abstract fun checkDelete () copy [jvm] Content abstract fun copy (): PsiElement delete [jvm] Content abstract fun delete () deleteChildRange [jvm] Content abstract fun deleteChildRange (p: PsiElement, p1: PsiElement) findElementAt [jvm] Content abstract fun findElementAt (p: Int ): PsiElement findReferenceAt [jvm] Content abstract fun findReferenceAt (p: Int ): PsiReference getChildren [jvm] Content abstract fun getChildren (): Array getContainingFile [jvm] Content abstract fun getContainingFile (): SqlFileBase abstract fun getContainingFile (): PsiFile getContext [jvm] Content abstract fun getContext (): PsiElement getCopyableUserData [jvm] Content abstract fun < T > getCopyableUserData (p: Key< T >): T getFirstChild [jvm] Content abstract fun getFirstChild (): PsiElement getIcon [jvm] Content abstract fun getIcon (p: Int ): Icon getImportStmtList [jvm] Content @NotNull() abstract fun getImportStmtList (): @NotNull() SqlDelightImportStmtList getLanguage [jvm] Content abstract fun getLanguage (): Language getLastChild [jvm] Content abstract fun getLastChild (): PsiElement getManager [jvm] Content abstract fun getManager (): PsiManager getNavigationElement [jvm] Content abstract fun getNavigationElement (): PsiElement getNextSibling [jvm] Content abstract fun getNextSibling (): PsiElement getNode [jvm] Content abstract fun getNode (): ASTNode getOriginalElement [jvm] Content abstract fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content abstract fun getParent (): PsiElement getPrevSibling [jvm] Content abstract fun getPrevSibling (): PsiElement getProject [jvm] Content abstract fun getProject (): Project getReference [jvm] Content abstract fun getReference (): PsiReference getReferences [jvm] Content abstract fun getReferences (): Array getResolveScope [jvm] Content abstract fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content abstract fun getStartOffsetInParent (): Int getStmtClojureList [jvm] Content @NotNull() abstract fun getStmtClojureList (): @NotNull() List < SqlDelightStmtClojure > getStmtIdentifierList [jvm] Content @NotNull() abstract fun getStmtIdentifierList (): @NotNull() List < SqlDelightStmtIdentifier > getStmtList [jvm] Content abstract fun getStmtList (): List getText [jvm] Content abstract fun getText (): String getTextLength [jvm] Content abstract fun getTextLength (): Int getTextOffset [jvm] Content abstract fun getTextOffset (): Int getTextRange [jvm] Content abstract fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content abstract fun < T > getUserData (p: Key< T >): T getUseScope [jvm] Content abstract fun getUseScope (): SearchScope isEquivalentTo [jvm] Content abstract fun isEquivalentTo (p: PsiElement): Boolean isPhysical [jvm] Content abstract fun isPhysical (): Boolean isValid [jvm] Content abstract fun isValid (): Boolean isWritable [jvm] Content abstract fun isWritable (): Boolean processDeclarations [jvm] Content abstract fun processDeclarations (p: PsiScopeProcessor, p1: ResolveState, p2: PsiElement, p3: PsiElement): Boolean putCopyableUserData [jvm] Content abstract fun < T > putCopyableUserData (p: Key< T >, p1: T ) putUserData [jvm] Content abstract fun < T > putUserData (p: Key< T >, p1: T ) queryAvailable [jvm] Content abstract fun queryAvailable (p: PsiElement): Collection replace [jvm] Content abstract fun replace (p: PsiElement): PsiElement tablesAvailable [jvm] Content abstract fun tablesAvailable (p: PsiElement): Collection textContains [jvm] Content abstract fun textContains (p: Char ): Boolean textMatches [jvm] Content abstract fun textMatches (p: CharSequence ): Boolean textToCharArray [jvm] Content abstract fun textToCharArray (): Array < Char > toString [jvm] Content abstract fun toString (): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/#inheritors","text":"Name SqlDelightStmtListImpl","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/get-import-stmt-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtList / getImportStmtList getImportStmtList [jvm] Content @NotNull() abstract fun getImportStmtList (): @NotNull() SqlDelightImportStmtList","title":"getImportStmtList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/get-import-stmt-list/#getimportstmtlist","text":"[jvm] Content @NotNull() abstract fun getImportStmtList (): @NotNull() SqlDelightImportStmtList","title":"getImportStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/get-stmt-clojure-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtList / getStmtClojureList getStmtClojureList [jvm] Content @NotNull() abstract fun getStmtClojureList (): @NotNull() List < SqlDelightStmtClojure >","title":"getStmtClojureList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/get-stmt-clojure-list/#getstmtclojurelist","text":"[jvm] Content @NotNull() abstract fun getStmtClojureList (): @NotNull() List < SqlDelightStmtClojure >","title":"getStmtClojureList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/get-stmt-identifier-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtList / getStmtIdentifierList getStmtIdentifierList [jvm] Content @NotNull() abstract fun getStmtIdentifierList (): @NotNull() List < SqlDelightStmtIdentifier >","title":"getStmtIdentifierList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/get-stmt-identifier-list/#getstmtidentifierlist","text":"[jvm] Content @NotNull() abstract fun getStmtIdentifierList (): @NotNull() List < SqlDelightStmtIdentifier >","title":"getStmtIdentifierList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor SqlDelightVisitor [jvm] open class SqlDelightVisitor : PsiElementVisitor Functions Name Summary visitAnnotation [jvm] Content open fun visitAnnotation (@NotNull()o: @NotNull() SqlDelightAnnotation ) visitAnnotationValue [jvm] Content open fun visitAnnotationValue (@NotNull()o: @NotNull() SqlDelightAnnotationValue ) visitBinaryFile [jvm] Content open fun visitBinaryFile (file: PsiBinaryFile) visitColumnType [jvm] Content open fun visitColumnType (@NotNull()o: @NotNull() SqlDelightColumnType ) visitComment [jvm] Content open fun visitComment (comment: PsiComment) visitDirectory [jvm] Content open fun visitDirectory (dir: PsiDirectory) visitElement [jvm] Content open fun visitElement (element: PsiElement) visitErrorElement [jvm] Content open fun visitErrorElement (element: PsiErrorElement) visitFile [jvm] Content open fun visitFile (file: PsiFile) visitImportStmt [jvm] Content open fun visitImportStmt (@NotNull()o: @NotNull() SqlDelightImportStmt ) visitImportStmtList [jvm] Content open fun visitImportStmtList (@NotNull()o: @NotNull() SqlDelightImportStmtList ) visitInsertStmtValues [jvm] Content open fun visitInsertStmtValues (@NotNull()o: @NotNull() SqlDelightInsertStmtValues ) visitInsertStmtValuesReal [jvm] Content open fun visitInsertStmtValuesReal (@NotNull()o: @NotNull() SqlDelightInsertStmtValuesReal ) visitJavaType [jvm] Content open fun visitJavaType (@NotNull()o: @NotNull() SqlDelightJavaType ) visitJavaTypeName [jvm] Content open fun visitJavaTypeName (@NotNull()o: @NotNull() SqlDelightJavaTypeName ) visitJavaTypeName2 [jvm] Content open fun visitJavaTypeName2 (@NotNull()o: @NotNull() SqlDelightJavaTypeName2 ) visitOuterLanguageElement [jvm] Content open fun visitOuterLanguageElement (element: OuterLanguageElement) visitOverrides [jvm] Content open fun visitOverrides (@NotNull()o: @NotNull() SqlDelightOverrides ) visitParameterizedJavaType [jvm] Content open fun visitParameterizedJavaType (@NotNull()o: @NotNull() SqlDelightParameterizedJavaType ) visitPlainText [jvm] Content open fun visitPlainText (content: PsiPlainText) visitPlainTextFile [jvm] Content open fun visitPlainTextFile (file: PsiPlainTextFile) visitPsiElement [jvm] Content open fun visitPsiElement (@NotNull()o: @NotNull()PsiElement) visitSqlColumnType [jvm] Content open fun visitSqlColumnType (@NotNull()o: @NotNull()SqlColumnType) visitSqlCompositeElement [jvm] Content open fun visitSqlCompositeElement (@NotNull()o: @NotNull()SqlCompositeElement) visitSqlInsertStmtValues [jvm] Content open fun visitSqlInsertStmtValues (@NotNull()o: @NotNull()SqlInsertStmtValues) visitSqlStmtList [jvm] Content open fun visitSqlStmtList (@NotNull()o: @NotNull()SqlStmtList) visitStmtClojure [jvm] Content open fun visitStmtClojure (@NotNull()o: @NotNull() SqlDelightStmtClojure ) visitStmtClojureStmtList [jvm] Content open fun visitStmtClojureStmtList (@NotNull()o: @NotNull() SqlDelightStmtClojureStmtList ) visitStmtIdentifier [jvm] Content open fun visitStmtIdentifier (@NotNull()o: @NotNull() SqlDelightStmtIdentifier ) visitStmtIdentifierClojure [jvm] Content open fun visitStmtIdentifierClojure (@NotNull()o: @NotNull() SqlDelightStmtIdentifierClojure ) visitStmtList [jvm] Content open fun visitStmtList (@NotNull()o: @NotNull() SqlDelightStmtList ) visitWhiteSpace [jvm] Content open fun visitWhiteSpace (space: PsiWhiteSpace)","title":"SqlDelightVisitor   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/#sqldelightvisitor","text":"[jvm] open class SqlDelightVisitor : PsiElementVisitor","title":"SqlDelightVisitor"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/#functions","text":"Name Summary visitAnnotation [jvm] Content open fun visitAnnotation (@NotNull()o: @NotNull() SqlDelightAnnotation ) visitAnnotationValue [jvm] Content open fun visitAnnotationValue (@NotNull()o: @NotNull() SqlDelightAnnotationValue ) visitBinaryFile [jvm] Content open fun visitBinaryFile (file: PsiBinaryFile) visitColumnType [jvm] Content open fun visitColumnType (@NotNull()o: @NotNull() SqlDelightColumnType ) visitComment [jvm] Content open fun visitComment (comment: PsiComment) visitDirectory [jvm] Content open fun visitDirectory (dir: PsiDirectory) visitElement [jvm] Content open fun visitElement (element: PsiElement) visitErrorElement [jvm] Content open fun visitErrorElement (element: PsiErrorElement) visitFile [jvm] Content open fun visitFile (file: PsiFile) visitImportStmt [jvm] Content open fun visitImportStmt (@NotNull()o: @NotNull() SqlDelightImportStmt ) visitImportStmtList [jvm] Content open fun visitImportStmtList (@NotNull()o: @NotNull() SqlDelightImportStmtList ) visitInsertStmtValues [jvm] Content open fun visitInsertStmtValues (@NotNull()o: @NotNull() SqlDelightInsertStmtValues ) visitInsertStmtValuesReal [jvm] Content open fun visitInsertStmtValuesReal (@NotNull()o: @NotNull() SqlDelightInsertStmtValuesReal ) visitJavaType [jvm] Content open fun visitJavaType (@NotNull()o: @NotNull() SqlDelightJavaType ) visitJavaTypeName [jvm] Content open fun visitJavaTypeName (@NotNull()o: @NotNull() SqlDelightJavaTypeName ) visitJavaTypeName2 [jvm] Content open fun visitJavaTypeName2 (@NotNull()o: @NotNull() SqlDelightJavaTypeName2 ) visitOuterLanguageElement [jvm] Content open fun visitOuterLanguageElement (element: OuterLanguageElement) visitOverrides [jvm] Content open fun visitOverrides (@NotNull()o: @NotNull() SqlDelightOverrides ) visitParameterizedJavaType [jvm] Content open fun visitParameterizedJavaType (@NotNull()o: @NotNull() SqlDelightParameterizedJavaType ) visitPlainText [jvm] Content open fun visitPlainText (content: PsiPlainText) visitPlainTextFile [jvm] Content open fun visitPlainTextFile (file: PsiPlainTextFile) visitPsiElement [jvm] Content open fun visitPsiElement (@NotNull()o: @NotNull()PsiElement) visitSqlColumnType [jvm] Content open fun visitSqlColumnType (@NotNull()o: @NotNull()SqlColumnType) visitSqlCompositeElement [jvm] Content open fun visitSqlCompositeElement (@NotNull()o: @NotNull()SqlCompositeElement) visitSqlInsertStmtValues [jvm] Content open fun visitSqlInsertStmtValues (@NotNull()o: @NotNull()SqlInsertStmtValues) visitSqlStmtList [jvm] Content open fun visitSqlStmtList (@NotNull()o: @NotNull()SqlStmtList) visitStmtClojure [jvm] Content open fun visitStmtClojure (@NotNull()o: @NotNull() SqlDelightStmtClojure ) visitStmtClojureStmtList [jvm] Content open fun visitStmtClojureStmtList (@NotNull()o: @NotNull() SqlDelightStmtClojureStmtList ) visitStmtIdentifier [jvm] Content open fun visitStmtIdentifier (@NotNull()o: @NotNull() SqlDelightStmtIdentifier ) visitStmtIdentifierClojure [jvm] Content open fun visitStmtIdentifierClojure (@NotNull()o: @NotNull() SqlDelightStmtIdentifierClojure ) visitStmtList [jvm] Content open fun visitStmtList (@NotNull()o: @NotNull() SqlDelightStmtList ) visitWhiteSpace [jvm] Content open fun visitWhiteSpace (space: PsiWhiteSpace)","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-annotation-value/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitAnnotationValue visitAnnotationValue [jvm] Content open fun visitAnnotationValue (@NotNull()o: @NotNull() SqlDelightAnnotationValue )","title":"visitAnnotationValue   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-annotation-value/#visitannotationvalue","text":"[jvm] Content open fun visitAnnotationValue (@NotNull()o: @NotNull() SqlDelightAnnotationValue )","title":"visitAnnotationValue"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-annotation/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitAnnotation visitAnnotation [jvm] Content open fun visitAnnotation (@NotNull()o: @NotNull() SqlDelightAnnotation )","title":"visitAnnotation   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-annotation/#visitannotation","text":"[jvm] Content open fun visitAnnotation (@NotNull()o: @NotNull() SqlDelightAnnotation )","title":"visitAnnotation"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-column-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitColumnType visitColumnType [jvm] Content open fun visitColumnType (@NotNull()o: @NotNull() SqlDelightColumnType )","title":"visitColumnType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-column-type/#visitcolumntype","text":"[jvm] Content open fun visitColumnType (@NotNull()o: @NotNull() SqlDelightColumnType )","title":"visitColumnType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-import-stmt-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitImportStmtList visitImportStmtList [jvm] Content open fun visitImportStmtList (@NotNull()o: @NotNull() SqlDelightImportStmtList )","title":"visitImportStmtList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-import-stmt-list/#visitimportstmtlist","text":"[jvm] Content open fun visitImportStmtList (@NotNull()o: @NotNull() SqlDelightImportStmtList )","title":"visitImportStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-import-stmt/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitImportStmt visitImportStmt [jvm] Content open fun visitImportStmt (@NotNull()o: @NotNull() SqlDelightImportStmt )","title":"visitImportStmt   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-import-stmt/#visitimportstmt","text":"[jvm] Content open fun visitImportStmt (@NotNull()o: @NotNull() SqlDelightImportStmt )","title":"visitImportStmt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-insert-stmt-values-real/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitInsertStmtValuesReal visitInsertStmtValuesReal [jvm] Content open fun visitInsertStmtValuesReal (@NotNull()o: @NotNull() SqlDelightInsertStmtValuesReal )","title":"visitInsertStmtValuesReal   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-insert-stmt-values-real/#visitinsertstmtvaluesreal","text":"[jvm] Content open fun visitInsertStmtValuesReal (@NotNull()o: @NotNull() SqlDelightInsertStmtValuesReal )","title":"visitInsertStmtValuesReal"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-insert-stmt-values/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitInsertStmtValues visitInsertStmtValues [jvm] Content open fun visitInsertStmtValues (@NotNull()o: @NotNull() SqlDelightInsertStmtValues )","title":"visitInsertStmtValues   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-insert-stmt-values/#visitinsertstmtvalues","text":"[jvm] Content open fun visitInsertStmtValues (@NotNull()o: @NotNull() SqlDelightInsertStmtValues )","title":"visitInsertStmtValues"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-java-type-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitJavaTypeName visitJavaTypeName [jvm] Content open fun visitJavaTypeName (@NotNull()o: @NotNull() SqlDelightJavaTypeName )","title":"visitJavaTypeName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-java-type-name/#visitjavatypename","text":"[jvm] Content open fun visitJavaTypeName (@NotNull()o: @NotNull() SqlDelightJavaTypeName )","title":"visitJavaTypeName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-java-type-name2/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitJavaTypeName2 visitJavaTypeName2 [jvm] Content open fun visitJavaTypeName2 (@NotNull()o: @NotNull() SqlDelightJavaTypeName2 )","title":"visitJavaTypeName2   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-java-type-name2/#visitjavatypename2","text":"[jvm] Content open fun visitJavaTypeName2 (@NotNull()o: @NotNull() SqlDelightJavaTypeName2 )","title":"visitJavaTypeName2"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-java-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitJavaType visitJavaType [jvm] Content open fun visitJavaType (@NotNull()o: @NotNull() SqlDelightJavaType )","title":"visitJavaType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-java-type/#visitjavatype","text":"[jvm] Content open fun visitJavaType (@NotNull()o: @NotNull() SqlDelightJavaType )","title":"visitJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-overrides/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitOverrides visitOverrides [jvm] Content open fun visitOverrides (@NotNull()o: @NotNull() SqlDelightOverrides )","title":"visitOverrides   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-overrides/#visitoverrides","text":"[jvm] Content open fun visitOverrides (@NotNull()o: @NotNull() SqlDelightOverrides )","title":"visitOverrides"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-parameterized-java-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitParameterizedJavaType visitParameterizedJavaType [jvm] Content open fun visitParameterizedJavaType (@NotNull()o: @NotNull() SqlDelightParameterizedJavaType )","title":"visitParameterizedJavaType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-parameterized-java-type/#visitparameterizedjavatype","text":"[jvm] Content open fun visitParameterizedJavaType (@NotNull()o: @NotNull() SqlDelightParameterizedJavaType )","title":"visitParameterizedJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-psi-element/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitPsiElement visitPsiElement [jvm] Content open fun visitPsiElement (@NotNull()o: @NotNull()PsiElement)","title":"visitPsiElement   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-psi-element/#visitpsielement","text":"[jvm] Content open fun visitPsiElement (@NotNull()o: @NotNull()PsiElement)","title":"visitPsiElement"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-sql-column-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitSqlColumnType visitSqlColumnType [jvm] Content open fun visitSqlColumnType (@NotNull()o: @NotNull()SqlColumnType)","title":"visitSqlColumnType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-sql-column-type/#visitsqlcolumntype","text":"[jvm] Content open fun visitSqlColumnType (@NotNull()o: @NotNull()SqlColumnType)","title":"visitSqlColumnType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-sql-composite-element/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitSqlCompositeElement visitSqlCompositeElement [jvm] Content open fun visitSqlCompositeElement (@NotNull()o: @NotNull()SqlCompositeElement)","title":"visitSqlCompositeElement   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-sql-composite-element/#visitsqlcompositeelement","text":"[jvm] Content open fun visitSqlCompositeElement (@NotNull()o: @NotNull()SqlCompositeElement)","title":"visitSqlCompositeElement"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-sql-insert-stmt-values/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitSqlInsertStmtValues visitSqlInsertStmtValues [jvm] Content open fun visitSqlInsertStmtValues (@NotNull()o: @NotNull()SqlInsertStmtValues)","title":"visitSqlInsertStmtValues   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-sql-insert-stmt-values/#visitsqlinsertstmtvalues","text":"[jvm] Content open fun visitSqlInsertStmtValues (@NotNull()o: @NotNull()SqlInsertStmtValues)","title":"visitSqlInsertStmtValues"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-sql-stmt-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitSqlStmtList visitSqlStmtList [jvm] Content open fun visitSqlStmtList (@NotNull()o: @NotNull()SqlStmtList)","title":"visitSqlStmtList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-sql-stmt-list/#visitsqlstmtlist","text":"[jvm] Content open fun visitSqlStmtList (@NotNull()o: @NotNull()SqlStmtList)","title":"visitSqlStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-clojure-stmt-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitStmtClojureStmtList visitStmtClojureStmtList [jvm] Content open fun visitStmtClojureStmtList (@NotNull()o: @NotNull() SqlDelightStmtClojureStmtList )","title":"visitStmtClojureStmtList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-clojure-stmt-list/#visitstmtclojurestmtlist","text":"[jvm] Content open fun visitStmtClojureStmtList (@NotNull()o: @NotNull() SqlDelightStmtClojureStmtList )","title":"visitStmtClojureStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-clojure/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitStmtClojure visitStmtClojure [jvm] Content open fun visitStmtClojure (@NotNull()o: @NotNull() SqlDelightStmtClojure )","title":"visitStmtClojure   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-clojure/#visitstmtclojure","text":"[jvm] Content open fun visitStmtClojure (@NotNull()o: @NotNull() SqlDelightStmtClojure )","title":"visitStmtClojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-identifier-clojure/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitStmtIdentifierClojure visitStmtIdentifierClojure [jvm] Content open fun visitStmtIdentifierClojure (@NotNull()o: @NotNull() SqlDelightStmtIdentifierClojure )","title":"visitStmtIdentifierClojure   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-identifier-clojure/#visitstmtidentifierclojure","text":"[jvm] Content open fun visitStmtIdentifierClojure (@NotNull()o: @NotNull() SqlDelightStmtIdentifierClojure )","title":"visitStmtIdentifierClojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-identifier/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitStmtIdentifier visitStmtIdentifier [jvm] Content open fun visitStmtIdentifier (@NotNull()o: @NotNull() SqlDelightStmtIdentifier )","title":"visitStmtIdentifier   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-identifier/#visitstmtidentifier","text":"[jvm] Content open fun visitStmtIdentifier (@NotNull()o: @NotNull() SqlDelightStmtIdentifier )","title":"visitStmtIdentifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitStmtList visitStmtList [jvm] Content open fun visitStmtList (@NotNull()o: @NotNull() SqlDelightStmtList )","title":"visitStmtList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-list/#visitstmtlist","text":"[jvm] Content open fun visitStmtList (@NotNull()o: @NotNull() SqlDelightStmtList )","title":"visitStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes SqldelightTypes [jvm] interface SqldelightTypes Types Name Summary Factory [jvm] Content open class Factory Properties Name Summary ANNOTATION [jvm] val ANNOTATION : IElementType ANNOTATION_VALUE [jvm] val ANNOTATION_VALUE : IElementType COLUMN_TYPE [jvm] val COLUMN_TYPE : IElementType DEFAULT [jvm] val DEFAULT : IElementType IMPORT_STMT [jvm] val IMPORT_STMT : IElementType IMPORT_STMT_LIST [jvm] val IMPORT_STMT_LIST : IElementType INSERT_STMT_VALUES_REAL [jvm] val INSERT_STMT_VALUES_REAL : IElementType JAVA_TYPE [jvm] val JAVA_TYPE : IElementType JAVA_TYPE_NAME [jvm] val JAVA_TYPE_NAME : IElementType JAVA_TYPE_NAME_2 [jvm] val JAVA_TYPE_NAME_2 : IElementType JAVADOC [jvm] val JAVADOC : IElementType OVERRIDES [jvm] val OVERRIDES : IElementType PARAMETERIZED_JAVA_TYPE [jvm] val PARAMETERIZED_JAVA_TYPE : IElementType STMT_CLOJURE [jvm] val STMT_CLOJURE : IElementType STMT_CLOJURE_STMT_LIST [jvm] val STMT_CLOJURE_STMT_LIST : IElementType STMT_IDENTIFIER [jvm] val STMT_IDENTIFIER : IElementType STMT_IDENTIFIER_CLOJURE [jvm] val STMT_IDENTIFIER_CLOJURE : IElementType STMT_LIST [jvm] val STMT_LIST : IElementType VALUES [jvm] val VALUES : IElementType","title":"SqldelightTypes   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/#sqldelighttypes","text":"[jvm] interface SqldelightTypes","title":"SqldelightTypes"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/#types","text":"Name Summary Factory [jvm] Content open class Factory","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/#properties","text":"Name Summary ANNOTATION [jvm] val ANNOTATION : IElementType ANNOTATION_VALUE [jvm] val ANNOTATION_VALUE : IElementType COLUMN_TYPE [jvm] val COLUMN_TYPE : IElementType DEFAULT [jvm] val DEFAULT : IElementType IMPORT_STMT [jvm] val IMPORT_STMT : IElementType IMPORT_STMT_LIST [jvm] val IMPORT_STMT_LIST : IElementType INSERT_STMT_VALUES_REAL [jvm] val INSERT_STMT_VALUES_REAL : IElementType JAVA_TYPE [jvm] val JAVA_TYPE : IElementType JAVA_TYPE_NAME [jvm] val JAVA_TYPE_NAME : IElementType JAVA_TYPE_NAME_2 [jvm] val JAVA_TYPE_NAME_2 : IElementType JAVADOC [jvm] val JAVADOC : IElementType OVERRIDES [jvm] val OVERRIDES : IElementType PARAMETERIZED_JAVA_TYPE [jvm] val PARAMETERIZED_JAVA_TYPE : IElementType STMT_CLOJURE [jvm] val STMT_CLOJURE : IElementType STMT_CLOJURE_STMT_LIST [jvm] val STMT_CLOJURE_STMT_LIST : IElementType STMT_IDENTIFIER [jvm] val STMT_IDENTIFIER : IElementType STMT_IDENTIFIER_CLOJURE [jvm] val STMT_IDENTIFIER_CLOJURE : IElementType STMT_LIST [jvm] val STMT_LIST : IElementType VALUES [jvm] val VALUES : IElementType","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-a-n-n-o-t-a-t-i-o-n/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / ANNOTATION ANNOTATION [jvm] Content val ANNOTATION : IElementType","title":"ANNOTATION   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-a-n-n-o-t-a-t-i-o-n/#annotation","text":"[jvm] Content val ANNOTATION : IElementType","title":"ANNOTATION"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-a-n-n-o-t-a-t-i-o-n_-v-a-l-u-e/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / ANNOTATION_VALUE ANNOTATION_VALUE [jvm] Content val ANNOTATION_VALUE : IElementType","title":"ANNOTATION_VALUE   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-a-n-n-o-t-a-t-i-o-n_-v-a-l-u-e/#annotation_value","text":"[jvm] Content val ANNOTATION_VALUE : IElementType","title":"ANNOTATION_VALUE"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-c-o-l-u-m-n_-t-y-p-e/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / COLUMN_TYPE COLUMN_TYPE [jvm] Content val COLUMN_TYPE : IElementType","title":"COLUMN_TYPE   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-c-o-l-u-m-n_-t-y-p-e/#column_type","text":"[jvm] Content val COLUMN_TYPE : IElementType","title":"COLUMN_TYPE"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-d-e-f-a-u-l-t/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / DEFAULT DEFAULT [jvm] Content val DEFAULT : IElementType","title":"DEFAULT   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-d-e-f-a-u-l-t/#default","text":"[jvm] Content val DEFAULT : IElementType","title":"DEFAULT"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-i-m-p-o-r-t_-s-t-m-t/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / IMPORT_STMT IMPORT_STMT [jvm] Content val IMPORT_STMT : IElementType","title":"IMPORT_STMT   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-i-m-p-o-r-t_-s-t-m-t/#import_stmt","text":"[jvm] Content val IMPORT_STMT : IElementType","title":"IMPORT_STMT"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-i-m-p-o-r-t_-s-t-m-t_-l-i-s-t/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / IMPORT_STMT_LIST IMPORT_STMT_LIST [jvm] Content val IMPORT_STMT_LIST : IElementType","title":"IMPORT_STMT_LIST   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-i-m-p-o-r-t_-s-t-m-t_-l-i-s-t/#import_stmt_list","text":"[jvm] Content val IMPORT_STMT_LIST : IElementType","title":"IMPORT_STMT_LIST"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-i-n-s-e-r-t_-s-t-m-t_-v-a-l-u-e-s_-r-e-a-l/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / INSERT_STMT_VALUES_REAL INSERT_STMT_VALUES_REAL [jvm] Content val INSERT_STMT_VALUES_REAL : IElementType","title":"INSERT_STMT_VALUES_REAL   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-i-n-s-e-r-t_-s-t-m-t_-v-a-l-u-e-s_-r-e-a-l/#insert_stmt_values_real","text":"[jvm] Content val INSERT_STMT_VALUES_REAL : IElementType","title":"INSERT_STMT_VALUES_REAL"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-j-a-v-a-d-o-c/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / JAVADOC JAVADOC [jvm] Content val JAVADOC : IElementType","title":"JAVADOC   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-j-a-v-a-d-o-c/#javadoc","text":"[jvm] Content val JAVADOC : IElementType","title":"JAVADOC"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-j-a-v-a_-t-y-p-e/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / JAVA_TYPE JAVA_TYPE [jvm] Content val JAVA_TYPE : IElementType","title":"JAVA_TYPE   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-j-a-v-a_-t-y-p-e/#java_type","text":"[jvm] Content val JAVA_TYPE : IElementType","title":"JAVA_TYPE"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-j-a-v-a_-t-y-p-e_-n-a-m-e/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / JAVA_TYPE_NAME JAVA_TYPE_NAME [jvm] Content val JAVA_TYPE_NAME : IElementType","title":"JAVA_TYPE_NAME   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-j-a-v-a_-t-y-p-e_-n-a-m-e/#java_type_name","text":"[jvm] Content val JAVA_TYPE_NAME : IElementType","title":"JAVA_TYPE_NAME"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-j-a-v-a_-t-y-p-e_-n-a-m-e_2/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / JAVA_TYPE_NAME_2 JAVA_TYPE_NAME_2 [jvm] Content val JAVA_TYPE_NAME_2 : IElementType","title":"JAVA_TYPE_NAME_2   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-j-a-v-a_-t-y-p-e_-n-a-m-e_2/#java_type_name_2","text":"[jvm] Content val JAVA_TYPE_NAME_2 : IElementType","title":"JAVA_TYPE_NAME_2"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-o-v-e-r-r-i-d-e-s/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / OVERRIDES OVERRIDES [jvm] Content val OVERRIDES : IElementType","title":"OVERRIDES   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-o-v-e-r-r-i-d-e-s/#overrides","text":"[jvm] Content val OVERRIDES : IElementType","title":"OVERRIDES"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-p-a-r-a-m-e-t-e-r-i-z-e-d_-j-a-v-a_-t-y-p-e/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / PARAMETERIZED_JAVA_TYPE PARAMETERIZED_JAVA_TYPE [jvm] Content val PARAMETERIZED_JAVA_TYPE : IElementType","title":"PARAMETERIZED_JAVA_TYPE   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-p-a-r-a-m-e-t-e-r-i-z-e-d_-j-a-v-a_-t-y-p-e/#parameterized_java_type","text":"[jvm] Content val PARAMETERIZED_JAVA_TYPE : IElementType","title":"PARAMETERIZED_JAVA_TYPE"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-c-l-o-j-u-r-e/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / STMT_CLOJURE STMT_CLOJURE [jvm] Content val STMT_CLOJURE : IElementType","title":"STMT_CLOJURE   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-c-l-o-j-u-r-e/#stmt_clojure","text":"[jvm] Content val STMT_CLOJURE : IElementType","title":"STMT_CLOJURE"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-c-l-o-j-u-r-e_-s-t-m-t_-l-i-s-t/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / STMT_CLOJURE_STMT_LIST STMT_CLOJURE_STMT_LIST [jvm] Content val STMT_CLOJURE_STMT_LIST : IElementType","title":"STMT_CLOJURE_STMT_LIST   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-c-l-o-j-u-r-e_-s-t-m-t_-l-i-s-t/#stmt_clojure_stmt_list","text":"[jvm] Content val STMT_CLOJURE_STMT_LIST : IElementType","title":"STMT_CLOJURE_STMT_LIST"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-i-d-e-n-t-i-f-i-e-r/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / STMT_IDENTIFIER STMT_IDENTIFIER [jvm] Content val STMT_IDENTIFIER : IElementType","title":"STMT_IDENTIFIER   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-i-d-e-n-t-i-f-i-e-r/#stmt_identifier","text":"[jvm] Content val STMT_IDENTIFIER : IElementType","title":"STMT_IDENTIFIER"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-i-d-e-n-t-i-f-i-e-r_-c-l-o-j-u-r-e/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / STMT_IDENTIFIER_CLOJURE STMT_IDENTIFIER_CLOJURE [jvm] Content val STMT_IDENTIFIER_CLOJURE : IElementType","title":"STMT_IDENTIFIER_CLOJURE   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-i-d-e-n-t-i-f-i-e-r_-c-l-o-j-u-r-e/#stmt_identifier_clojure","text":"[jvm] Content val STMT_IDENTIFIER_CLOJURE : IElementType","title":"STMT_IDENTIFIER_CLOJURE"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-l-i-s-t/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / STMT_LIST STMT_LIST [jvm] Content val STMT_LIST : IElementType","title":"STMT_LIST   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-l-i-s-t/#stmt_list","text":"[jvm] Content val STMT_LIST : IElementType","title":"STMT_LIST"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-v-a-l-u-e-s/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / VALUES VALUES [jvm] Content val VALUES : IElementType","title":"VALUES   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-v-a-l-u-e-s/#values","text":"[jvm] Content val VALUES : IElementType","title":"VALUES"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-factory/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / Factory Factory [jvm] open class Factory Functions Name Summary createElement [jvm] Content open fun createElement (node: ASTNode): PsiElement","title":"Factory   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-factory/#factory","text":"[jvm] open class Factory","title":"Factory"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-factory/#functions","text":"Name Summary createElement [jvm] Content open fun createElement (node: ASTNode): PsiElement","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-factory/create-element/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / Factory / createElement createElement [jvm] Content open fun createElement (node: ASTNode): PsiElement","title":"createElement   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-factory/create-element/#createelement","text":"[jvm] Content open fun createElement (node: ASTNode): PsiElement","title":"createElement"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl Package com.squareup.sqldelight.core.psi.impl Types Name Summary SqlDelightAnnotationImpl [jvm] Content open class SqlDelightAnnotationImpl : ASTWrapperPsiElement, SqlDelightAnnotation SqlDelightAnnotationValueImpl [jvm] Content open class SqlDelightAnnotationValueImpl : ASTWrapperPsiElement, SqlDelightAnnotationValue SqlDelightColumnTypeImpl [jvm] Content open class SqlDelightColumnTypeImpl : ColumnTypeMixin, SqlDelightColumnType SqlDelightImportStmtImpl [jvm] Content open class SqlDelightImportStmtImpl : ImportStmtMixin , SqlDelightImportStmt SqlDelightImportStmtListImpl [jvm] Content open class SqlDelightImportStmtListImpl : ASTWrapperPsiElement, SqlDelightImportStmtList SqlDelightInsertStmtValuesImpl [jvm] Content open class SqlDelightInsertStmtValuesImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValues SqlDelightInsertStmtValuesRealImpl [jvm] Content open class SqlDelightInsertStmtValuesRealImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValuesReal SqlDelightJavaTypeImpl [jvm] Content open class SqlDelightJavaTypeImpl : JavaTypeMixin , SqlDelightJavaType SqlDelightJavaTypeName2Impl [jvm] Content open class SqlDelightJavaTypeName2Impl : ASTWrapperPsiElement, SqlDelightJavaTypeName2 SqlDelightJavaTypeNameImpl [jvm] Content open class SqlDelightJavaTypeNameImpl : ASTWrapperPsiElement, SqlDelightJavaTypeName SqlDelightOverridesImpl [jvm] Content open class SqlDelightOverridesImpl : ASTWrapperPsiElement, SqlDelightOverrides SqlDelightParameterizedJavaTypeImpl [jvm] Content open class SqlDelightParameterizedJavaTypeImpl : ASTWrapperPsiElement, SqlDelightParameterizedJavaType SqlDelightStmtClojureImpl [jvm] Content open class SqlDelightStmtClojureImpl : SqlCompositeElementImpl, SqlDelightStmtClojure SqlDelightStmtClojureStmtListImpl [jvm] Content open class SqlDelightStmtClojureStmtListImpl : ClojureStmtListMixin , SqlDelightStmtClojureStmtList SqlDelightStmtIdentifierClojureImpl [jvm] Content open class SqlDelightStmtIdentifierClojureImpl : StmtIdentifierMixin , SqlDelightStmtIdentifierClojure SqlDelightStmtIdentifierImpl [jvm] Content open class SqlDelightStmtIdentifierImpl : StmtIdentifierMixin , SqlDelightStmtIdentifier SqlDelightStmtListImpl [jvm] Content open class SqlDelightStmtListImpl : SqlStmtListImpl, SqlDelightStmtList","title":"Package com.squareup.sqldelight.core.psi.impl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/#package-comsquareupsqldelightcorepsiimpl","text":"","title":"Package com.squareup.sqldelight.core.psi.impl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/#types","text":"Name Summary SqlDelightAnnotationImpl [jvm] Content open class SqlDelightAnnotationImpl : ASTWrapperPsiElement, SqlDelightAnnotation SqlDelightAnnotationValueImpl [jvm] Content open class SqlDelightAnnotationValueImpl : ASTWrapperPsiElement, SqlDelightAnnotationValue SqlDelightColumnTypeImpl [jvm] Content open class SqlDelightColumnTypeImpl : ColumnTypeMixin, SqlDelightColumnType SqlDelightImportStmtImpl [jvm] Content open class SqlDelightImportStmtImpl : ImportStmtMixin , SqlDelightImportStmt SqlDelightImportStmtListImpl [jvm] Content open class SqlDelightImportStmtListImpl : ASTWrapperPsiElement, SqlDelightImportStmtList SqlDelightInsertStmtValuesImpl [jvm] Content open class SqlDelightInsertStmtValuesImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValues SqlDelightInsertStmtValuesRealImpl [jvm] Content open class SqlDelightInsertStmtValuesRealImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValuesReal SqlDelightJavaTypeImpl [jvm] Content open class SqlDelightJavaTypeImpl : JavaTypeMixin , SqlDelightJavaType SqlDelightJavaTypeName2Impl [jvm] Content open class SqlDelightJavaTypeName2Impl : ASTWrapperPsiElement, SqlDelightJavaTypeName2 SqlDelightJavaTypeNameImpl [jvm] Content open class SqlDelightJavaTypeNameImpl : ASTWrapperPsiElement, SqlDelightJavaTypeName SqlDelightOverridesImpl [jvm] Content open class SqlDelightOverridesImpl : ASTWrapperPsiElement, SqlDelightOverrides SqlDelightParameterizedJavaTypeImpl [jvm] Content open class SqlDelightParameterizedJavaTypeImpl : ASTWrapperPsiElement, SqlDelightParameterizedJavaType SqlDelightStmtClojureImpl [jvm] Content open class SqlDelightStmtClojureImpl : SqlCompositeElementImpl, SqlDelightStmtClojure SqlDelightStmtClojureStmtListImpl [jvm] Content open class SqlDelightStmtClojureStmtListImpl : ClojureStmtListMixin , SqlDelightStmtClojureStmtList SqlDelightStmtIdentifierClojureImpl [jvm] Content open class SqlDelightStmtIdentifierClojureImpl : StmtIdentifierMixin , SqlDelightStmtIdentifierClojure SqlDelightStmtIdentifierImpl [jvm] Content open class SqlDelightStmtIdentifierImpl : StmtIdentifierMixin , SqlDelightStmtIdentifier SqlDelightStmtListImpl [jvm] Content open class SqlDelightStmtListImpl : SqlStmtListImpl, SqlDelightStmtList","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationImpl SqlDelightAnnotationImpl [jvm] open class SqlDelightAnnotationImpl : ASTWrapperPsiElement, SqlDelightAnnotation Constructors SqlDelightAnnotationImpl [jvm] open fun SqlDelightAnnotationImpl (@NotNull()node: @NotNull()ASTNode) Functions Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getAnnotationValueList [jvm] Content @NotNull() open fun getAnnotationValueList (): @NotNull() List < SqlDelightAnnotationValue > getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getJavaType [jvm] Content @NotNull() open fun getJavaType (): @NotNull() SqlDelightJavaType getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"SqlDelightAnnotationImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/#sqldelightannotationimpl","text":"[jvm] open class SqlDelightAnnotationImpl : ASTWrapperPsiElement, SqlDelightAnnotation","title":"SqlDelightAnnotationImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/#constructors","text":"SqlDelightAnnotationImpl [jvm] open fun SqlDelightAnnotationImpl (@NotNull()node: @NotNull()ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/#functions","text":"Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getAnnotationValueList [jvm] Content @NotNull() open fun getAnnotationValueList (): @NotNull() List < SqlDelightAnnotationValue > getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getJavaType [jvm] Content @NotNull() open fun getJavaType (): @NotNull() SqlDelightJavaType getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/-sql-delight-annotation-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationImpl / SqlDelightAnnotationImpl SqlDelightAnnotationImpl [jvm] Content open fun SqlDelightAnnotationImpl (@NotNull()node: @NotNull()ASTNode)","title":"SqlDelightAnnotationImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/-sql-delight-annotation-impl/#sqldelightannotationimpl","text":"[jvm] Content open fun SqlDelightAnnotationImpl (@NotNull()node: @NotNull()ASTNode)","title":"SqlDelightAnnotationImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/accept/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationImpl / accept accept [jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/accept/#accept","text":"[jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/get-annotation-value-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationImpl / getAnnotationValueList getAnnotationValueList [jvm] Content @NotNull() open fun getAnnotationValueList (): @NotNull() List < SqlDelightAnnotationValue >","title":"getAnnotationValueList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/get-annotation-value-list/#getannotationvaluelist","text":"[jvm] Content @NotNull() open fun getAnnotationValueList (): @NotNull() List < SqlDelightAnnotationValue >","title":"getAnnotationValueList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/get-java-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationImpl / getJavaType getJavaType [jvm] Content @NotNull() open fun getJavaType (): @NotNull() SqlDelightJavaType","title":"getJavaType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/get-java-type/#getjavatype","text":"[jvm] Content @NotNull() open fun getJavaType (): @NotNull() SqlDelightJavaType","title":"getJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationValueImpl SqlDelightAnnotationValueImpl [jvm] open class SqlDelightAnnotationValueImpl : ASTWrapperPsiElement, SqlDelightAnnotationValue Constructors SqlDelightAnnotationValueImpl [jvm] open fun SqlDelightAnnotationValueImpl (@NotNull()node: @NotNull()ASTNode) Functions Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getAnnotation [jvm] Content @Nullable() open fun getAnnotation (): @Nullable() SqlDelightAnnotation getAnnotationValueList [jvm] Content @NotNull() open fun getAnnotationValueList (): @NotNull() List < SqlDelightAnnotationValue > getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getJavaTypeName [jvm] Content @Nullable() open fun getJavaTypeName (): @Nullable() SqlDelightJavaTypeName getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"SqlDelightAnnotationValueImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/#sqldelightannotationvalueimpl","text":"[jvm] open class SqlDelightAnnotationValueImpl : ASTWrapperPsiElement, SqlDelightAnnotationValue","title":"SqlDelightAnnotationValueImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/#constructors","text":"SqlDelightAnnotationValueImpl [jvm] open fun SqlDelightAnnotationValueImpl (@NotNull()node: @NotNull()ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/#functions","text":"Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getAnnotation [jvm] Content @Nullable() open fun getAnnotation (): @Nullable() SqlDelightAnnotation getAnnotationValueList [jvm] Content @NotNull() open fun getAnnotationValueList (): @NotNull() List < SqlDelightAnnotationValue > getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getJavaTypeName [jvm] Content @Nullable() open fun getJavaTypeName (): @Nullable() SqlDelightJavaTypeName getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/-sql-delight-annotation-value-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationValueImpl / SqlDelightAnnotationValueImpl SqlDelightAnnotationValueImpl [jvm] Content open fun SqlDelightAnnotationValueImpl (@NotNull()node: @NotNull()ASTNode)","title":"SqlDelightAnnotationValueImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/-sql-delight-annotation-value-impl/#sqldelightannotationvalueimpl","text":"[jvm] Content open fun SqlDelightAnnotationValueImpl (@NotNull()node: @NotNull()ASTNode)","title":"SqlDelightAnnotationValueImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/accept/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationValueImpl / accept accept [jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/accept/#accept","text":"[jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/get-annotation-value-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationValueImpl / getAnnotationValueList getAnnotationValueList [jvm] Content @NotNull() open fun getAnnotationValueList (): @NotNull() List < SqlDelightAnnotationValue >","title":"getAnnotationValueList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/get-annotation-value-list/#getannotationvaluelist","text":"[jvm] Content @NotNull() open fun getAnnotationValueList (): @NotNull() List < SqlDelightAnnotationValue >","title":"getAnnotationValueList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/get-annotation/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationValueImpl / getAnnotation getAnnotation [jvm] Content @Nullable() open fun getAnnotation (): @Nullable() SqlDelightAnnotation","title":"getAnnotation   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/get-annotation/#getannotation","text":"[jvm] Content @Nullable() open fun getAnnotation (): @Nullable() SqlDelightAnnotation","title":"getAnnotation"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/get-java-type-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationValueImpl / getJavaTypeName getJavaTypeName [jvm] Content @Nullable() open fun getJavaTypeName (): @Nullable() SqlDelightJavaTypeName","title":"getJavaTypeName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/get-java-type-name/#getjavatypename","text":"[jvm] Content @Nullable() open fun getJavaTypeName (): @Nullable() SqlDelightJavaTypeName","title":"getJavaTypeName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-type-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightColumnTypeImpl SqlDelightColumnTypeImpl [jvm] open class SqlDelightColumnTypeImpl : ColumnTypeMixin, SqlDelightColumnType Constructors SqlDelightColumnTypeImpl [jvm] open fun SqlDelightColumnTypeImpl (node: ASTNode) Functions Name Summary accept [jvm] Content open fun accept (visitor: SqlVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) adapter [jvm] Content open fun adapter (): Null abstract fun adapter (): PropertySpec add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content open fun annotate (annotationHolder: SqlAnnotationHolder) open fun annotate (annotationHolder: Null ) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getAnnotationList [jvm] Content @NotNull() open fun getAnnotationList (): @NotNull() List < SqlDelightAnnotation > getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): SqlFileBase open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getJavaTypeName [jvm] Content @Nullable() open fun getJavaTypeName (): @Nullable() SqlDelightJavaTypeName getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getTypeName [jvm] Content open fun getTypeName (): SqlTypeName getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T queryAvailable [jvm] Content open fun queryAvailable (child: PsiElement): Collection registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () tablesAvailable [jvm] Content open fun tablesAvailable (child: PsiElement): Collection textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int type [jvm] Content open fun type (): Null abstract fun type (): IntermediateType","title":"SqlDelightColumnTypeImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-type-impl/#sqldelightcolumntypeimpl","text":"[jvm] open class SqlDelightColumnTypeImpl : ColumnTypeMixin, SqlDelightColumnType","title":"SqlDelightColumnTypeImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-type-impl/#constructors","text":"SqlDelightColumnTypeImpl [jvm] open fun SqlDelightColumnTypeImpl (node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-type-impl/#functions","text":"Name Summary accept [jvm] Content open fun accept (visitor: SqlVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) adapter [jvm] Content open fun adapter (): Null abstract fun adapter (): PropertySpec add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content open fun annotate (annotationHolder: SqlAnnotationHolder) open fun annotate (annotationHolder: Null ) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getAnnotationList [jvm] Content @NotNull() open fun getAnnotationList (): @NotNull() List < SqlDelightAnnotation > getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): SqlFileBase open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getJavaTypeName [jvm] Content @Nullable() open fun getJavaTypeName (): @Nullable() SqlDelightJavaTypeName getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getTypeName [jvm] Content open fun getTypeName (): SqlTypeName getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T queryAvailable [jvm] Content open fun queryAvailable (child: PsiElement): Collection registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () tablesAvailable [jvm] Content open fun tablesAvailable (child: PsiElement): Collection textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int type [jvm] Content open fun type (): Null abstract fun type (): IntermediateType","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-type-impl/-sql-delight-column-type-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightColumnTypeImpl / SqlDelightColumnTypeImpl SqlDelightColumnTypeImpl [jvm] Content open fun SqlDelightColumnTypeImpl (node: ASTNode)","title":"SqlDelightColumnTypeImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-type-impl/-sql-delight-column-type-impl/#sqldelightcolumntypeimpl","text":"[jvm] Content open fun SqlDelightColumnTypeImpl (node: ASTNode)","title":"SqlDelightColumnTypeImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-type-impl/accept/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightColumnTypeImpl / accept accept [jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-type-impl/accept/#accept","text":"[jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-type-impl/get-annotation-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightColumnTypeImpl / getAnnotationList getAnnotationList [jvm] Content @NotNull() open fun getAnnotationList (): @NotNull() List < SqlDelightAnnotation >","title":"getAnnotationList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-type-impl/get-annotation-list/#getannotationlist","text":"[jvm] Content @NotNull() open fun getAnnotationList (): @NotNull() List < SqlDelightAnnotation >","title":"getAnnotationList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-type-impl/get-java-type-name/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightColumnTypeImpl / getJavaTypeName getJavaTypeName [jvm] Content @Nullable() open fun getJavaTypeName (): @Nullable() SqlDelightJavaTypeName","title":"getJavaTypeName   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-type-impl/get-java-type-name/#getjavatypename","text":"[jvm] Content @Nullable() open fun getJavaTypeName (): @Nullable() SqlDelightJavaTypeName","title":"getJavaTypeName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightImportStmtImpl SqlDelightImportStmtImpl [jvm] open class SqlDelightImportStmtImpl : ImportStmtMixin , SqlDelightImportStmt Constructors SqlDelightImportStmtImpl [jvm] open fun SqlDelightImportStmtImpl (node: ASTNode) Functions Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) open fun annotate (annotationHolder: Null ) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getJavaType [jvm] Content @NotNull() open fun getJavaType (): @NotNull() SqlDelightJavaType getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"SqlDelightImportStmtImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/#sqldelightimportstmtimpl","text":"[jvm] open class SqlDelightImportStmtImpl : ImportStmtMixin , SqlDelightImportStmt","title":"SqlDelightImportStmtImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/#constructors","text":"SqlDelightImportStmtImpl [jvm] open fun SqlDelightImportStmtImpl (node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/#functions","text":"Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) open fun annotate (annotationHolder: Null ) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getJavaType [jvm] Content @NotNull() open fun getJavaType (): @NotNull() SqlDelightJavaType getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/-sql-delight-import-stmt-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightImportStmtImpl / SqlDelightImportStmtImpl SqlDelightImportStmtImpl [jvm] Content open fun SqlDelightImportStmtImpl (node: ASTNode)","title":"SqlDelightImportStmtImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/-sql-delight-import-stmt-impl/#sqldelightimportstmtimpl","text":"[jvm] Content open fun SqlDelightImportStmtImpl (node: ASTNode)","title":"SqlDelightImportStmtImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/accept/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightImportStmtImpl / accept accept [jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/accept/#accept","text":"[jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/get-java-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightImportStmtImpl / getJavaType getJavaType [jvm] Content @NotNull() open fun getJavaType (): @NotNull() SqlDelightJavaType","title":"getJavaType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/get-java-type/#getjavatype","text":"[jvm] Content @NotNull() open fun getJavaType (): @NotNull() SqlDelightJavaType","title":"getJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightImportStmtListImpl SqlDelightImportStmtListImpl [jvm] open class SqlDelightImportStmtListImpl : ASTWrapperPsiElement, SqlDelightImportStmtList Constructors SqlDelightImportStmtListImpl [jvm] open fun SqlDelightImportStmtListImpl (@NotNull()node: @NotNull()ASTNode) Functions Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getImportStmtList [jvm] Content @NotNull() open fun getImportStmtList (): @NotNull() List < SqlDelightImportStmt > getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"SqlDelightImportStmtListImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/#sqldelightimportstmtlistimpl","text":"[jvm] open class SqlDelightImportStmtListImpl : ASTWrapperPsiElement, SqlDelightImportStmtList","title":"SqlDelightImportStmtListImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/#constructors","text":"SqlDelightImportStmtListImpl [jvm] open fun SqlDelightImportStmtListImpl (@NotNull()node: @NotNull()ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/#functions","text":"Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getImportStmtList [jvm] Content @NotNull() open fun getImportStmtList (): @NotNull() List < SqlDelightImportStmt > getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/-sql-delight-import-stmt-list-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightImportStmtListImpl / SqlDelightImportStmtListImpl SqlDelightImportStmtListImpl [jvm] Content open fun SqlDelightImportStmtListImpl (@NotNull()node: @NotNull()ASTNode)","title":"SqlDelightImportStmtListImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/-sql-delight-import-stmt-list-impl/#sqldelightimportstmtlistimpl","text":"[jvm] Content open fun SqlDelightImportStmtListImpl (@NotNull()node: @NotNull()ASTNode)","title":"SqlDelightImportStmtListImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/accept/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightImportStmtListImpl / accept accept [jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/accept/#accept","text":"[jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/get-import-stmt-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightImportStmtListImpl / getImportStmtList getImportStmtList [jvm] Content @NotNull() open fun getImportStmtList (): @NotNull() List < SqlDelightImportStmt >","title":"getImportStmtList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/get-import-stmt-list/#getimportstmtlist","text":"[jvm] Content @NotNull() open fun getImportStmtList (): @NotNull() List < SqlDelightImportStmt >","title":"getImportStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightInsertStmtValuesImpl SqlDelightInsertStmtValuesImpl [jvm] open class SqlDelightInsertStmtValuesImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValues Constructors SqlDelightInsertStmtValuesImpl [jvm] open fun SqlDelightInsertStmtValuesImpl (node: ASTNode) Functions Name Summary accept [jvm] Content open fun accept (visitor: SqlVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content open fun annotate (annotationHolder: SqlAnnotationHolder) open fun annotate (annotationHolder: Null ) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getCompoundSelectStmt [jvm] Content open fun getCompoundSelectStmt (): SqlCompoundSelectStmt getContainingFile [jvm] Content open fun getContainingFile (): SqlFileBase open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): SqlInsertStmt open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope getValuesExpressionList [jvm] Content open fun getValuesExpressionList (): List iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T queryAvailable [jvm] Content open fun queryAvailable (child: PsiElement): Collection registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () tablesAvailable [jvm] Content open fun tablesAvailable (child: PsiElement): Collection textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"SqlDelightInsertStmtValuesImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-impl/#sqldelightinsertstmtvaluesimpl","text":"[jvm] open class SqlDelightInsertStmtValuesImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValues","title":"SqlDelightInsertStmtValuesImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-impl/#constructors","text":"SqlDelightInsertStmtValuesImpl [jvm] open fun SqlDelightInsertStmtValuesImpl (node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-impl/#functions","text":"Name Summary accept [jvm] Content open fun accept (visitor: SqlVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content open fun annotate (annotationHolder: SqlAnnotationHolder) open fun annotate (annotationHolder: Null ) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getCompoundSelectStmt [jvm] Content open fun getCompoundSelectStmt (): SqlCompoundSelectStmt getContainingFile [jvm] Content open fun getContainingFile (): SqlFileBase open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): SqlInsertStmt open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope getValuesExpressionList [jvm] Content open fun getValuesExpressionList (): List iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T queryAvailable [jvm] Content open fun queryAvailable (child: PsiElement): Collection registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () tablesAvailable [jvm] Content open fun tablesAvailable (child: PsiElement): Collection textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-impl/-sql-delight-insert-stmt-values-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightInsertStmtValuesImpl / SqlDelightInsertStmtValuesImpl SqlDelightInsertStmtValuesImpl [jvm] Content open fun SqlDelightInsertStmtValuesImpl (node: ASTNode)","title":"SqlDelightInsertStmtValuesImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-impl/-sql-delight-insert-stmt-values-impl/#sqldelightinsertstmtvaluesimpl","text":"[jvm] Content open fun SqlDelightInsertStmtValuesImpl (node: ASTNode)","title":"SqlDelightInsertStmtValuesImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-impl/accept/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightInsertStmtValuesImpl / accept accept [jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-impl/accept/#accept","text":"[jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-real-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightInsertStmtValuesRealImpl SqlDelightInsertStmtValuesRealImpl [jvm] open class SqlDelightInsertStmtValuesRealImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValuesReal Constructors SqlDelightInsertStmtValuesRealImpl [jvm] open fun SqlDelightInsertStmtValuesRealImpl (node: ASTNode) Functions Name Summary accept [jvm] Content open fun accept (visitor: SqlVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content open fun annotate (annotationHolder: SqlAnnotationHolder) open fun annotate (annotationHolder: Null ) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getCompoundSelectStmt [jvm] Content open fun getCompoundSelectStmt (): SqlCompoundSelectStmt getContainingFile [jvm] Content open fun getContainingFile (): SqlFileBase open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): SqlInsertStmt open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope getValuesExpressionList [jvm] Content open fun getValuesExpressionList (): List iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T queryAvailable [jvm] Content open fun queryAvailable (child: PsiElement): Collection registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () tablesAvailable [jvm] Content open fun tablesAvailable (child: PsiElement): Collection textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"SqlDelightInsertStmtValuesRealImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-real-impl/#sqldelightinsertstmtvaluesrealimpl","text":"[jvm] open class SqlDelightInsertStmtValuesRealImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValuesReal","title":"SqlDelightInsertStmtValuesRealImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-real-impl/#constructors","text":"SqlDelightInsertStmtValuesRealImpl [jvm] open fun SqlDelightInsertStmtValuesRealImpl (node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-real-impl/#functions","text":"Name Summary accept [jvm] Content open fun accept (visitor: SqlVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content open fun annotate (annotationHolder: SqlAnnotationHolder) open fun annotate (annotationHolder: Null ) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getCompoundSelectStmt [jvm] Content open fun getCompoundSelectStmt (): SqlCompoundSelectStmt getContainingFile [jvm] Content open fun getContainingFile (): SqlFileBase open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): SqlInsertStmt open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope getValuesExpressionList [jvm] Content open fun getValuesExpressionList (): List iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T queryAvailable [jvm] Content open fun queryAvailable (child: PsiElement): Collection registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () tablesAvailable [jvm] Content open fun tablesAvailable (child: PsiElement): Collection textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-real-impl/-sql-delight-insert-stmt-values-real-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightInsertStmtValuesRealImpl / SqlDelightInsertStmtValuesRealImpl SqlDelightInsertStmtValuesRealImpl [jvm] Content open fun SqlDelightInsertStmtValuesRealImpl (node: ASTNode)","title":"SqlDelightInsertStmtValuesRealImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-real-impl/-sql-delight-insert-stmt-values-real-impl/#sqldelightinsertstmtvaluesrealimpl","text":"[jvm] Content open fun SqlDelightInsertStmtValuesRealImpl (node: ASTNode)","title":"SqlDelightInsertStmtValuesRealImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-real-impl/accept/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightInsertStmtValuesRealImpl / accept accept [jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-real-impl/accept/#accept","text":"[jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeImpl SqlDelightJavaTypeImpl [jvm] open class SqlDelightJavaTypeImpl : JavaTypeMixin , SqlDelightJavaType Constructors SqlDelightJavaTypeImpl [jvm] open fun SqlDelightJavaTypeImpl (node: ASTNode) Functions Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference open fun getReference (): Null getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"SqlDelightJavaTypeImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-impl/#sqldelightjavatypeimpl","text":"[jvm] open class SqlDelightJavaTypeImpl : JavaTypeMixin , SqlDelightJavaType","title":"SqlDelightJavaTypeImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-impl/#constructors","text":"SqlDelightJavaTypeImpl [jvm] open fun SqlDelightJavaTypeImpl (node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-impl/#functions","text":"Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference open fun getReference (): Null getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-impl/-sql-delight-java-type-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeImpl / SqlDelightJavaTypeImpl SqlDelightJavaTypeImpl [jvm] Content open fun SqlDelightJavaTypeImpl (node: ASTNode)","title":"SqlDelightJavaTypeImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-impl/-sql-delight-java-type-impl/#sqldelightjavatypeimpl","text":"[jvm] Content open fun SqlDelightJavaTypeImpl (node: ASTNode)","title":"SqlDelightJavaTypeImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-impl/accept/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeImpl / accept accept [jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-impl/accept/#accept","text":"[jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeNameImpl SqlDelightJavaTypeNameImpl [jvm] open class SqlDelightJavaTypeNameImpl : ASTWrapperPsiElement, SqlDelightJavaTypeName Constructors SqlDelightJavaTypeNameImpl [jvm] open fun SqlDelightJavaTypeNameImpl (@NotNull()node: @NotNull()ASTNode) Functions Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParameterizedJavaType [jvm] Content @Nullable() open fun getParameterizedJavaType (): @Nullable() SqlDelightParameterizedJavaType getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"SqlDelightJavaTypeNameImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/#sqldelightjavatypenameimpl","text":"[jvm] open class SqlDelightJavaTypeNameImpl : ASTWrapperPsiElement, SqlDelightJavaTypeName","title":"SqlDelightJavaTypeNameImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/#constructors","text":"SqlDelightJavaTypeNameImpl [jvm] open fun SqlDelightJavaTypeNameImpl (@NotNull()node: @NotNull()ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/#functions","text":"Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParameterizedJavaType [jvm] Content @Nullable() open fun getParameterizedJavaType (): @Nullable() SqlDelightParameterizedJavaType getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/-sql-delight-java-type-name-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeNameImpl / SqlDelightJavaTypeNameImpl SqlDelightJavaTypeNameImpl [jvm] Content open fun SqlDelightJavaTypeNameImpl (@NotNull()node: @NotNull()ASTNode)","title":"SqlDelightJavaTypeNameImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/-sql-delight-java-type-name-impl/#sqldelightjavatypenameimpl","text":"[jvm] Content open fun SqlDelightJavaTypeNameImpl (@NotNull()node: @NotNull()ASTNode)","title":"SqlDelightJavaTypeNameImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/accept/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeNameImpl / accept accept [jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/accept/#accept","text":"[jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/get-parameterized-java-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeNameImpl / getParameterizedJavaType getParameterizedJavaType [jvm] Content @Nullable() open fun getParameterizedJavaType (): @Nullable() SqlDelightParameterizedJavaType","title":"getParameterizedJavaType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/get-parameterized-java-type/#getparameterizedjavatype","text":"[jvm] Content @Nullable() open fun getParameterizedJavaType (): @Nullable() SqlDelightParameterizedJavaType","title":"getParameterizedJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeName2Impl SqlDelightJavaTypeName2Impl [jvm] open class SqlDelightJavaTypeName2Impl : ASTWrapperPsiElement, SqlDelightJavaTypeName2 Constructors SqlDelightJavaTypeName2Impl [jvm] open fun SqlDelightJavaTypeName2Impl (@NotNull()node: @NotNull()ASTNode) Functions Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getJavaType [jvm] Content @NotNull() open fun getJavaType (): @NotNull() SqlDelightJavaType getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"SqlDelightJavaTypeName2Impl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/#sqldelightjavatypename2impl","text":"[jvm] open class SqlDelightJavaTypeName2Impl : ASTWrapperPsiElement, SqlDelightJavaTypeName2","title":"SqlDelightJavaTypeName2Impl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/#constructors","text":"SqlDelightJavaTypeName2Impl [jvm] open fun SqlDelightJavaTypeName2Impl (@NotNull()node: @NotNull()ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/#functions","text":"Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getJavaType [jvm] Content @NotNull() open fun getJavaType (): @NotNull() SqlDelightJavaType getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/-sql-delight-java-type-name2-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeName2Impl / SqlDelightJavaTypeName2Impl SqlDelightJavaTypeName2Impl [jvm] Content open fun SqlDelightJavaTypeName2Impl (@NotNull()node: @NotNull()ASTNode)","title":"SqlDelightJavaTypeName2Impl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/-sql-delight-java-type-name2-impl/#sqldelightjavatypename2impl","text":"[jvm] Content open fun SqlDelightJavaTypeName2Impl (@NotNull()node: @NotNull()ASTNode)","title":"SqlDelightJavaTypeName2Impl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/accept/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeName2Impl / accept accept [jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/accept/#accept","text":"[jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/get-java-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeName2Impl / getJavaType getJavaType [jvm] Content @NotNull() open fun getJavaType (): @NotNull() SqlDelightJavaType","title":"getJavaType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/get-java-type/#getjavatype","text":"[jvm] Content @NotNull() open fun getJavaType (): @NotNull() SqlDelightJavaType","title":"getJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightOverridesImpl SqlDelightOverridesImpl [jvm] open class SqlDelightOverridesImpl : ASTWrapperPsiElement, SqlDelightOverrides Constructors SqlDelightOverridesImpl [jvm] open fun SqlDelightOverridesImpl (@NotNull()node: @NotNull()ASTNode) Functions Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getColumnType [jvm] Content @Nullable() open fun getColumnType (): @Nullable() SqlDelightColumnType getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getInsertStmtValues [jvm] Content @Nullable() open fun getInsertStmtValues (): @Nullable() SqlDelightInsertStmtValues getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getStmtList [jvm] Content @Nullable() open fun getStmtList (): @Nullable() SqlDelightStmtList getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"SqlDelightOverridesImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/#sqldelightoverridesimpl","text":"[jvm] open class SqlDelightOverridesImpl : ASTWrapperPsiElement, SqlDelightOverrides","title":"SqlDelightOverridesImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/#constructors","text":"SqlDelightOverridesImpl [jvm] open fun SqlDelightOverridesImpl (@NotNull()node: @NotNull()ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/#functions","text":"Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getColumnType [jvm] Content @Nullable() open fun getColumnType (): @Nullable() SqlDelightColumnType getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getInsertStmtValues [jvm] Content @Nullable() open fun getInsertStmtValues (): @Nullable() SqlDelightInsertStmtValues getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getStmtList [jvm] Content @Nullable() open fun getStmtList (): @Nullable() SqlDelightStmtList getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/-sql-delight-overrides-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightOverridesImpl / SqlDelightOverridesImpl SqlDelightOverridesImpl [jvm] Content open fun SqlDelightOverridesImpl (@NotNull()node: @NotNull()ASTNode)","title":"SqlDelightOverridesImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/-sql-delight-overrides-impl/#sqldelightoverridesimpl","text":"[jvm] Content open fun SqlDelightOverridesImpl (@NotNull()node: @NotNull()ASTNode)","title":"SqlDelightOverridesImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/accept/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightOverridesImpl / accept accept [jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/accept/#accept","text":"[jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/get-column-type/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightOverridesImpl / getColumnType getColumnType [jvm] Content @Nullable() open fun getColumnType (): @Nullable() SqlDelightColumnType","title":"getColumnType   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/get-column-type/#getcolumntype","text":"[jvm] Content @Nullable() open fun getColumnType (): @Nullable() SqlDelightColumnType","title":"getColumnType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/get-insert-stmt-values/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightOverridesImpl / getInsertStmtValues getInsertStmtValues [jvm] Content @Nullable() open fun getInsertStmtValues (): @Nullable() SqlDelightInsertStmtValues","title":"getInsertStmtValues   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/get-insert-stmt-values/#getinsertstmtvalues","text":"[jvm] Content @Nullable() open fun getInsertStmtValues (): @Nullable() SqlDelightInsertStmtValues","title":"getInsertStmtValues"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/get-stmt-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightOverridesImpl / getStmtList getStmtList [jvm] Content @Nullable() open fun getStmtList (): @Nullable() SqlDelightStmtList","title":"getStmtList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/get-stmt-list/#getstmtlist","text":"[jvm] Content @Nullable() open fun getStmtList (): @Nullable() SqlDelightStmtList","title":"getStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightParameterizedJavaTypeImpl SqlDelightParameterizedJavaTypeImpl [jvm] open class SqlDelightParameterizedJavaTypeImpl : ASTWrapperPsiElement, SqlDelightParameterizedJavaType Constructors SqlDelightParameterizedJavaTypeImpl [jvm] open fun SqlDelightParameterizedJavaTypeImpl (@NotNull()node: @NotNull()ASTNode) Functions Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getJavaTypeList [jvm] Content @NotNull() open fun getJavaTypeList (): @NotNull() List < SqlDelightJavaType > getJavaTypeName2List [jvm] Content @NotNull() open fun getJavaTypeName2List (): @NotNull() List < SqlDelightJavaTypeName2 > getJavaTypeNameList [jvm] Content @NotNull() open fun getJavaTypeNameList (): @NotNull() List < SqlDelightJavaTypeName > getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"SqlDelightParameterizedJavaTypeImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/#sqldelightparameterizedjavatypeimpl","text":"[jvm] open class SqlDelightParameterizedJavaTypeImpl : ASTWrapperPsiElement, SqlDelightParameterizedJavaType","title":"SqlDelightParameterizedJavaTypeImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/#constructors","text":"SqlDelightParameterizedJavaTypeImpl [jvm] open fun SqlDelightParameterizedJavaTypeImpl (@NotNull()node: @NotNull()ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/#functions","text":"Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getJavaTypeList [jvm] Content @NotNull() open fun getJavaTypeList (): @NotNull() List < SqlDelightJavaType > getJavaTypeName2List [jvm] Content @NotNull() open fun getJavaTypeName2List (): @NotNull() List < SqlDelightJavaTypeName2 > getJavaTypeNameList [jvm] Content @NotNull() open fun getJavaTypeNameList (): @NotNull() List < SqlDelightJavaTypeName > getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/-sql-delight-parameterized-java-type-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightParameterizedJavaTypeImpl / SqlDelightParameterizedJavaTypeImpl SqlDelightParameterizedJavaTypeImpl [jvm] Content open fun SqlDelightParameterizedJavaTypeImpl (@NotNull()node: @NotNull()ASTNode)","title":"SqlDelightParameterizedJavaTypeImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/-sql-delight-parameterized-java-type-impl/#sqldelightparameterizedjavatypeimpl","text":"[jvm] Content open fun SqlDelightParameterizedJavaTypeImpl (@NotNull()node: @NotNull()ASTNode)","title":"SqlDelightParameterizedJavaTypeImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/accept/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightParameterizedJavaTypeImpl / accept accept [jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/accept/#accept","text":"[jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/get-java-type-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightParameterizedJavaTypeImpl / getJavaTypeList getJavaTypeList [jvm] Content @NotNull() open fun getJavaTypeList (): @NotNull() List < SqlDelightJavaType >","title":"getJavaTypeList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/get-java-type-list/#getjavatypelist","text":"[jvm] Content @NotNull() open fun getJavaTypeList (): @NotNull() List < SqlDelightJavaType >","title":"getJavaTypeList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/get-java-type-name-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightParameterizedJavaTypeImpl / getJavaTypeNameList getJavaTypeNameList [jvm] Content @NotNull() open fun getJavaTypeNameList (): @NotNull() List < SqlDelightJavaTypeName >","title":"getJavaTypeNameList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/get-java-type-name-list/#getjavatypenamelist","text":"[jvm] Content @NotNull() open fun getJavaTypeNameList (): @NotNull() List < SqlDelightJavaTypeName >","title":"getJavaTypeNameList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/get-java-type-name2-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightParameterizedJavaTypeImpl / getJavaTypeName2List getJavaTypeName2List [jvm] Content @NotNull() open fun getJavaTypeName2List (): @NotNull() List < SqlDelightJavaTypeName2 >","title":"getJavaTypeName2List   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/get-java-type-name2-list/#getjavatypename2list","text":"[jvm] Content @NotNull() open fun getJavaTypeName2List (): @NotNull() List < SqlDelightJavaTypeName2 >","title":"getJavaTypeName2List"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtClojureImpl SqlDelightStmtClojureImpl [jvm] open class SqlDelightStmtClojureImpl : SqlCompositeElementImpl, SqlDelightStmtClojure Constructors SqlDelightStmtClojureImpl [jvm] open fun SqlDelightStmtClojureImpl (node: ASTNode) Functions Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content open fun annotate (annotationHolder: SqlAnnotationHolder) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): SqlFileBase open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getStmtClojureStmtList [jvm] Content @Nullable() open fun getStmtClojureStmtList (): @Nullable() SqlDelightStmtClojureStmtList getStmtIdentifierClojure [jvm] Content @NotNull() open fun getStmtIdentifierClojure (): @NotNull() SqlDelightStmtIdentifierClojure getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T queryAvailable [jvm] Content open fun queryAvailable (child: PsiElement): Collection registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () tablesAvailable [jvm] Content open fun tablesAvailable (child: PsiElement): Collection textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"SqlDelightStmtClojureImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/#sqldelightstmtclojureimpl","text":"[jvm] open class SqlDelightStmtClojureImpl : SqlCompositeElementImpl, SqlDelightStmtClojure","title":"SqlDelightStmtClojureImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/#constructors","text":"SqlDelightStmtClojureImpl [jvm] open fun SqlDelightStmtClojureImpl (node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/#functions","text":"Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content open fun annotate (annotationHolder: SqlAnnotationHolder) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): SqlFileBase open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getStmtClojureStmtList [jvm] Content @Nullable() open fun getStmtClojureStmtList (): @Nullable() SqlDelightStmtClojureStmtList getStmtIdentifierClojure [jvm] Content @NotNull() open fun getStmtIdentifierClojure (): @NotNull() SqlDelightStmtIdentifierClojure getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T queryAvailable [jvm] Content open fun queryAvailable (child: PsiElement): Collection registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () tablesAvailable [jvm] Content open fun tablesAvailable (child: PsiElement): Collection textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/-sql-delight-stmt-clojure-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtClojureImpl / SqlDelightStmtClojureImpl SqlDelightStmtClojureImpl [jvm] Content open fun SqlDelightStmtClojureImpl (node: ASTNode)","title":"SqlDelightStmtClojureImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/-sql-delight-stmt-clojure-impl/#sqldelightstmtclojureimpl","text":"[jvm] Content open fun SqlDelightStmtClojureImpl (node: ASTNode)","title":"SqlDelightStmtClojureImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/accept/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtClojureImpl / accept accept [jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/accept/#accept","text":"[jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/get-stmt-clojure-stmt-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtClojureImpl / getStmtClojureStmtList getStmtClojureStmtList [jvm] Content @Nullable() open fun getStmtClojureStmtList (): @Nullable() SqlDelightStmtClojureStmtList","title":"getStmtClojureStmtList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/get-stmt-clojure-stmt-list/#getstmtclojurestmtlist","text":"[jvm] Content @Nullable() open fun getStmtClojureStmtList (): @Nullable() SqlDelightStmtClojureStmtList","title":"getStmtClojureStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/get-stmt-identifier-clojure/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtClojureImpl / getStmtIdentifierClojure getStmtIdentifierClojure [jvm] Content @NotNull() open fun getStmtIdentifierClojure (): @NotNull() SqlDelightStmtIdentifierClojure","title":"getStmtIdentifierClojure   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/get-stmt-identifier-clojure/#getstmtidentifierclojure","text":"[jvm] Content @NotNull() open fun getStmtIdentifierClojure (): @NotNull() SqlDelightStmtIdentifierClojure","title":"getStmtIdentifierClojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-stmt-list-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtClojureStmtListImpl SqlDelightStmtClojureStmtListImpl [jvm] open class SqlDelightStmtClojureStmtListImpl : ClojureStmtListMixin , SqlDelightStmtClojureStmtList Constructors SqlDelightStmtClojureStmtListImpl [jvm] open fun SqlDelightStmtClojureStmtListImpl (node: ASTNode) Functions Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content open fun annotate (annotationHolder: SqlAnnotationHolder) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): SqlFileBase open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T queryAvailable [jvm] Content open fun queryAvailable (child: PsiElement): Collection registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () tablesAvailable [jvm] Content open fun tablesAvailable (child: PsiElement): Collection open fun tablesAvailable (child: Null ): Null textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"SqlDelightStmtClojureStmtListImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-stmt-list-impl/#sqldelightstmtclojurestmtlistimpl","text":"[jvm] open class SqlDelightStmtClojureStmtListImpl : ClojureStmtListMixin , SqlDelightStmtClojureStmtList","title":"SqlDelightStmtClojureStmtListImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-stmt-list-impl/#constructors","text":"SqlDelightStmtClojureStmtListImpl [jvm] open fun SqlDelightStmtClojureStmtListImpl (node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-stmt-list-impl/#functions","text":"Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content open fun annotate (annotationHolder: SqlAnnotationHolder) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): SqlFileBase open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T queryAvailable [jvm] Content open fun queryAvailable (child: PsiElement): Collection registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () tablesAvailable [jvm] Content open fun tablesAvailable (child: PsiElement): Collection open fun tablesAvailable (child: Null ): Null textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-stmt-list-impl/-sql-delight-stmt-clojure-stmt-list-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtClojureStmtListImpl / SqlDelightStmtClojureStmtListImpl SqlDelightStmtClojureStmtListImpl [jvm] Content open fun SqlDelightStmtClojureStmtListImpl (node: ASTNode)","title":"SqlDelightStmtClojureStmtListImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-stmt-list-impl/-sql-delight-stmt-clojure-stmt-list-impl/#sqldelightstmtclojurestmtlistimpl","text":"[jvm] Content open fun SqlDelightStmtClojureStmtListImpl (node: ASTNode)","title":"SqlDelightStmtClojureStmtListImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-stmt-list-impl/accept/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtClojureStmtListImpl / accept accept [jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-stmt-list-impl/accept/#accept","text":"[jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-clojure-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtIdentifierClojureImpl SqlDelightStmtIdentifierClojureImpl [jvm] open class SqlDelightStmtIdentifierClojureImpl : StmtIdentifierMixin , SqlDelightStmtIdentifierClojure Constructors SqlDelightStmtIdentifierClojureImpl [jvm] open fun SqlDelightStmtIdentifierClojureImpl (node: ASTNode) Functions Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) open fun annotate (annotationHolder: Null ) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String open fun getName (): Null getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon identifier [jvm] Content open fun identifier (): Null isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) setName [jvm] Content abstract fun setName (p: String ): PsiElement open fun setName (name: Null ): Null subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"SqlDelightStmtIdentifierClojureImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-clojure-impl/#sqldelightstmtidentifierclojureimpl","text":"[jvm] open class SqlDelightStmtIdentifierClojureImpl : StmtIdentifierMixin , SqlDelightStmtIdentifierClojure","title":"SqlDelightStmtIdentifierClojureImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-clojure-impl/#constructors","text":"SqlDelightStmtIdentifierClojureImpl [jvm] open fun SqlDelightStmtIdentifierClojureImpl (node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-clojure-impl/#functions","text":"Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) open fun annotate (annotationHolder: Null ) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String open fun getName (): Null getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon identifier [jvm] Content open fun identifier (): Null isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) setName [jvm] Content abstract fun setName (p: String ): PsiElement open fun setName (name: Null ): Null subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-clojure-impl/-sql-delight-stmt-identifier-clojure-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtIdentifierClojureImpl / SqlDelightStmtIdentifierClojureImpl SqlDelightStmtIdentifierClojureImpl [jvm] Content open fun SqlDelightStmtIdentifierClojureImpl (node: ASTNode)","title":"SqlDelightStmtIdentifierClojureImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-clojure-impl/-sql-delight-stmt-identifier-clojure-impl/#sqldelightstmtidentifierclojureimpl","text":"[jvm] Content open fun SqlDelightStmtIdentifierClojureImpl (node: ASTNode)","title":"SqlDelightStmtIdentifierClojureImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-clojure-impl/accept/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtIdentifierClojureImpl / accept accept [jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-clojure-impl/accept/#accept","text":"[jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtIdentifierImpl SqlDelightStmtIdentifierImpl [jvm] open class SqlDelightStmtIdentifierImpl : StmtIdentifierMixin , SqlDelightStmtIdentifier Constructors SqlDelightStmtIdentifierImpl [jvm] open fun SqlDelightStmtIdentifierImpl (node: ASTNode) Functions Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) open fun annotate (annotationHolder: Null ) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String open fun getName (): Null getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon identifier [jvm] Content open fun identifier (): Null isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) setName [jvm] Content abstract fun setName (p: String ): PsiElement open fun setName (name: Null ): Null subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"SqlDelightStmtIdentifierImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-impl/#sqldelightstmtidentifierimpl","text":"[jvm] open class SqlDelightStmtIdentifierImpl : StmtIdentifierMixin , SqlDelightStmtIdentifier","title":"SqlDelightStmtIdentifierImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-impl/#constructors","text":"SqlDelightStmtIdentifierImpl [jvm] open fun SqlDelightStmtIdentifierImpl (node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-impl/#functions","text":"Name Summary accept [jvm] Content open fun accept (visitor: PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content abstract fun annotate (p: SqlAnnotationHolder) open fun annotate (annotationHolder: Null ) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String open fun getName (): Null getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon identifier [jvm] Content open fun identifier (): Null isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) setName [jvm] Content abstract fun setName (p: String ): PsiElement open fun setName (name: Null ): Null subtreeChanged [jvm] Content open fun subtreeChanged () textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-impl/-sql-delight-stmt-identifier-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtIdentifierImpl / SqlDelightStmtIdentifierImpl SqlDelightStmtIdentifierImpl [jvm] Content open fun SqlDelightStmtIdentifierImpl (node: ASTNode)","title":"SqlDelightStmtIdentifierImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-impl/-sql-delight-stmt-identifier-impl/#sqldelightstmtidentifierimpl","text":"[jvm] Content open fun SqlDelightStmtIdentifierImpl (node: ASTNode)","title":"SqlDelightStmtIdentifierImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-impl/accept/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtIdentifierImpl / accept accept [jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-impl/accept/#accept","text":"[jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtListImpl SqlDelightStmtListImpl [jvm] open class SqlDelightStmtListImpl : SqlStmtListImpl, SqlDelightStmtList Constructors SqlDelightStmtListImpl [jvm] open fun SqlDelightStmtListImpl (node: ASTNode) Functions Name Summary accept [jvm] Content open fun accept (visitor: SqlVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content open fun annotate (annotationHolder: SqlAnnotationHolder) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): SqlFileBase open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getImportStmtList [jvm] Content @NotNull() open fun getImportStmtList (): @NotNull() SqlDelightImportStmtList getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getStmtClojureList [jvm] Content @NotNull() open fun getStmtClojureList (): @NotNull() List < SqlDelightStmtClojure > getStmtIdentifierList [jvm] Content @NotNull() open fun getStmtIdentifierList (): @NotNull() List < SqlDelightStmtIdentifier > getStmtList [jvm] Content open fun getStmtList (): List getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T queryAvailable [jvm] Content open fun queryAvailable (child: PsiElement): Collection registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () tablesAvailable [jvm] Content open fun tablesAvailable (child: PsiElement): Collection textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"SqlDelightStmtListImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/#sqldelightstmtlistimpl","text":"[jvm] open class SqlDelightStmtListImpl : SqlStmtListImpl, SqlDelightStmtList","title":"SqlDelightStmtListImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/#constructors","text":"SqlDelightStmtListImpl [jvm] open fun SqlDelightStmtListImpl (node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/#functions","text":"Name Summary accept [jvm] Content open fun accept (visitor: SqlVisitor) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor) open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) acceptChildren [jvm] Content open fun acceptChildren (visitor: PsiElementVisitor) add [jvm] Content open fun add (element: PsiElement): PsiElement addAfter [jvm] Content open fun addAfter (element: PsiElement, anchor: PsiElement): PsiElement addBefore [jvm] Content open fun addBefore (element: PsiElement, anchor: PsiElement): PsiElement addInternal [jvm] Content open fun addInternal (first: ASTNode, last: ASTNode, anchor: ASTNode, before: Boolean ): ASTNode addRange [jvm] Content open fun addRange (first: PsiElement, last: PsiElement): PsiElement addRangeAfter [jvm] Content open fun addRangeAfter (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement addRangeBefore [jvm] Content open fun addRangeBefore (first: PsiElement, last: PsiElement, anchor: PsiElement): PsiElement annotate [jvm] Content open fun annotate (annotationHolder: SqlAnnotationHolder) buildRowIcon [jvm] Content open fun buildRowIcon (baseIcon: Icon , visibilityIcon: Icon ): RowIcon canNavigate [jvm] Content open fun canNavigate (): Boolean canNavigateToSource [jvm] Content open fun canNavigateToSource (): Boolean checkAdd [jvm] Content open fun checkAdd (element: PsiElement) checkDelete [jvm] Content open fun checkDelete () copy [jvm] Content open fun copy (): PsiElement copyCopyableDataTo [jvm] Content open fun copyCopyableDataTo (clone: UserDataHolderBase) copyUserDataTo [jvm] Content open fun copyUserDataTo (other: UserDataHolderBase) createLayeredIcon [jvm] Content open fun createLayeredIcon (instance: Iconable, icon: Icon , flags: Int ): RowIcon delete [jvm] Content open fun delete () deleteChildInternal [jvm] Content open fun deleteChildInternal (child: ASTNode) deleteChildRange [jvm] Content open fun deleteChildRange (first: PsiElement, last: PsiElement) deleteElementFromParent [jvm] Content open fun deleteElementFromParent (element: PsiElement) findElementAt [jvm] Content open fun findElementAt (offset: Int ): PsiElement findReferenceAt [jvm] Content open fun findReferenceAt (offset: Int ): PsiReference getChildren [jvm] Content open fun getChildren (): Array getContainingFile [jvm] Content open fun getContainingFile (): SqlFileBase open fun getContainingFile (): PsiFile getContext [jvm] Content open fun getContext (): PsiElement getCopyableUserData [jvm] Content open fun < T > getCopyableUserData (key: Key< T >): T getFirstChild [jvm] Content open fun getFirstChild (): PsiElement getIcon [jvm] Content open fun getIcon (flags: Int ): Icon getImportStmtList [jvm] Content @NotNull() open fun getImportStmtList (): @NotNull() SqlDelightImportStmtList getLanguage [jvm] Content open fun getLanguage (): Language getLastChild [jvm] Content open fun getLastChild (): PsiElement getManager [jvm] Content open fun getManager (): PsiManagerEx open fun getManager (): PsiManager getName [jvm] Content open fun getName (): String getNavigationElement [jvm] Content open fun getNavigationElement (): PsiElement getNextSibling [jvm] Content open fun getNextSibling (): PsiElement getNode [jvm] Content open fun getNode (): ASTNode getOriginalElement [jvm] Content open fun getOriginalElement (): PsiElement getOwnReferences [jvm] Content open fun getOwnReferences (): Iterable getParent [jvm] Content open fun getParent (): PsiElement getPresentation [jvm] Content open fun getPresentation (): ItemPresentation getPrevSibling [jvm] Content open fun getPrevSibling (): PsiElement getProject [jvm] Content open fun getProject (): Project getReference [jvm] Content open fun getReference (): PsiReference getReferences [jvm] Content open fun getReferences (): Array getResolveScope [jvm] Content open fun getResolveScope (): GlobalSearchScope getStartOffsetInParent [jvm] Content open fun getStartOffsetInParent (): Int getStmtClojureList [jvm] Content @NotNull() open fun getStmtClojureList (): @NotNull() List < SqlDelightStmtClojure > getStmtIdentifierList [jvm] Content @NotNull() open fun getStmtIdentifierList (): @NotNull() List < SqlDelightStmtIdentifier > getStmtList [jvm] Content open fun getStmtList (): List getText [jvm] Content open fun getText (): String getTextLength [jvm] Content open fun getTextLength (): Int getTextOffset [jvm] Content open fun getTextOffset (): Int getTextRange [jvm] Content open fun getTextRange (): TextRange getTextRangeInParent [jvm] Content open fun getTextRangeInParent (): TextRange getUserData [jvm] Content open fun < T > getUserData (key: Key< T >): T getUserDataString [jvm] Content open fun getUserDataString (): String getUseScope [jvm] Content open fun getUseScope (): SearchScope iconWithVisibilityIfNeeded [jvm] Content open fun iconWithVisibilityIfNeeded (flags: Int , baseIcon: Icon , visibility: Icon ): Icon isEquivalentTo [jvm] Content open fun isEquivalentTo (another: PsiElement): Boolean isNativeFileType [jvm] Content open fun isNativeFileType (fileType: FileType): Boolean isPhysical [jvm] Content open fun isPhysical (): Boolean isUserDataEmpty [jvm] Content open fun isUserDataEmpty (): Boolean isValid [jvm] Content open fun isValid (): Boolean isWritable [jvm] Content open fun isWritable (): Boolean navigate [jvm] Content open fun navigate (requestFocus: Boolean ) overlayIcons [jvm] Content open fun overlayIcons (icons: Array < Icon >): Icon processDeclarations [jvm] Content open fun processDeclarations (processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement, place: PsiElement): Boolean putCopyableUserData [jvm] Content open fun < T > putCopyableUserData (key: Key< T >, value: T ) putUserData [jvm] Content open fun < T > putUserData (key: Key< T >, value: T ) putUserDataIfAbsent [jvm] Content open fun < T > putUserDataIfAbsent (key: Key< T >, value: T ): T queryAvailable [jvm] Content open fun queryAvailable (child: PsiElement): Collection registerIconLayer [jvm] Content open fun registerIconLayer (flagMask: Int , icon: Icon ) replace [jvm] Content open fun replace (newElement: PsiElement): PsiElement open fun < T > replace (key: Key< T >, oldValue: T , newValue: T ): Boolean replaceChildInternal [jvm] Content open fun replaceChildInternal (child: PsiElement, newElement: TreeElement) subtreeChanged [jvm] Content open fun subtreeChanged () tablesAvailable [jvm] Content open fun tablesAvailable (child: PsiElement): Collection textContains [jvm] Content open fun textContains (c: Char ): Boolean textMatches [jvm] Content open fun textMatches (text: CharSequence ): Boolean textToCharArray [jvm] Content open fun textToCharArray (): Array < Char > toString [jvm] Content open fun toString (): String transformFlags [jvm] Content open fun transformFlags (element: PsiElement, _flags: Int ): Int","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/-sql-delight-stmt-list-impl/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtListImpl / SqlDelightStmtListImpl SqlDelightStmtListImpl [jvm] Content open fun SqlDelightStmtListImpl (node: ASTNode)","title":"SqlDelightStmtListImpl   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/-sql-delight-stmt-list-impl/#sqldelightstmtlistimpl","text":"[jvm] Content open fun SqlDelightStmtListImpl (node: ASTNode)","title":"SqlDelightStmtListImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/accept/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtListImpl / accept accept [jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/accept/#accept","text":"[jvm] Content open fun accept (@NotNull()visitor: @NotNull() SqlDelightVisitor ) open fun accept (@NotNull()visitor: @NotNull()PsiElementVisitor)","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/get-import-stmt-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtListImpl / getImportStmtList getImportStmtList [jvm] Content @NotNull() open fun getImportStmtList (): @NotNull() SqlDelightImportStmtList","title":"getImportStmtList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/get-import-stmt-list/#getimportstmtlist","text":"[jvm] Content @NotNull() open fun getImportStmtList (): @NotNull() SqlDelightImportStmtList","title":"getImportStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/get-stmt-clojure-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtListImpl / getStmtClojureList getStmtClojureList [jvm] Content @NotNull() open fun getStmtClojureList (): @NotNull() List < SqlDelightStmtClojure >","title":"getStmtClojureList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/get-stmt-clojure-list/#getstmtclojurelist","text":"[jvm] Content @NotNull() open fun getStmtClojureList (): @NotNull() List < SqlDelightStmtClojure >","title":"getStmtClojureList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/get-stmt-identifier-list/","text":"// sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtListImpl / getStmtIdentifierList getStmtIdentifierList [jvm] Content @NotNull() open fun getStmtIdentifierList (): @NotNull() List < SqlDelightStmtIdentifier >","title":"getStmtIdentifierList   - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/get-stmt-identifier-list/#getstmtidentifierlist","text":"[jvm] Content @NotNull() open fun getStmtIdentifierList (): @NotNull() List < SqlDelightStmtIdentifier >","title":"getStmtIdentifierList"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle Package com.squareup.sqldelight.gradle Types Name Summary GenerateMigrationOutputTask [jvm] Content @CacheableTask() abstract class GenerateMigrationOutputTask : SqlDelightWorkerTask GenerateSchemaTask [jvm] Content @CacheableTask() abstract class GenerateSchemaTask : SqlDelightWorkerTask SqlDelightCompilationUnitImpl [jvm] Content data class SqlDelightCompilationUnitImpl ( name : String , sourceFolders : List < SqlDelightSourceFolderImpl >, outputDirectoryFile : File ) : SqlDelightCompilationUnit SqlDelightDatabase [jvm] Content class SqlDelightDatabase ( project : Project, name : String , packageName : String ?, schemaOutputDirectory : File ?, sourceFolders : Collection < String >?, dialect : String ?, deriveSchemaFromMigrations : Boolean , verifyMigrations : Boolean , migrationOutputDirectory : File ?, migrationOutputFileFormat : String ) SqlDelightDatabaseNameImpl [jvm] Content data class SqlDelightDatabaseNameImpl ( packageName : String , className : String ) : SqlDelightDatabaseName SqlDelightDatabasePropertiesImpl [jvm] Content data class SqlDelightDatabasePropertiesImpl ( packageName : String , compilationUnits : List < SqlDelightCompilationUnitImpl >, className : String , dependencies : List < SqlDelightDatabaseNameImpl >, dialectPresetName : String , deriveSchemaFromMigrations : Boolean , rootDirectory : File ) : SqlDelightDatabaseProperties SqlDelightExtension [jvm] Content open class SqlDelightExtension SqlDelightPlugin [jvm] Content abstract class SqlDelightPlugin : Plugin SqlDelightPropertiesFileImpl [jvm] Content data class SqlDelightPropertiesFileImpl ( databases : List < SqlDelightDatabasePropertiesImpl >, minimumSupportedVersion : String , currentVersion : String ) : SqlDelightPropertiesFile SqlDelightSourceFolderImpl [jvm] Content data class SqlDelightSourceFolderImpl ( folder : File , dependency : Boolean ) : SqlDelightSourceFolder SqlDelightTask [jvm] Content @CacheableTask() abstract class SqlDelightTask : SqlDelightWorkerTask SqlDelightWorkerTask [jvm] Content abstract class SqlDelightWorkerTask : SourceTask More info Common API for interacting with gradle workers in tasks VerifyMigrationTask [jvm] Content @CacheableTask() abstract class VerifyMigrationTask : SqlDelightWorkerTask","title":"Package com.squareup.sqldelight.gradle   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/#package-comsquareupsqldelightgradle","text":"","title":"Package com.squareup.sqldelight.gradle"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/#types","text":"Name Summary GenerateMigrationOutputTask [jvm] Content @CacheableTask() abstract class GenerateMigrationOutputTask : SqlDelightWorkerTask GenerateSchemaTask [jvm] Content @CacheableTask() abstract class GenerateSchemaTask : SqlDelightWorkerTask SqlDelightCompilationUnitImpl [jvm] Content data class SqlDelightCompilationUnitImpl ( name : String , sourceFolders : List < SqlDelightSourceFolderImpl >, outputDirectoryFile : File ) : SqlDelightCompilationUnit SqlDelightDatabase [jvm] Content class SqlDelightDatabase ( project : Project, name : String , packageName : String ?, schemaOutputDirectory : File ?, sourceFolders : Collection < String >?, dialect : String ?, deriveSchemaFromMigrations : Boolean , verifyMigrations : Boolean , migrationOutputDirectory : File ?, migrationOutputFileFormat : String ) SqlDelightDatabaseNameImpl [jvm] Content data class SqlDelightDatabaseNameImpl ( packageName : String , className : String ) : SqlDelightDatabaseName SqlDelightDatabasePropertiesImpl [jvm] Content data class SqlDelightDatabasePropertiesImpl ( packageName : String , compilationUnits : List < SqlDelightCompilationUnitImpl >, className : String , dependencies : List < SqlDelightDatabaseNameImpl >, dialectPresetName : String , deriveSchemaFromMigrations : Boolean , rootDirectory : File ) : SqlDelightDatabaseProperties SqlDelightExtension [jvm] Content open class SqlDelightExtension SqlDelightPlugin [jvm] Content abstract class SqlDelightPlugin : Plugin SqlDelightPropertiesFileImpl [jvm] Content data class SqlDelightPropertiesFileImpl ( databases : List < SqlDelightDatabasePropertiesImpl >, minimumSupportedVersion : String , currentVersion : String ) : SqlDelightPropertiesFile SqlDelightSourceFolderImpl [jvm] Content data class SqlDelightSourceFolderImpl ( folder : File , dependency : Boolean ) : SqlDelightSourceFolder SqlDelightTask [jvm] Content @CacheableTask() abstract class SqlDelightTask : SqlDelightWorkerTask SqlDelightWorkerTask [jvm] Content abstract class SqlDelightWorkerTask : SourceTask More info Common API for interacting with gradle workers in tasks VerifyMigrationTask [jvm] Content @CacheableTask() abstract class VerifyMigrationTask : SqlDelightWorkerTask","title":"Types"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask GenerateMigrationOutputTask [jvm] @CacheableTask() abstract class GenerateMigrationOutputTask : SqlDelightWorkerTask Types Name Summary GenerateMigration [jvm] Content abstract class GenerateMigration : WorkAction< GenerateMigrationOutputTask.GenerateSchemaWorkParameters > GenerateSchemaWorkParameters [jvm] Content interface GenerateSchemaWorkParameters : WorkParameters Functions Name Summary appendParallelSafeAction [jvm] Content open override fun appendParallelSafeAction (p0: Action ) compareTo [jvm] Content open operator override fun compareTo (other: Task): Int configure [jvm] Content open override fun configure (p0: Closure< Any >): Task conventionMapping [jvm] Content open fun conventionMapping (p0: String , p1: Closure< Any >): Task open fun conventionMapping (p0: String , p1: Callable <*>): Task dependsOn [jvm] Content open override fun dependsOn (vararg p0: Any ): Task disableClassLoaderIsolation [jvm] Content fun disableClassLoaderIsolation () More info Makes the task use WorkerExecutor.noIsolation instead of WorkerExecutor.classLoaderIsolation doFirst [jvm] Content open override fun doFirst (p0: Closure< Any >): Task open override fun doFirst (p0: Action ): Task open override fun doFirst (p0: String , p1: Action ): Task doLast [jvm] Content open override fun doLast (p0: Closure< Any >): Task open override fun doLast (p0: Action ): Task open override fun doLast (p0: String , p1: Action ): Task exclude [jvm] Content open override fun exclude (p0: Closure< Any >): SourceTask open override fun exclude (vararg p0: String ): SourceTask open override fun exclude (p0: MutableIterable < String >): SourceTask open override fun exclude (p0: Spec ): SourceTask finalizedBy [jvm] Content open override fun finalizedBy (vararg p0: Any ): Task generateSchemaFile [jvm] Content fun generateSchemaFile () getActions [jvm] Content open override fun getActions (): MutableList > getAnt [jvm] Content open override fun getAnt (): AntBuilder getAsDynamicObject [jvm] Content @Internal() open override fun getAsDynamicObject (): DynamicObject getConvention [jvm] Content @Internal() ~~open~~ ~~override~~ ~~fun~~ ~~getConvention~~ ~~(~~~~)~~~~:~~ Convention getConventionMapping [jvm] Content @Internal() open override fun getConventionMapping (): ConventionMapping getDependsOn [jvm] Content open override fun getDependsOn (): MutableSet < Any > getDescription [jvm] Content open override fun getDescription (): String ? getDestroyables [jvm] Content open override fun getDestroyables (): TaskDestroyables getDidWork [jvm] Content open override fun getDidWork (): Boolean getEnabled [jvm] Content open override fun getEnabled (): Boolean getExcludes [jvm] Content @Internal() open override fun getExcludes (): MutableSet < String > getExtensions [jvm] Content open override fun getExtensions (): ExtensionContainer getFinalizedBy [jvm] Content open override fun getFinalizedBy (): TaskDependency getGroup [jvm] Content open override fun getGroup (): String ? getIdentityPath [jvm] Content open override fun getIdentityPath (): Path getImpliesSubProjects [jvm] Content open override fun getImpliesSubProjects (): Boolean getIncludes [jvm] Content @Internal() open override fun getIncludes (): MutableSet < String > getInputs [jvm] Content open override fun getInputs (): TaskInputsInternal getLocalState [jvm] Content open override fun getLocalState (): TaskLocalState getLogger [jvm] Content open override fun getLogger (): Logger getLogging [jvm] Content open override fun getLogging (): LoggingManager getMustRunAfter [jvm] Content open override fun getMustRunAfter (): TaskDependency getName [jvm] Content open override fun getName (): String getOnlyIf [jvm] Content open override fun getOnlyIf (): Spec getOutputs [jvm] Content open override fun getOutputs (): TaskOutputsInternal getPath [jvm] Content open override fun getPath (): String getPatternSetFactory [jvm] Content @Inject() open fun getPatternSetFactory (): Factory getProject [jvm] Content open override fun getProject (): Project getRequiredServices [jvm] Content open override fun getRequiredServices (): MutableSet <Provider<out BuildService<*>>> getServices [jvm] Content @Internal() open fun getServices (): ServiceRegistry getSharedResources [jvm] Content open override fun getSharedResources (): MutableList getShouldRunAfter [jvm] Content open override fun getShouldRunAfter (): TaskDependency getSource [jvm] Content @InputFiles() @SkipWhenEmpty() @PathSensitive(value = PathSensitivity.RELATIVE) open override fun getSource (): FileTree getStandardOutputCapture [jvm] Content open override fun getStandardOutputCapture (): StandardOutputCapture getState [jvm] Content open override fun getState (): TaskStateInternal getTaskActions [jvm] Content open override fun getTaskActions (): MutableList getTaskDependencies [jvm] Content open override fun getTaskDependencies (): TaskDependencyInternal getTaskIdentity [jvm] Content open override fun getTaskIdentity (): TaskIdentity<*> getTemporaryDir [jvm] Content open override fun getTemporaryDir (): File getTemporaryDirFactory [jvm] Content open override fun getTemporaryDirFactory (): Factory< File > getTimeout [jvm] Content open override fun getTimeout (): Property< Duration > hasProperty [jvm] Content open override fun hasProperty (p0: String ): Boolean hasTaskActions [jvm] Content open override fun hasTaskActions (): Boolean include [jvm] Content open override fun include (p0: Closure< Any >): SourceTask open override fun include (vararg p0: String ): SourceTask open override fun include (p0: MutableIterable < String >): SourceTask open override fun include (p0: Spec ): SourceTask isEnabled [jvm] Content @Internal() open fun isEnabled (): Boolean isHasCustomActions [jvm] Content open override fun isHasCustomActions (): Boolean mustRunAfter [jvm] Content open override fun mustRunAfter (vararg p0: Any ): Task onlyIf [jvm] Content open override fun onlyIf (p0: Closure< Any >) open override fun onlyIf (p0: Spec ) prependParallelSafeAction [jvm] Content open override fun prependParallelSafeAction (p0: Action ) property [jvm] Content open override fun property (p0: String ): Any ? setActions [jvm] Content open override fun setActions (p0: MutableList >) setDependsOn [jvm] Content open override fun setDependsOn (p0: MutableIterable <*>) setDescription [jvm] Content open override fun setDescription (p0: String ?) setDidWork [jvm] Content open override fun setDidWork (p0: Boolean ) setEnabled [jvm] Content open override fun setEnabled (p0: Boolean ) setExcludes [jvm] Content open override fun setExcludes (p0: MutableIterable < String >): SourceTask setFinalizedBy [jvm] Content open override fun setFinalizedBy (p0: MutableIterable <*>) setGroup [jvm] Content open override fun setGroup (p0: String ?) setImpliesSubProjects [jvm] Content open override fun setImpliesSubProjects (p0: Boolean ) setIncludes [jvm] Content open override fun setIncludes (p0: MutableIterable < String >): SourceTask setMustRunAfter [jvm] Content open override fun setMustRunAfter (p0: MutableIterable <*>) setOnlyIf [jvm] Content open override fun setOnlyIf (p0: Closure< Any >) open override fun setOnlyIf (p0: Spec ) setProperty [jvm] Content open override fun setProperty (p0: String , p1: Any ) setShouldRunAfter [jvm] Content open override fun setShouldRunAfter (p0: MutableIterable <*>) setSource [jvm] Content open fun setSource (p0: Any ) open fun setSource (p0: FileTree) shouldRunAfter [jvm] Content open override fun shouldRunAfter (vararg p0: Any ): TaskDependency source [jvm] Content open fun source (vararg p0: Any ): SourceTask usesService [jvm] Content open override fun usesService (p0: Provider<out BuildService<*>>) Properties Name Summary compilationUnit [jvm] lateinit var compilationUnit : SqlDelightCompilationUnitImpl migrationOutputExtension [jvm] @Input() lateinit var migrationOutputExtension : String outputDirectory [jvm] var outputDirectory : File ? = null pluginVersion [jvm] @Input() val pluginVersion : String projectName [jvm] @Input() val projectName : Property< String > properties [jvm] lateinit var properties : SqlDelightDatabasePropertiesImpl","title":"GenerateMigrationOutputTask   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/#generatemigrationoutputtask","text":"[jvm] @CacheableTask() abstract class GenerateMigrationOutputTask : SqlDelightWorkerTask","title":"GenerateMigrationOutputTask"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/#types","text":"Name Summary GenerateMigration [jvm] Content abstract class GenerateMigration : WorkAction< GenerateMigrationOutputTask.GenerateSchemaWorkParameters > GenerateSchemaWorkParameters [jvm] Content interface GenerateSchemaWorkParameters : WorkParameters","title":"Types"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/#functions","text":"Name Summary appendParallelSafeAction [jvm] Content open override fun appendParallelSafeAction (p0: Action ) compareTo [jvm] Content open operator override fun compareTo (other: Task): Int configure [jvm] Content open override fun configure (p0: Closure< Any >): Task conventionMapping [jvm] Content open fun conventionMapping (p0: String , p1: Closure< Any >): Task open fun conventionMapping (p0: String , p1: Callable <*>): Task dependsOn [jvm] Content open override fun dependsOn (vararg p0: Any ): Task disableClassLoaderIsolation [jvm] Content fun disableClassLoaderIsolation () More info Makes the task use WorkerExecutor.noIsolation instead of WorkerExecutor.classLoaderIsolation doFirst [jvm] Content open override fun doFirst (p0: Closure< Any >): Task open override fun doFirst (p0: Action ): Task open override fun doFirst (p0: String , p1: Action ): Task doLast [jvm] Content open override fun doLast (p0: Closure< Any >): Task open override fun doLast (p0: Action ): Task open override fun doLast (p0: String , p1: Action ): Task exclude [jvm] Content open override fun exclude (p0: Closure< Any >): SourceTask open override fun exclude (vararg p0: String ): SourceTask open override fun exclude (p0: MutableIterable < String >): SourceTask open override fun exclude (p0: Spec ): SourceTask finalizedBy [jvm] Content open override fun finalizedBy (vararg p0: Any ): Task generateSchemaFile [jvm] Content fun generateSchemaFile () getActions [jvm] Content open override fun getActions (): MutableList > getAnt [jvm] Content open override fun getAnt (): AntBuilder getAsDynamicObject [jvm] Content @Internal() open override fun getAsDynamicObject (): DynamicObject getConvention [jvm] Content @Internal() ~~open~~ ~~override~~ ~~fun~~ ~~getConvention~~ ~~(~~~~)~~~~:~~ Convention getConventionMapping [jvm] Content @Internal() open override fun getConventionMapping (): ConventionMapping getDependsOn [jvm] Content open override fun getDependsOn (): MutableSet < Any > getDescription [jvm] Content open override fun getDescription (): String ? getDestroyables [jvm] Content open override fun getDestroyables (): TaskDestroyables getDidWork [jvm] Content open override fun getDidWork (): Boolean getEnabled [jvm] Content open override fun getEnabled (): Boolean getExcludes [jvm] Content @Internal() open override fun getExcludes (): MutableSet < String > getExtensions [jvm] Content open override fun getExtensions (): ExtensionContainer getFinalizedBy [jvm] Content open override fun getFinalizedBy (): TaskDependency getGroup [jvm] Content open override fun getGroup (): String ? getIdentityPath [jvm] Content open override fun getIdentityPath (): Path getImpliesSubProjects [jvm] Content open override fun getImpliesSubProjects (): Boolean getIncludes [jvm] Content @Internal() open override fun getIncludes (): MutableSet < String > getInputs [jvm] Content open override fun getInputs (): TaskInputsInternal getLocalState [jvm] Content open override fun getLocalState (): TaskLocalState getLogger [jvm] Content open override fun getLogger (): Logger getLogging [jvm] Content open override fun getLogging (): LoggingManager getMustRunAfter [jvm] Content open override fun getMustRunAfter (): TaskDependency getName [jvm] Content open override fun getName (): String getOnlyIf [jvm] Content open override fun getOnlyIf (): Spec getOutputs [jvm] Content open override fun getOutputs (): TaskOutputsInternal getPath [jvm] Content open override fun getPath (): String getPatternSetFactory [jvm] Content @Inject() open fun getPatternSetFactory (): Factory getProject [jvm] Content open override fun getProject (): Project getRequiredServices [jvm] Content open override fun getRequiredServices (): MutableSet <Provider<out BuildService<*>>> getServices [jvm] Content @Internal() open fun getServices (): ServiceRegistry getSharedResources [jvm] Content open override fun getSharedResources (): MutableList getShouldRunAfter [jvm] Content open override fun getShouldRunAfter (): TaskDependency getSource [jvm] Content @InputFiles() @SkipWhenEmpty() @PathSensitive(value = PathSensitivity.RELATIVE) open override fun getSource (): FileTree getStandardOutputCapture [jvm] Content open override fun getStandardOutputCapture (): StandardOutputCapture getState [jvm] Content open override fun getState (): TaskStateInternal getTaskActions [jvm] Content open override fun getTaskActions (): MutableList getTaskDependencies [jvm] Content open override fun getTaskDependencies (): TaskDependencyInternal getTaskIdentity [jvm] Content open override fun getTaskIdentity (): TaskIdentity<*> getTemporaryDir [jvm] Content open override fun getTemporaryDir (): File getTemporaryDirFactory [jvm] Content open override fun getTemporaryDirFactory (): Factory< File > getTimeout [jvm] Content open override fun getTimeout (): Property< Duration > hasProperty [jvm] Content open override fun hasProperty (p0: String ): Boolean hasTaskActions [jvm] Content open override fun hasTaskActions (): Boolean include [jvm] Content open override fun include (p0: Closure< Any >): SourceTask open override fun include (vararg p0: String ): SourceTask open override fun include (p0: MutableIterable < String >): SourceTask open override fun include (p0: Spec ): SourceTask isEnabled [jvm] Content @Internal() open fun isEnabled (): Boolean isHasCustomActions [jvm] Content open override fun isHasCustomActions (): Boolean mustRunAfter [jvm] Content open override fun mustRunAfter (vararg p0: Any ): Task onlyIf [jvm] Content open override fun onlyIf (p0: Closure< Any >) open override fun onlyIf (p0: Spec ) prependParallelSafeAction [jvm] Content open override fun prependParallelSafeAction (p0: Action ) property [jvm] Content open override fun property (p0: String ): Any ? setActions [jvm] Content open override fun setActions (p0: MutableList >) setDependsOn [jvm] Content open override fun setDependsOn (p0: MutableIterable <*>) setDescription [jvm] Content open override fun setDescription (p0: String ?) setDidWork [jvm] Content open override fun setDidWork (p0: Boolean ) setEnabled [jvm] Content open override fun setEnabled (p0: Boolean ) setExcludes [jvm] Content open override fun setExcludes (p0: MutableIterable < String >): SourceTask setFinalizedBy [jvm] Content open override fun setFinalizedBy (p0: MutableIterable <*>) setGroup [jvm] Content open override fun setGroup (p0: String ?) setImpliesSubProjects [jvm] Content open override fun setImpliesSubProjects (p0: Boolean ) setIncludes [jvm] Content open override fun setIncludes (p0: MutableIterable < String >): SourceTask setMustRunAfter [jvm] Content open override fun setMustRunAfter (p0: MutableIterable <*>) setOnlyIf [jvm] Content open override fun setOnlyIf (p0: Closure< Any >) open override fun setOnlyIf (p0: Spec ) setProperty [jvm] Content open override fun setProperty (p0: String , p1: Any ) setShouldRunAfter [jvm] Content open override fun setShouldRunAfter (p0: MutableIterable <*>) setSource [jvm] Content open fun setSource (p0: Any ) open fun setSource (p0: FileTree) shouldRunAfter [jvm] Content open override fun shouldRunAfter (vararg p0: Any ): TaskDependency source [jvm] Content open fun source (vararg p0: Any ): SourceTask usesService [jvm] Content open override fun usesService (p0: Provider<out BuildService<*>>)","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/#properties","text":"Name Summary compilationUnit [jvm] lateinit var compilationUnit : SqlDelightCompilationUnitImpl migrationOutputExtension [jvm] @Input() lateinit var migrationOutputExtension : String outputDirectory [jvm] var outputDirectory : File ? = null pluginVersion [jvm] @Input() val pluginVersion : String projectName [jvm] @Input() val projectName : Property< String > properties [jvm] lateinit var properties : SqlDelightDatabasePropertiesImpl","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-migration-output-task/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateMigrationOutputTask GenerateMigrationOutputTask [jvm] Content fun GenerateMigrationOutputTask ()","title":"GenerateMigrationOutputTask   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-migration-output-task/#generatemigrationoutputtask","text":"[jvm] Content fun GenerateMigrationOutputTask ()","title":"GenerateMigrationOutputTask"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/compilation-unit/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / compilationUnit compilationUnit [jvm] Content lateinit var compilationUnit : SqlDelightCompilationUnitImpl","title":"compilationUnit   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/compilation-unit/#compilationunit","text":"[jvm] Content lateinit var compilationUnit : SqlDelightCompilationUnitImpl","title":"compilationUnit"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/generate-schema-file/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / generateSchemaFile generateSchemaFile [jvm] Content fun generateSchemaFile ()","title":"generateSchemaFile   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/generate-schema-file/#generateschemafile","text":"[jvm] Content fun generateSchemaFile ()","title":"generateSchemaFile"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/get-source/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / getSource getSource [jvm] Content @InputFiles() @SkipWhenEmpty() @PathSensitive(value = PathSensitivity.RELATIVE) open override fun getSource (): FileTree","title":"getSource   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/get-source/#getsource","text":"[jvm] Content @InputFiles() @SkipWhenEmpty() @PathSensitive(value = PathSensitivity.RELATIVE) open override fun getSource (): FileTree","title":"getSource"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/migration-output-extension/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / migrationOutputExtension migrationOutputExtension [jvm] Content @Input() lateinit var migrationOutputExtension : String","title":"migrationOutputExtension   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/migration-output-extension/#migrationoutputextension","text":"[jvm] Content @Input() lateinit var migrationOutputExtension : String","title":"migrationOutputExtension"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/output-directory/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / outputDirectory outputDirectory [jvm] Content var outputDirectory : File ? = null","title":"outputDirectory   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/output-directory/#outputdirectory","text":"[jvm] Content var outputDirectory : File ? = null","title":"outputDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/plugin-version/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / pluginVersion pluginVersion [jvm] Content @Input() val pluginVersion : String","title":"pluginVersion   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/plugin-version/#pluginversion","text":"[jvm] Content @Input() val pluginVersion : String","title":"pluginVersion"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/project-name/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / projectName projectName [jvm] Content @Input() val projectName : Property< String >","title":"projectName   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/project-name/#projectname","text":"[jvm] Content @Input() val projectName : Property< String >","title":"projectName"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/properties/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / properties properties [jvm] Content lateinit var properties : SqlDelightDatabasePropertiesImpl","title":"properties   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/properties/#properties","text":"[jvm] Content lateinit var properties : SqlDelightDatabasePropertiesImpl","title":"properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-migration/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateMigration GenerateMigration [jvm] abstract class GenerateMigration : WorkAction< GenerateMigrationOutputTask.GenerateSchemaWorkParameters > Functions Name Summary execute [jvm] Content open override fun execute () getParameters [jvm] Content @Inject() abstract fun getParameters (): GenerateMigrationOutputTask.GenerateSchemaWorkParameters","title":"GenerateMigration   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-migration/#generatemigration","text":"[jvm] abstract class GenerateMigration : WorkAction< GenerateMigrationOutputTask.GenerateSchemaWorkParameters >","title":"GenerateMigration"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-migration/#functions","text":"Name Summary execute [jvm] Content open override fun execute () getParameters [jvm] Content @Inject() abstract fun getParameters (): GenerateMigrationOutputTask.GenerateSchemaWorkParameters","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-migration/-generate-migration/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateMigration / GenerateMigration GenerateMigration [jvm] Content fun GenerateMigration ()","title":"GenerateMigration   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-migration/-generate-migration/#generatemigration","text":"[jvm] Content fun GenerateMigration ()","title":"GenerateMigration"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-migration/execute/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateMigration / execute execute [jvm] Content open override fun execute ()","title":"execute   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-migration/execute/#execute","text":"[jvm] Content open override fun execute ()","title":"execute"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateSchemaWorkParameters GenerateSchemaWorkParameters [jvm] interface GenerateSchemaWorkParameters : WorkParameters Properties Name Summary compilationUnit [jvm] abstract val compilationUnit : Property migrationExtension [jvm] abstract val migrationExtension : Property< String > moduleName [jvm] abstract val moduleName : Property< String > outputDirectory [jvm] abstract val outputDirectory : DirectoryProperty properties [jvm] abstract val properties : Property","title":"GenerateSchemaWorkParameters   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/#generateschemaworkparameters","text":"[jvm] interface GenerateSchemaWorkParameters : WorkParameters","title":"GenerateSchemaWorkParameters"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/#properties","text":"Name Summary compilationUnit [jvm] abstract val compilationUnit : Property migrationExtension [jvm] abstract val migrationExtension : Property< String > moduleName [jvm] abstract val moduleName : Property< String > outputDirectory [jvm] abstract val outputDirectory : DirectoryProperty properties [jvm] abstract val properties : Property","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/compilation-unit/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateSchemaWorkParameters / compilationUnit compilationUnit [jvm] Content abstract val compilationUnit : Property","title":"compilationUnit   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/compilation-unit/#compilationunit","text":"[jvm] Content abstract val compilationUnit : Property","title":"compilationUnit"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/migration-extension/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateSchemaWorkParameters / migrationExtension migrationExtension [jvm] Content abstract val migrationExtension : Property< String >","title":"migrationExtension   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/migration-extension/#migrationextension","text":"[jvm] Content abstract val migrationExtension : Property< String >","title":"migrationExtension"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/module-name/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateSchemaWorkParameters / moduleName moduleName [jvm] Content abstract val moduleName : Property< String >","title":"moduleName   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/module-name/#modulename","text":"[jvm] Content abstract val moduleName : Property< String >","title":"moduleName"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/output-directory/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateSchemaWorkParameters / outputDirectory outputDirectory [jvm] Content abstract val outputDirectory : DirectoryProperty","title":"outputDirectory   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/output-directory/#outputdirectory","text":"[jvm] Content abstract val outputDirectory : DirectoryProperty","title":"outputDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/properties/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateSchemaWorkParameters / properties properties [jvm] Content abstract val properties : Property","title":"properties   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/properties/#properties","text":"[jvm] Content abstract val properties : Property","title":"properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask GenerateSchemaTask [jvm] @CacheableTask() abstract class GenerateSchemaTask : SqlDelightWorkerTask Types Name Summary GenerateSchema [jvm] Content abstract class GenerateSchema : WorkAction< GenerateSchemaTask.GenerateSchemaWorkParameters > GenerateSchemaWorkParameters [jvm] Content interface GenerateSchemaWorkParameters : WorkParameters Functions Name Summary appendParallelSafeAction [jvm] Content open override fun appendParallelSafeAction (p0: Action ) compareTo [jvm] Content open operator override fun compareTo (other: Task): Int configure [jvm] Content open override fun configure (p0: Closure< Any >): Task conventionMapping [jvm] Content open fun conventionMapping (p0: String , p1: Closure< Any >): Task open fun conventionMapping (p0: String , p1: Callable <*>): Task dependsOn [jvm] Content open override fun dependsOn (vararg p0: Any ): Task disableClassLoaderIsolation [jvm] Content fun disableClassLoaderIsolation () More info Makes the task use WorkerExecutor.noIsolation instead of WorkerExecutor.classLoaderIsolation doFirst [jvm] Content open override fun doFirst (p0: Closure< Any >): Task open override fun doFirst (p0: Action ): Task open override fun doFirst (p0: String , p1: Action ): Task doLast [jvm] Content open override fun doLast (p0: Closure< Any >): Task open override fun doLast (p0: Action ): Task open override fun doLast (p0: String , p1: Action ): Task exclude [jvm] Content open override fun exclude (p0: Closure< Any >): SourceTask open override fun exclude (vararg p0: String ): SourceTask open override fun exclude (p0: MutableIterable < String >): SourceTask open override fun exclude (p0: Spec ): SourceTask finalizedBy [jvm] Content open override fun finalizedBy (vararg p0: Any ): Task generateSchemaFile [jvm] Content fun generateSchemaFile () getActions [jvm] Content open override fun getActions (): MutableList > getAnt [jvm] Content open override fun getAnt (): AntBuilder getAsDynamicObject [jvm] Content @Internal() open override fun getAsDynamicObject (): DynamicObject getConvention [jvm] Content @Internal() ~~open~~ ~~override~~ ~~fun~~ ~~getConvention~~ ~~(~~~~)~~~~:~~ Convention getConventionMapping [jvm] Content @Internal() open override fun getConventionMapping (): ConventionMapping getDependsOn [jvm] Content open override fun getDependsOn (): MutableSet < Any > getDescription [jvm] Content open override fun getDescription (): String ? getDestroyables [jvm] Content open override fun getDestroyables (): TaskDestroyables getDidWork [jvm] Content open override fun getDidWork (): Boolean getEnabled [jvm] Content open override fun getEnabled (): Boolean getExcludes [jvm] Content @Internal() open override fun getExcludes (): MutableSet < String > getExtensions [jvm] Content open override fun getExtensions (): ExtensionContainer getFinalizedBy [jvm] Content open override fun getFinalizedBy (): TaskDependency getGroup [jvm] Content open override fun getGroup (): String ? getIdentityPath [jvm] Content open override fun getIdentityPath (): Path getImpliesSubProjects [jvm] Content open override fun getImpliesSubProjects (): Boolean getIncludes [jvm] Content @Internal() open override fun getIncludes (): MutableSet < String > getInputs [jvm] Content open override fun getInputs (): TaskInputsInternal getLocalState [jvm] Content open override fun getLocalState (): TaskLocalState getLogger [jvm] Content open override fun getLogger (): Logger getLogging [jvm] Content open override fun getLogging (): LoggingManager getMustRunAfter [jvm] Content open override fun getMustRunAfter (): TaskDependency getName [jvm] Content open override fun getName (): String getOnlyIf [jvm] Content open override fun getOnlyIf (): Spec getOutputs [jvm] Content open override fun getOutputs (): TaskOutputsInternal getPath [jvm] Content open override fun getPath (): String getPatternSetFactory [jvm] Content @Inject() open fun getPatternSetFactory (): Factory getProject [jvm] Content open override fun getProject (): Project getRequiredServices [jvm] Content open override fun getRequiredServices (): MutableSet <Provider<out BuildService<*>>> getServices [jvm] Content @Internal() open fun getServices (): ServiceRegistry getSharedResources [jvm] Content open override fun getSharedResources (): MutableList getShouldRunAfter [jvm] Content open override fun getShouldRunAfter (): TaskDependency getSource [jvm] Content @InputFiles() @SkipWhenEmpty() @PathSensitive(value = PathSensitivity.RELATIVE) open override fun getSource (): FileTree getStandardOutputCapture [jvm] Content open override fun getStandardOutputCapture (): StandardOutputCapture getState [jvm] Content open override fun getState (): TaskStateInternal getTaskActions [jvm] Content open override fun getTaskActions (): MutableList getTaskDependencies [jvm] Content open override fun getTaskDependencies (): TaskDependencyInternal getTaskIdentity [jvm] Content open override fun getTaskIdentity (): TaskIdentity<*> getTemporaryDir [jvm] Content open override fun getTemporaryDir (): File getTemporaryDirFactory [jvm] Content open override fun getTemporaryDirFactory (): Factory< File > getTimeout [jvm] Content open override fun getTimeout (): Property< Duration > hasProperty [jvm] Content open override fun hasProperty (p0: String ): Boolean hasTaskActions [jvm] Content open override fun hasTaskActions (): Boolean include [jvm] Content open override fun include (p0: Closure< Any >): SourceTask open override fun include (vararg p0: String ): SourceTask open override fun include (p0: MutableIterable < String >): SourceTask open override fun include (p0: Spec ): SourceTask isEnabled [jvm] Content @Internal() open fun isEnabled (): Boolean isHasCustomActions [jvm] Content open override fun isHasCustomActions (): Boolean mustRunAfter [jvm] Content open override fun mustRunAfter (vararg p0: Any ): Task onlyIf [jvm] Content open override fun onlyIf (p0: Closure< Any >) open override fun onlyIf (p0: Spec ) prependParallelSafeAction [jvm] Content open override fun prependParallelSafeAction (p0: Action ) property [jvm] Content open override fun property (p0: String ): Any ? setActions [jvm] Content open override fun setActions (p0: MutableList >) setDependsOn [jvm] Content open override fun setDependsOn (p0: MutableIterable <*>) setDescription [jvm] Content open override fun setDescription (p0: String ?) setDidWork [jvm] Content open override fun setDidWork (p0: Boolean ) setEnabled [jvm] Content open override fun setEnabled (p0: Boolean ) setExcludes [jvm] Content open override fun setExcludes (p0: MutableIterable < String >): SourceTask setFinalizedBy [jvm] Content open override fun setFinalizedBy (p0: MutableIterable <*>) setGroup [jvm] Content open override fun setGroup (p0: String ?) setImpliesSubProjects [jvm] Content open override fun setImpliesSubProjects (p0: Boolean ) setIncludes [jvm] Content open override fun setIncludes (p0: MutableIterable < String >): SourceTask setMustRunAfter [jvm] Content open override fun setMustRunAfter (p0: MutableIterable <*>) setOnlyIf [jvm] Content open override fun setOnlyIf (p0: Closure< Any >) open override fun setOnlyIf (p0: Spec ) setProperty [jvm] Content open override fun setProperty (p0: String , p1: Any ) setShouldRunAfter [jvm] Content open override fun setShouldRunAfter (p0: MutableIterable <*>) setSource [jvm] Content open fun setSource (p0: Any ) open fun setSource (p0: FileTree) shouldRunAfter [jvm] Content open override fun shouldRunAfter (vararg p0: Any ): TaskDependency source [jvm] Content open fun source (vararg p0: Any ): SourceTask usesService [jvm] Content open override fun usesService (p0: Provider<out BuildService<*>>) Properties Name Summary compilationUnit [jvm] lateinit var compilationUnit : SqlDelightCompilationUnitImpl outputDirectory [jvm] var outputDirectory : File ? = null pluginVersion [jvm] @Input() val pluginVersion : String projectName [jvm] @Input() val projectName : Property< String > properties [jvm] lateinit var properties : SqlDelightDatabasePropertiesImpl verifyMigrations [jvm] @Input() var verifyMigrations : Boolean = false","title":"GenerateSchemaTask   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/#generateschematask","text":"[jvm] @CacheableTask() abstract class GenerateSchemaTask : SqlDelightWorkerTask","title":"GenerateSchemaTask"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/#types","text":"Name Summary GenerateSchema [jvm] Content abstract class GenerateSchema : WorkAction< GenerateSchemaTask.GenerateSchemaWorkParameters > GenerateSchemaWorkParameters [jvm] Content interface GenerateSchemaWorkParameters : WorkParameters","title":"Types"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/#functions","text":"Name Summary appendParallelSafeAction [jvm] Content open override fun appendParallelSafeAction (p0: Action ) compareTo [jvm] Content open operator override fun compareTo (other: Task): Int configure [jvm] Content open override fun configure (p0: Closure< Any >): Task conventionMapping [jvm] Content open fun conventionMapping (p0: String , p1: Closure< Any >): Task open fun conventionMapping (p0: String , p1: Callable <*>): Task dependsOn [jvm] Content open override fun dependsOn (vararg p0: Any ): Task disableClassLoaderIsolation [jvm] Content fun disableClassLoaderIsolation () More info Makes the task use WorkerExecutor.noIsolation instead of WorkerExecutor.classLoaderIsolation doFirst [jvm] Content open override fun doFirst (p0: Closure< Any >): Task open override fun doFirst (p0: Action ): Task open override fun doFirst (p0: String , p1: Action ): Task doLast [jvm] Content open override fun doLast (p0: Closure< Any >): Task open override fun doLast (p0: Action ): Task open override fun doLast (p0: String , p1: Action ): Task exclude [jvm] Content open override fun exclude (p0: Closure< Any >): SourceTask open override fun exclude (vararg p0: String ): SourceTask open override fun exclude (p0: MutableIterable < String >): SourceTask open override fun exclude (p0: Spec ): SourceTask finalizedBy [jvm] Content open override fun finalizedBy (vararg p0: Any ): Task generateSchemaFile [jvm] Content fun generateSchemaFile () getActions [jvm] Content open override fun getActions (): MutableList > getAnt [jvm] Content open override fun getAnt (): AntBuilder getAsDynamicObject [jvm] Content @Internal() open override fun getAsDynamicObject (): DynamicObject getConvention [jvm] Content @Internal() ~~open~~ ~~override~~ ~~fun~~ ~~getConvention~~ ~~(~~~~)~~~~:~~ Convention getConventionMapping [jvm] Content @Internal() open override fun getConventionMapping (): ConventionMapping getDependsOn [jvm] Content open override fun getDependsOn (): MutableSet < Any > getDescription [jvm] Content open override fun getDescription (): String ? getDestroyables [jvm] Content open override fun getDestroyables (): TaskDestroyables getDidWork [jvm] Content open override fun getDidWork (): Boolean getEnabled [jvm] Content open override fun getEnabled (): Boolean getExcludes [jvm] Content @Internal() open override fun getExcludes (): MutableSet < String > getExtensions [jvm] Content open override fun getExtensions (): ExtensionContainer getFinalizedBy [jvm] Content open override fun getFinalizedBy (): TaskDependency getGroup [jvm] Content open override fun getGroup (): String ? getIdentityPath [jvm] Content open override fun getIdentityPath (): Path getImpliesSubProjects [jvm] Content open override fun getImpliesSubProjects (): Boolean getIncludes [jvm] Content @Internal() open override fun getIncludes (): MutableSet < String > getInputs [jvm] Content open override fun getInputs (): TaskInputsInternal getLocalState [jvm] Content open override fun getLocalState (): TaskLocalState getLogger [jvm] Content open override fun getLogger (): Logger getLogging [jvm] Content open override fun getLogging (): LoggingManager getMustRunAfter [jvm] Content open override fun getMustRunAfter (): TaskDependency getName [jvm] Content open override fun getName (): String getOnlyIf [jvm] Content open override fun getOnlyIf (): Spec getOutputs [jvm] Content open override fun getOutputs (): TaskOutputsInternal getPath [jvm] Content open override fun getPath (): String getPatternSetFactory [jvm] Content @Inject() open fun getPatternSetFactory (): Factory getProject [jvm] Content open override fun getProject (): Project getRequiredServices [jvm] Content open override fun getRequiredServices (): MutableSet <Provider<out BuildService<*>>> getServices [jvm] Content @Internal() open fun getServices (): ServiceRegistry getSharedResources [jvm] Content open override fun getSharedResources (): MutableList getShouldRunAfter [jvm] Content open override fun getShouldRunAfter (): TaskDependency getSource [jvm] Content @InputFiles() @SkipWhenEmpty() @PathSensitive(value = PathSensitivity.RELATIVE) open override fun getSource (): FileTree getStandardOutputCapture [jvm] Content open override fun getStandardOutputCapture (): StandardOutputCapture getState [jvm] Content open override fun getState (): TaskStateInternal getTaskActions [jvm] Content open override fun getTaskActions (): MutableList getTaskDependencies [jvm] Content open override fun getTaskDependencies (): TaskDependencyInternal getTaskIdentity [jvm] Content open override fun getTaskIdentity (): TaskIdentity<*> getTemporaryDir [jvm] Content open override fun getTemporaryDir (): File getTemporaryDirFactory [jvm] Content open override fun getTemporaryDirFactory (): Factory< File > getTimeout [jvm] Content open override fun getTimeout (): Property< Duration > hasProperty [jvm] Content open override fun hasProperty (p0: String ): Boolean hasTaskActions [jvm] Content open override fun hasTaskActions (): Boolean include [jvm] Content open override fun include (p0: Closure< Any >): SourceTask open override fun include (vararg p0: String ): SourceTask open override fun include (p0: MutableIterable < String >): SourceTask open override fun include (p0: Spec ): SourceTask isEnabled [jvm] Content @Internal() open fun isEnabled (): Boolean isHasCustomActions [jvm] Content open override fun isHasCustomActions (): Boolean mustRunAfter [jvm] Content open override fun mustRunAfter (vararg p0: Any ): Task onlyIf [jvm] Content open override fun onlyIf (p0: Closure< Any >) open override fun onlyIf (p0: Spec ) prependParallelSafeAction [jvm] Content open override fun prependParallelSafeAction (p0: Action ) property [jvm] Content open override fun property (p0: String ): Any ? setActions [jvm] Content open override fun setActions (p0: MutableList >) setDependsOn [jvm] Content open override fun setDependsOn (p0: MutableIterable <*>) setDescription [jvm] Content open override fun setDescription (p0: String ?) setDidWork [jvm] Content open override fun setDidWork (p0: Boolean ) setEnabled [jvm] Content open override fun setEnabled (p0: Boolean ) setExcludes [jvm] Content open override fun setExcludes (p0: MutableIterable < String >): SourceTask setFinalizedBy [jvm] Content open override fun setFinalizedBy (p0: MutableIterable <*>) setGroup [jvm] Content open override fun setGroup (p0: String ?) setImpliesSubProjects [jvm] Content open override fun setImpliesSubProjects (p0: Boolean ) setIncludes [jvm] Content open override fun setIncludes (p0: MutableIterable < String >): SourceTask setMustRunAfter [jvm] Content open override fun setMustRunAfter (p0: MutableIterable <*>) setOnlyIf [jvm] Content open override fun setOnlyIf (p0: Closure< Any >) open override fun setOnlyIf (p0: Spec ) setProperty [jvm] Content open override fun setProperty (p0: String , p1: Any ) setShouldRunAfter [jvm] Content open override fun setShouldRunAfter (p0: MutableIterable <*>) setSource [jvm] Content open fun setSource (p0: Any ) open fun setSource (p0: FileTree) shouldRunAfter [jvm] Content open override fun shouldRunAfter (vararg p0: Any ): TaskDependency source [jvm] Content open fun source (vararg p0: Any ): SourceTask usesService [jvm] Content open override fun usesService (p0: Provider<out BuildService<*>>)","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/#properties","text":"Name Summary compilationUnit [jvm] lateinit var compilationUnit : SqlDelightCompilationUnitImpl outputDirectory [jvm] var outputDirectory : File ? = null pluginVersion [jvm] @Input() val pluginVersion : String projectName [jvm] @Input() val projectName : Property< String > properties [jvm] lateinit var properties : SqlDelightDatabasePropertiesImpl verifyMigrations [jvm] @Input() var verifyMigrations : Boolean = false","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-task/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchemaTask GenerateSchemaTask [jvm] Content fun GenerateSchemaTask ()","title":"GenerateSchemaTask   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-task/#generateschematask","text":"[jvm] Content fun GenerateSchemaTask ()","title":"GenerateSchemaTask"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/compilation-unit/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / compilationUnit compilationUnit [jvm] Content lateinit var compilationUnit : SqlDelightCompilationUnitImpl","title":"compilationUnit   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/compilation-unit/#compilationunit","text":"[jvm] Content lateinit var compilationUnit : SqlDelightCompilationUnitImpl","title":"compilationUnit"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/generate-schema-file/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / generateSchemaFile generateSchemaFile [jvm] Content fun generateSchemaFile ()","title":"generateSchemaFile   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/generate-schema-file/#generateschemafile","text":"[jvm] Content fun generateSchemaFile ()","title":"generateSchemaFile"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/get-source/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / getSource getSource [jvm] Content @InputFiles() @SkipWhenEmpty() @PathSensitive(value = PathSensitivity.RELATIVE) open override fun getSource (): FileTree","title":"getSource   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/get-source/#getsource","text":"[jvm] Content @InputFiles() @SkipWhenEmpty() @PathSensitive(value = PathSensitivity.RELATIVE) open override fun getSource (): FileTree","title":"getSource"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/output-directory/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / outputDirectory outputDirectory [jvm] Content var outputDirectory : File ? = null","title":"outputDirectory   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/output-directory/#outputdirectory","text":"[jvm] Content var outputDirectory : File ? = null","title":"outputDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/plugin-version/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / pluginVersion pluginVersion [jvm] Content @Input() val pluginVersion : String","title":"pluginVersion   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/plugin-version/#pluginversion","text":"[jvm] Content @Input() val pluginVersion : String","title":"pluginVersion"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/project-name/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / projectName projectName [jvm] Content @Input() val projectName : Property< String >","title":"projectName   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/project-name/#projectname","text":"[jvm] Content @Input() val projectName : Property< String >","title":"projectName"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/properties/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / properties properties [jvm] Content lateinit var properties : SqlDelightDatabasePropertiesImpl","title":"properties   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/properties/#properties","text":"[jvm] Content lateinit var properties : SqlDelightDatabasePropertiesImpl","title":"properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/verify-migrations/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / verifyMigrations verifyMigrations [jvm] Content @Input() var verifyMigrations : Boolean = false","title":"verifyMigrations   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/verify-migrations/#verifymigrations","text":"[jvm] Content @Input() var verifyMigrations : Boolean = false","title":"verifyMigrations"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchema GenerateSchema [jvm] abstract class GenerateSchema : WorkAction< GenerateSchemaTask.GenerateSchemaWorkParameters > Functions Name Summary execute [jvm] Content open override fun execute () getParameters [jvm] Content @Inject() abstract fun getParameters (): GenerateSchemaTask.GenerateSchemaWorkParameters","title":"GenerateSchema   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema/#generateschema","text":"[jvm] abstract class GenerateSchema : WorkAction< GenerateSchemaTask.GenerateSchemaWorkParameters >","title":"GenerateSchema"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema/#functions","text":"Name Summary execute [jvm] Content open override fun execute () getParameters [jvm] Content @Inject() abstract fun getParameters (): GenerateSchemaTask.GenerateSchemaWorkParameters","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema/-generate-schema/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchema / GenerateSchema GenerateSchema [jvm] Content fun GenerateSchema ()","title":"GenerateSchema   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema/-generate-schema/#generateschema","text":"[jvm] Content fun GenerateSchema ()","title":"GenerateSchema"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema/execute/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchema / execute execute [jvm] Content open override fun execute ()","title":"execute   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema/execute/#execute","text":"[jvm] Content open override fun execute ()","title":"execute"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchemaWorkParameters GenerateSchemaWorkParameters [jvm] interface GenerateSchemaWorkParameters : WorkParameters Properties Name Summary compilationUnit [jvm] abstract val compilationUnit : Property moduleName [jvm] abstract val moduleName : Property< String > outputDirectory [jvm] abstract val outputDirectory : DirectoryProperty properties [jvm] abstract val properties : Property verifyMigrations [jvm] abstract val verifyMigrations : Property< Boolean >","title":"GenerateSchemaWorkParameters   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/#generateschemaworkparameters","text":"[jvm] interface GenerateSchemaWorkParameters : WorkParameters","title":"GenerateSchemaWorkParameters"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/#properties","text":"Name Summary compilationUnit [jvm] abstract val compilationUnit : Property moduleName [jvm] abstract val moduleName : Property< String > outputDirectory [jvm] abstract val outputDirectory : DirectoryProperty properties [jvm] abstract val properties : Property verifyMigrations [jvm] abstract val verifyMigrations : Property< Boolean >","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/compilation-unit/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchemaWorkParameters / compilationUnit compilationUnit [jvm] Content abstract val compilationUnit : Property","title":"compilationUnit   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/compilation-unit/#compilationunit","text":"[jvm] Content abstract val compilationUnit : Property","title":"compilationUnit"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/module-name/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchemaWorkParameters / moduleName moduleName [jvm] Content abstract val moduleName : Property< String >","title":"moduleName   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/module-name/#modulename","text":"[jvm] Content abstract val moduleName : Property< String >","title":"moduleName"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/output-directory/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchemaWorkParameters / outputDirectory outputDirectory [jvm] Content abstract val outputDirectory : DirectoryProperty","title":"outputDirectory   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/output-directory/#outputdirectory","text":"[jvm] Content abstract val outputDirectory : DirectoryProperty","title":"outputDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/properties/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchemaWorkParameters / properties properties [jvm] Content abstract val properties : Property","title":"properties   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/properties/#properties","text":"[jvm] Content abstract val properties : Property","title":"properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/verify-migrations/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchemaWorkParameters / verifyMigrations verifyMigrations [jvm] Content abstract val verifyMigrations : Property< Boolean >","title":"verifyMigrations   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/verify-migrations/#verifymigrations","text":"[jvm] Content abstract val verifyMigrations : Property< Boolean >","title":"verifyMigrations"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-compilation-unit-impl/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightCompilationUnitImpl SqlDelightCompilationUnitImpl [jvm] data class SqlDelightCompilationUnitImpl ( name : String , sourceFolders : List < SqlDelightSourceFolderImpl >, outputDirectoryFile : File ) : SqlDelightCompilationUnit Properties Name Summary name [jvm] @Input() open override val name : String outputDirectoryFile [jvm] @Internal() open override val outputDirectoryFile : File sourceFolders [jvm] open override val sourceFolders : List < SqlDelightSourceFolderImpl >","title":"SqlDelightCompilationUnitImpl   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-compilation-unit-impl/#sqldelightcompilationunitimpl","text":"[jvm] data class SqlDelightCompilationUnitImpl ( name : String , sourceFolders : List < SqlDelightSourceFolderImpl >, outputDirectoryFile : File ) : SqlDelightCompilationUnit","title":"SqlDelightCompilationUnitImpl"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-compilation-unit-impl/#properties","text":"Name Summary name [jvm] @Input() open override val name : String outputDirectoryFile [jvm] @Internal() open override val outputDirectoryFile : File sourceFolders [jvm] open override val sourceFolders : List < SqlDelightSourceFolderImpl >","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-compilation-unit-impl/-sql-delight-compilation-unit-impl/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightCompilationUnitImpl / SqlDelightCompilationUnitImpl SqlDelightCompilationUnitImpl [jvm] Content fun SqlDelightCompilationUnitImpl (name: String , sourceFolders: List < SqlDelightSourceFolderImpl >, outputDirectoryFile: File )","title":"SqlDelightCompilationUnitImpl   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-compilation-unit-impl/-sql-delight-compilation-unit-impl/#sqldelightcompilationunitimpl","text":"[jvm] Content fun SqlDelightCompilationUnitImpl (name: String , sourceFolders: List < SqlDelightSourceFolderImpl >, outputDirectoryFile: File )","title":"SqlDelightCompilationUnitImpl"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-compilation-unit-impl/name/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightCompilationUnitImpl / name name [jvm] Content @Input() open override val name : String","title":"name   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-compilation-unit-impl/name/#name","text":"[jvm] Content @Input() open override val name : String","title":"name"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-compilation-unit-impl/output-directory-file/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightCompilationUnitImpl / outputDirectoryFile outputDirectoryFile [jvm] Content @Internal() open override val outputDirectoryFile : File","title":"outputDirectoryFile   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-compilation-unit-impl/output-directory-file/#outputdirectoryfile","text":"[jvm] Content @Internal() open override val outputDirectoryFile : File","title":"outputDirectoryFile"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-compilation-unit-impl/source-folders/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightCompilationUnitImpl / sourceFolders sourceFolders [jvm] Content open override val sourceFolders : List < SqlDelightSourceFolderImpl >","title":"sourceFolders   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-compilation-unit-impl/source-folders/#sourcefolders","text":"[jvm] Content open override val sourceFolders : List < SqlDelightSourceFolderImpl >","title":"sourceFolders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase SqlDelightDatabase [jvm] class SqlDelightDatabase ( project : Project, name : String , packageName : String ?, schemaOutputDirectory : File ?, sourceFolders : Collection < String >?, dialect : String ?, deriveSchemaFromMigrations : Boolean , verifyMigrations : Boolean , migrationOutputDirectory : File ?, migrationOutputFileFormat : String ) Functions Name Summary dependency [jvm] Content fun dependency (dependencyProject: Project) methodMissing [jvm] Content fun methodMissing (name: String , args: Any ): Any Properties Name Summary deriveSchemaFromMigrations [jvm] var deriveSchemaFromMigrations : Boolean = false dialect [jvm] var dialect : String ? = null migrationOutputDirectory [jvm] var migrationOutputDirectory : File ? = null migrationOutputFileFormat [jvm] var migrationOutputFileFormat : String name [jvm] var name : String packageName [jvm] var packageName : String ? = null project [jvm] val project : Project schemaOutputDirectory [jvm] var schemaOutputDirectory : File ? = null sourceFolders [jvm] var sourceFolders : Collection < String >? = null verifyMigrations [jvm] var verifyMigrations : Boolean = false","title":"SqlDelightDatabase   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/#sqldelightdatabase","text":"[jvm] class SqlDelightDatabase ( project : Project, name : String , packageName : String ?, schemaOutputDirectory : File ?, sourceFolders : Collection < String >?, dialect : String ?, deriveSchemaFromMigrations : Boolean , verifyMigrations : Boolean , migrationOutputDirectory : File ?, migrationOutputFileFormat : String )","title":"SqlDelightDatabase"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/#functions","text":"Name Summary dependency [jvm] Content fun dependency (dependencyProject: Project) methodMissing [jvm] Content fun methodMissing (name: String , args: Any ): Any","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/#properties","text":"Name Summary deriveSchemaFromMigrations [jvm] var deriveSchemaFromMigrations : Boolean = false dialect [jvm] var dialect : String ? = null migrationOutputDirectory [jvm] var migrationOutputDirectory : File ? = null migrationOutputFileFormat [jvm] var migrationOutputFileFormat : String name [jvm] var name : String packageName [jvm] var packageName : String ? = null project [jvm] val project : Project schemaOutputDirectory [jvm] var schemaOutputDirectory : File ? = null sourceFolders [jvm] var sourceFolders : Collection < String >? = null verifyMigrations [jvm] var verifyMigrations : Boolean = false","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/-sql-delight-database/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / SqlDelightDatabase SqlDelightDatabase [jvm] Content fun SqlDelightDatabase (project: Project, name: String , packageName: String ? = null, schemaOutputDirectory: File ? = null, sourceFolders: Collection < String >? = null, dialect: String ? = null, deriveSchemaFromMigrations: Boolean = false, verifyMigrations: Boolean = false, migrationOutputDirectory: File ? = null, migrationOutputFileFormat: String = \".sql\")","title":"SqlDelightDatabase   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/-sql-delight-database/#sqldelightdatabase","text":"[jvm] Content fun SqlDelightDatabase (project: Project, name: String , packageName: String ? = null, schemaOutputDirectory: File ? = null, sourceFolders: Collection < String >? = null, dialect: String ? = null, deriveSchemaFromMigrations: Boolean = false, verifyMigrations: Boolean = false, migrationOutputDirectory: File ? = null, migrationOutputFileFormat: String = \".sql\")","title":"SqlDelightDatabase"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/dependency/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / dependency dependency [jvm] Content fun dependency (dependencyProject: Project)","title":"dependency   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/dependency/#dependency","text":"[jvm] Content fun dependency (dependencyProject: Project)","title":"dependency"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/derive-schema-from-migrations/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / deriveSchemaFromMigrations deriveSchemaFromMigrations [jvm] Content var deriveSchemaFromMigrations : Boolean = false","title":"deriveSchemaFromMigrations   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/derive-schema-from-migrations/#deriveschemafrommigrations","text":"[jvm] Content var deriveSchemaFromMigrations : Boolean = false","title":"deriveSchemaFromMigrations"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/dialect/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / dialect dialect [jvm] Content var dialect : String ? = null","title":"dialect   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/dialect/#dialect","text":"[jvm] Content var dialect : String ? = null","title":"dialect"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/method-missing/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / methodMissing methodMissing [jvm] Content fun methodMissing (name: String , args: Any ): Any","title":"methodMissing   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/method-missing/#methodmissing","text":"[jvm] Content fun methodMissing (name: String , args: Any ): Any","title":"methodMissing"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/migration-output-directory/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / migrationOutputDirectory migrationOutputDirectory [jvm] Content var migrationOutputDirectory : File ? = null","title":"migrationOutputDirectory   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/migration-output-directory/#migrationoutputdirectory","text":"[jvm] Content var migrationOutputDirectory : File ? = null","title":"migrationOutputDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/migration-output-file-format/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / migrationOutputFileFormat migrationOutputFileFormat [jvm] Content var migrationOutputFileFormat : String","title":"migrationOutputFileFormat   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/migration-output-file-format/#migrationoutputfileformat","text":"[jvm] Content var migrationOutputFileFormat : String","title":"migrationOutputFileFormat"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/name/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / name name [jvm] Content var name : String","title":"name   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/name/#name","text":"[jvm] Content var name : String","title":"name"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/package-name/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / packageName packageName [jvm] Content var packageName : String ? = null","title":"packageName   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/package-name/#packagename","text":"[jvm] Content var packageName : String ? = null","title":"packageName"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/project/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / project project [jvm] Content val project : Project","title":"project   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/project/#project","text":"[jvm] Content val project : Project","title":"project"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/schema-output-directory/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / schemaOutputDirectory schemaOutputDirectory [jvm] Content var schemaOutputDirectory : File ? = null","title":"schemaOutputDirectory   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/schema-output-directory/#schemaoutputdirectory","text":"[jvm] Content var schemaOutputDirectory : File ? = null","title":"schemaOutputDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/source-folders/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / sourceFolders sourceFolders [jvm] Content var sourceFolders : Collection < String >? = null","title":"sourceFolders   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/source-folders/#sourcefolders","text":"[jvm] Content var sourceFolders : Collection < String >? = null","title":"sourceFolders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/verify-migrations/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / verifyMigrations verifyMigrations [jvm] Content var verifyMigrations : Boolean = false","title":"verifyMigrations   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/verify-migrations/#verifymigrations","text":"[jvm] Content var verifyMigrations : Boolean = false","title":"verifyMigrations"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-name-impl/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabaseNameImpl SqlDelightDatabaseNameImpl [jvm] data class SqlDelightDatabaseNameImpl ( packageName : String , className : String ) : SqlDelightDatabaseName Properties Name Summary className [jvm] @Input() open override val className : String packageName [jvm] @Input() open override val packageName : String","title":"SqlDelightDatabaseNameImpl   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-name-impl/#sqldelightdatabasenameimpl","text":"[jvm] data class SqlDelightDatabaseNameImpl ( packageName : String , className : String ) : SqlDelightDatabaseName","title":"SqlDelightDatabaseNameImpl"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-name-impl/#properties","text":"Name Summary className [jvm] @Input() open override val className : String packageName [jvm] @Input() open override val packageName : String","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-name-impl/-sql-delight-database-name-impl/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabaseNameImpl / SqlDelightDatabaseNameImpl SqlDelightDatabaseNameImpl [jvm] Content fun SqlDelightDatabaseNameImpl (packageName: String , className: String )","title":"SqlDelightDatabaseNameImpl   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-name-impl/-sql-delight-database-name-impl/#sqldelightdatabasenameimpl","text":"[jvm] Content fun SqlDelightDatabaseNameImpl (packageName: String , className: String )","title":"SqlDelightDatabaseNameImpl"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-name-impl/class-name/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabaseNameImpl / className className [jvm] Content @Input() open override val className : String","title":"className   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-name-impl/class-name/#classname","text":"[jvm] Content @Input() open override val className : String","title":"className"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-name-impl/package-name/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabaseNameImpl / packageName packageName [jvm] Content @Input() open override val packageName : String","title":"packageName   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-name-impl/package-name/#packagename","text":"[jvm] Content @Input() open override val packageName : String","title":"packageName"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabasePropertiesImpl SqlDelightDatabasePropertiesImpl [jvm] data class SqlDelightDatabasePropertiesImpl ( packageName : String , compilationUnits : List < SqlDelightCompilationUnitImpl >, className : String , dependencies : List < SqlDelightDatabaseNameImpl >, dialectPresetName : String , deriveSchemaFromMigrations : Boolean , rootDirectory : File ) : SqlDelightDatabaseProperties Properties Name Summary className [jvm] @Input() open override val className : String compilationUnits [jvm] open override val compilationUnits : List < SqlDelightCompilationUnitImpl > dependencies [jvm] open override val dependencies : List < SqlDelightDatabaseNameImpl > deriveSchemaFromMigrations [jvm] @Input() open override val deriveSchemaFromMigrations : Boolean = false dialectPresetName [jvm] @Input() open override val dialectPresetName : String packageName [jvm] @Input() open override val packageName : String rootDirectory [jvm] @Internal() open override val rootDirectory : File","title":"SqlDelightDatabasePropertiesImpl   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/#sqldelightdatabasepropertiesimpl","text":"[jvm] data class SqlDelightDatabasePropertiesImpl ( packageName : String , compilationUnits : List < SqlDelightCompilationUnitImpl >, className : String , dependencies : List < SqlDelightDatabaseNameImpl >, dialectPresetName : String , deriveSchemaFromMigrations : Boolean , rootDirectory : File ) : SqlDelightDatabaseProperties","title":"SqlDelightDatabasePropertiesImpl"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/#properties","text":"Name Summary className [jvm] @Input() open override val className : String compilationUnits [jvm] open override val compilationUnits : List < SqlDelightCompilationUnitImpl > dependencies [jvm] open override val dependencies : List < SqlDelightDatabaseNameImpl > deriveSchemaFromMigrations [jvm] @Input() open override val deriveSchemaFromMigrations : Boolean = false dialectPresetName [jvm] @Input() open override val dialectPresetName : String packageName [jvm] @Input() open override val packageName : String rootDirectory [jvm] @Internal() open override val rootDirectory : File","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/-sql-delight-database-properties-impl/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabasePropertiesImpl / SqlDelightDatabasePropertiesImpl SqlDelightDatabasePropertiesImpl [jvm] Content fun SqlDelightDatabasePropertiesImpl (packageName: String , compilationUnits: List < SqlDelightCompilationUnitImpl >, className: String , dependencies: List < SqlDelightDatabaseNameImpl >, dialectPresetName: String = DialectPreset.SQLITE_3_18.name, deriveSchemaFromMigrations: Boolean = false, rootDirectory: File )","title":"SqlDelightDatabasePropertiesImpl   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/-sql-delight-database-properties-impl/#sqldelightdatabasepropertiesimpl","text":"[jvm] Content fun SqlDelightDatabasePropertiesImpl (packageName: String , compilationUnits: List < SqlDelightCompilationUnitImpl >, className: String , dependencies: List < SqlDelightDatabaseNameImpl >, dialectPresetName: String = DialectPreset.SQLITE_3_18.name, deriveSchemaFromMigrations: Boolean = false, rootDirectory: File )","title":"SqlDelightDatabasePropertiesImpl"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/class-name/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabasePropertiesImpl / className className [jvm] Content @Input() open override val className : String","title":"className   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/class-name/#classname","text":"[jvm] Content @Input() open override val className : String","title":"className"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/compilation-units/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabasePropertiesImpl / compilationUnits compilationUnits [jvm] Content open override val compilationUnits : List < SqlDelightCompilationUnitImpl >","title":"compilationUnits   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/compilation-units/#compilationunits","text":"[jvm] Content open override val compilationUnits : List < SqlDelightCompilationUnitImpl >","title":"compilationUnits"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/dependencies/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabasePropertiesImpl / dependencies dependencies [jvm] Content open override val dependencies : List < SqlDelightDatabaseNameImpl >","title":"dependencies   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/dependencies/#dependencies","text":"[jvm] Content open override val dependencies : List < SqlDelightDatabaseNameImpl >","title":"dependencies"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/derive-schema-from-migrations/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabasePropertiesImpl / deriveSchemaFromMigrations deriveSchemaFromMigrations [jvm] Content @Input() open override val deriveSchemaFromMigrations : Boolean = false","title":"deriveSchemaFromMigrations   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/derive-schema-from-migrations/#deriveschemafrommigrations","text":"[jvm] Content @Input() open override val deriveSchemaFromMigrations : Boolean = false","title":"deriveSchemaFromMigrations"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/dialect-preset-name/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabasePropertiesImpl / dialectPresetName dialectPresetName [jvm] Content @Input() open override val dialectPresetName : String","title":"dialectPresetName   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/dialect-preset-name/#dialectpresetname","text":"[jvm] Content @Input() open override val dialectPresetName : String","title":"dialectPresetName"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/package-name/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabasePropertiesImpl / packageName packageName [jvm] Content @Input() open override val packageName : String","title":"packageName   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/package-name/#packagename","text":"[jvm] Content @Input() open override val packageName : String","title":"packageName"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/root-directory/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabasePropertiesImpl / rootDirectory rootDirectory [jvm] Content @Internal() open override val rootDirectory : File","title":"rootDirectory   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database-properties-impl/root-directory/#rootdirectory","text":"[jvm] Content @Internal() open override val rootDirectory : File","title":"rootDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightExtension SqlDelightExtension [jvm] open class SqlDelightExtension Functions Name Summary database [jvm] Content fun database (name: String , config: SqlDelightDatabase .() -> Unit ) More info Supports configuration in Kotlin script build files. methodMissing [jvm] Content fun methodMissing (name: String , args: Any ): Any Properties Name Summary linkSqlite [jvm] var linkSqlite : Boolean = true","title":"SqlDelightExtension   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/#sqldelightextension","text":"[jvm] open class SqlDelightExtension","title":"SqlDelightExtension"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/#functions","text":"Name Summary database [jvm] Content fun database (name: String , config: SqlDelightDatabase .() -> Unit ) More info Supports configuration in Kotlin script build files. methodMissing [jvm] Content fun methodMissing (name: String , args: Any ): Any","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/#properties","text":"Name Summary linkSqlite [jvm] var linkSqlite : Boolean = true","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/-sql-delight-extension/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightExtension / SqlDelightExtension SqlDelightExtension [jvm] Content fun SqlDelightExtension ()","title":"SqlDelightExtension   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/-sql-delight-extension/#sqldelightextension","text":"[jvm] Content fun SqlDelightExtension ()","title":"SqlDelightExtension"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/database/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightExtension / database database [jvm] Content fun database (name: String , config: SqlDelightDatabase .() -> Unit ) More info Supports configuration in Kotlin script build files. sqldelight { database(\"MyDatabase\") { packageName = \"com.example\" sourceSet = files(\"src/main/sqldelight\") } }","title":"database   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/database/#database","text":"[jvm] Content fun database (name: String , config: SqlDelightDatabase .() -> Unit ) More info Supports configuration in Kotlin script build files. sqldelight { database(\"MyDatabase\") { packageName = \"com.example\" sourceSet = files(\"src/main/sqldelight\") } }","title":"database"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/link-sqlite/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightExtension / linkSqlite linkSqlite [jvm] Content var linkSqlite : Boolean = true","title":"linkSqlite   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/link-sqlite/#linksqlite","text":"[jvm] Content var linkSqlite : Boolean = true","title":"linkSqlite"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/method-missing/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightExtension / methodMissing methodMissing [jvm] Content fun methodMissing (name: String , args: Any ): Any","title":"methodMissing   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/method-missing/#methodmissing","text":"[jvm] Content fun methodMissing (name: String , args: Any ): Any","title":"methodMissing"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightPlugin SqlDelightPlugin [jvm] abstract class SqlDelightPlugin : Plugin Types Name Summary PropertiesModelBuilder [jvm] Content class PropertiesModelBuilder ( properties : SqlDelightPropertiesFile) : ToolingModelBuilder Functions Name Summary apply [jvm] Content open override fun apply (project: Project) Properties Name Summary registry [jvm] abstract val registry : ToolingModelBuilderRegistry","title":"SqlDelightPlugin   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/#sqldelightplugin","text":"[jvm] abstract class SqlDelightPlugin : Plugin","title":"SqlDelightPlugin"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/#types","text":"Name Summary PropertiesModelBuilder [jvm] Content class PropertiesModelBuilder ( properties : SqlDelightPropertiesFile) : ToolingModelBuilder","title":"Types"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/#functions","text":"Name Summary apply [jvm] Content open override fun apply (project: Project)","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/#properties","text":"Name Summary registry [jvm] abstract val registry : ToolingModelBuilderRegistry","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/-sql-delight-plugin/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightPlugin / SqlDelightPlugin SqlDelightPlugin [jvm] Content fun SqlDelightPlugin ()","title":"SqlDelightPlugin   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/-sql-delight-plugin/#sqldelightplugin","text":"[jvm] Content fun SqlDelightPlugin ()","title":"SqlDelightPlugin"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/apply/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightPlugin / apply apply [jvm] Content open override fun apply (project: Project)","title":"apply   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/apply/#apply","text":"[jvm] Content open override fun apply (project: Project)","title":"apply"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/registry/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightPlugin / registry registry [jvm] Content abstract val registry : ToolingModelBuilderRegistry","title":"registry   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/registry/#registry","text":"[jvm] Content abstract val registry : ToolingModelBuilderRegistry","title":"registry"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/-properties-model-builder/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightPlugin / PropertiesModelBuilder PropertiesModelBuilder [jvm] class PropertiesModelBuilder ( properties : SqlDelightPropertiesFile) : ToolingModelBuilder Functions Name Summary buildAll [jvm] Content open override fun buildAll (modelName: String , project: Project): Any canBuild [jvm] Content open override fun canBuild (modelName: String ): Boolean","title":"PropertiesModelBuilder   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/-properties-model-builder/#propertiesmodelbuilder","text":"[jvm] class PropertiesModelBuilder ( properties : SqlDelightPropertiesFile) : ToolingModelBuilder","title":"PropertiesModelBuilder"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/-properties-model-builder/#functions","text":"Name Summary buildAll [jvm] Content open override fun buildAll (modelName: String , project: Project): Any canBuild [jvm] Content open override fun canBuild (modelName: String ): Boolean","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/-properties-model-builder/-properties-model-builder/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightPlugin / PropertiesModelBuilder / PropertiesModelBuilder PropertiesModelBuilder [jvm] Content fun PropertiesModelBuilder (properties: SqlDelightPropertiesFile)","title":"PropertiesModelBuilder   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/-properties-model-builder/-properties-model-builder/#propertiesmodelbuilder","text":"[jvm] Content fun PropertiesModelBuilder (properties: SqlDelightPropertiesFile)","title":"PropertiesModelBuilder"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/-properties-model-builder/build-all/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightPlugin / PropertiesModelBuilder / buildAll buildAll [jvm] Content open override fun buildAll (modelName: String , project: Project): Any","title":"buildAll   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/-properties-model-builder/build-all/#buildall","text":"[jvm] Content open override fun buildAll (modelName: String , project: Project): Any","title":"buildAll"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/-properties-model-builder/can-build/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightPlugin / PropertiesModelBuilder / canBuild canBuild [jvm] Content open override fun canBuild (modelName: String ): Boolean","title":"canBuild   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/-properties-model-builder/can-build/#canbuild","text":"[jvm] Content open override fun canBuild (modelName: String ): Boolean","title":"canBuild"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-properties-file-impl/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightPropertiesFileImpl SqlDelightPropertiesFileImpl [jvm] data class SqlDelightPropertiesFileImpl ( databases : List < SqlDelightDatabasePropertiesImpl >, minimumSupportedVersion : String , currentVersion : String ) : SqlDelightPropertiesFile Properties Name Summary currentVersion [jvm] open override val currentVersion : String databases [jvm] open override val databases : List < SqlDelightDatabasePropertiesImpl > minimumSupportedVersion [jvm] open override val minimumSupportedVersion : String","title":"SqlDelightPropertiesFileImpl   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-properties-file-impl/#sqldelightpropertiesfileimpl","text":"[jvm] data class SqlDelightPropertiesFileImpl ( databases : List < SqlDelightDatabasePropertiesImpl >, minimumSupportedVersion : String , currentVersion : String ) : SqlDelightPropertiesFile","title":"SqlDelightPropertiesFileImpl"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-properties-file-impl/#properties","text":"Name Summary currentVersion [jvm] open override val currentVersion : String databases [jvm] open override val databases : List < SqlDelightDatabasePropertiesImpl > minimumSupportedVersion [jvm] open override val minimumSupportedVersion : String","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-properties-file-impl/-sql-delight-properties-file-impl/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightPropertiesFileImpl / SqlDelightPropertiesFileImpl SqlDelightPropertiesFileImpl [jvm] Content fun SqlDelightPropertiesFileImpl (databases: List < SqlDelightDatabasePropertiesImpl >, minimumSupportedVersion: String , currentVersion: String )","title":"SqlDelightPropertiesFileImpl   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-properties-file-impl/-sql-delight-properties-file-impl/#sqldelightpropertiesfileimpl","text":"[jvm] Content fun SqlDelightPropertiesFileImpl (databases: List < SqlDelightDatabasePropertiesImpl >, minimumSupportedVersion: String , currentVersion: String )","title":"SqlDelightPropertiesFileImpl"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-properties-file-impl/current-version/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightPropertiesFileImpl / currentVersion currentVersion [jvm] Content open override val currentVersion : String","title":"currentVersion   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-properties-file-impl/current-version/#currentversion","text":"[jvm] Content open override val currentVersion : String","title":"currentVersion"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-properties-file-impl/databases/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightPropertiesFileImpl / databases databases [jvm] Content open override val databases : List < SqlDelightDatabasePropertiesImpl >","title":"databases   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-properties-file-impl/databases/#databases","text":"[jvm] Content open override val databases : List < SqlDelightDatabasePropertiesImpl >","title":"databases"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-properties-file-impl/minimum-supported-version/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightPropertiesFileImpl / minimumSupportedVersion minimumSupportedVersion [jvm] Content open override val minimumSupportedVersion : String","title":"minimumSupportedVersion   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-properties-file-impl/minimum-supported-version/#minimumsupportedversion","text":"[jvm] Content open override val minimumSupportedVersion : String","title":"minimumSupportedVersion"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-source-folder-impl/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightSourceFolderImpl SqlDelightSourceFolderImpl [jvm] data class SqlDelightSourceFolderImpl ( folder : File , dependency : Boolean ) : SqlDelightSourceFolder Properties Name Summary dependency [jvm] @Input() open override val dependency : Boolean = false folder [jvm] @Internal() open override val folder : File","title":"SqlDelightSourceFolderImpl   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-source-folder-impl/#sqldelightsourcefolderimpl","text":"[jvm] data class SqlDelightSourceFolderImpl ( folder : File , dependency : Boolean ) : SqlDelightSourceFolder","title":"SqlDelightSourceFolderImpl"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-source-folder-impl/#properties","text":"Name Summary dependency [jvm] @Input() open override val dependency : Boolean = false folder [jvm] @Internal() open override val folder : File","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-source-folder-impl/-sql-delight-source-folder-impl/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightSourceFolderImpl / SqlDelightSourceFolderImpl SqlDelightSourceFolderImpl [jvm] Content fun SqlDelightSourceFolderImpl (folder: File , dependency: Boolean = false)","title":"SqlDelightSourceFolderImpl   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-source-folder-impl/-sql-delight-source-folder-impl/#sqldelightsourcefolderimpl","text":"[jvm] Content fun SqlDelightSourceFolderImpl (folder: File , dependency: Boolean = false)","title":"SqlDelightSourceFolderImpl"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-source-folder-impl/dependency/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightSourceFolderImpl / dependency dependency [jvm] Content @Input() open override val dependency : Boolean = false","title":"dependency   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-source-folder-impl/dependency/#dependency","text":"[jvm] Content @Input() open override val dependency : Boolean = false","title":"dependency"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-source-folder-impl/folder/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightSourceFolderImpl / folder folder [jvm] Content @Internal() open override val folder : File","title":"folder   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-source-folder-impl/folder/#folder","text":"[jvm] Content @Internal() open override val folder : File","title":"folder"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask SqlDelightTask [jvm] @CacheableTask() abstract class SqlDelightTask : SqlDelightWorkerTask Types Name Summary GenerateInterfaces [jvm] Content abstract class GenerateInterfaces : WorkAction< SqlDelightTask.GenerateInterfacesWorkParameters > GenerateInterfacesWorkParameters [jvm] Content interface GenerateInterfacesWorkParameters : WorkParameters Functions Name Summary appendParallelSafeAction [jvm] Content open override fun appendParallelSafeAction (p0: Action ) compareTo [jvm] Content open operator override fun compareTo (other: Task): Int configure [jvm] Content open override fun configure (p0: Closure< Any >): Task conventionMapping [jvm] Content open fun conventionMapping (p0: String , p1: Closure< Any >): Task open fun conventionMapping (p0: String , p1: Callable <*>): Task dependsOn [jvm] Content open override fun dependsOn (vararg p0: Any ): Task disableClassLoaderIsolation [jvm] Content fun disableClassLoaderIsolation () More info Makes the task use WorkerExecutor.noIsolation instead of WorkerExecutor.classLoaderIsolation doFirst [jvm] Content open override fun doFirst (p0: Closure< Any >): Task open override fun doFirst (p0: Action ): Task open override fun doFirst (p0: String , p1: Action ): Task doLast [jvm] Content open override fun doLast (p0: Closure< Any >): Task open override fun doLast (p0: Action ): Task open override fun doLast (p0: String , p1: Action ): Task exclude [jvm] Content open override fun exclude (p0: Closure< Any >): SourceTask open override fun exclude (vararg p0: String ): SourceTask open override fun exclude (p0: MutableIterable < String >): SourceTask open override fun exclude (p0: Spec ): SourceTask finalizedBy [jvm] Content open override fun finalizedBy (vararg p0: Any ): Task generateSqlDelightFiles [jvm] Content fun generateSqlDelightFiles () getActions [jvm] Content open override fun getActions (): MutableList > getAnt [jvm] Content open override fun getAnt (): AntBuilder getAsDynamicObject [jvm] Content @Internal() open override fun getAsDynamicObject (): DynamicObject getConvention [jvm] Content @Internal() ~~open~~ ~~override~~ ~~fun~~ ~~getConvention~~ ~~(~~~~)~~~~:~~ Convention getConventionMapping [jvm] Content @Internal() open override fun getConventionMapping (): ConventionMapping getDependsOn [jvm] Content open override fun getDependsOn (): MutableSet < Any > getDescription [jvm] Content open override fun getDescription (): String ? getDestroyables [jvm] Content open override fun getDestroyables (): TaskDestroyables getDidWork [jvm] Content open override fun getDidWork (): Boolean getEnabled [jvm] Content open override fun getEnabled (): Boolean getExcludes [jvm] Content @Internal() open override fun getExcludes (): MutableSet < String > getExtensions [jvm] Content open override fun getExtensions (): ExtensionContainer getFinalizedBy [jvm] Content open override fun getFinalizedBy (): TaskDependency getGroup [jvm] Content open override fun getGroup (): String ? getIdentityPath [jvm] Content open override fun getIdentityPath (): Path getImpliesSubProjects [jvm] Content open override fun getImpliesSubProjects (): Boolean getIncludes [jvm] Content @Internal() open override fun getIncludes (): MutableSet < String > getInputs [jvm] Content open override fun getInputs (): TaskInputsInternal getLocalState [jvm] Content open override fun getLocalState (): TaskLocalState getLogger [jvm] Content open override fun getLogger (): Logger getLogging [jvm] Content open override fun getLogging (): LoggingManager getMustRunAfter [jvm] Content open override fun getMustRunAfter (): TaskDependency getName [jvm] Content open override fun getName (): String getOnlyIf [jvm] Content open override fun getOnlyIf (): Spec getOutputs [jvm] Content open override fun getOutputs (): TaskOutputsInternal getPath [jvm] Content open override fun getPath (): String getPatternSetFactory [jvm] Content @Inject() open fun getPatternSetFactory (): Factory getProject [jvm] Content open override fun getProject (): Project getRequiredServices [jvm] Content open override fun getRequiredServices (): MutableSet <Provider<out BuildService<*>>> getServices [jvm] Content @Internal() open fun getServices (): ServiceRegistry getSharedResources [jvm] Content open override fun getSharedResources (): MutableList getShouldRunAfter [jvm] Content open override fun getShouldRunAfter (): TaskDependency getSource [jvm] Content @InputFiles() @SkipWhenEmpty() @PathSensitive(value = PathSensitivity.RELATIVE) open override fun getSource (): FileTree getStandardOutputCapture [jvm] Content open override fun getStandardOutputCapture (): StandardOutputCapture getState [jvm] Content open override fun getState (): TaskStateInternal getTaskActions [jvm] Content open override fun getTaskActions (): MutableList getTaskDependencies [jvm] Content open override fun getTaskDependencies (): TaskDependencyInternal getTaskIdentity [jvm] Content open override fun getTaskIdentity (): TaskIdentity<*> getTemporaryDir [jvm] Content open override fun getTemporaryDir (): File getTemporaryDirFactory [jvm] Content open override fun getTemporaryDirFactory (): Factory< File > getTimeout [jvm] Content open override fun getTimeout (): Property< Duration > hasProperty [jvm] Content open override fun hasProperty (p0: String ): Boolean hasTaskActions [jvm] Content open override fun hasTaskActions (): Boolean include [jvm] Content open override fun include (p0: Closure< Any >): SourceTask open override fun include (vararg p0: String ): SourceTask open override fun include (p0: MutableIterable < String >): SourceTask open override fun include (p0: Spec ): SourceTask isEnabled [jvm] Content @Internal() open fun isEnabled (): Boolean isHasCustomActions [jvm] Content open override fun isHasCustomActions (): Boolean mustRunAfter [jvm] Content open override fun mustRunAfter (vararg p0: Any ): Task onlyIf [jvm] Content open override fun onlyIf (p0: Closure< Any >) open override fun onlyIf (p0: Spec ) prependParallelSafeAction [jvm] Content open override fun prependParallelSafeAction (p0: Action ) property [jvm] Content open override fun property (p0: String ): Any ? setActions [jvm] Content open override fun setActions (p0: MutableList >) setDependsOn [jvm] Content open override fun setDependsOn (p0: MutableIterable <*>) setDescription [jvm] Content open override fun setDescription (p0: String ?) setDidWork [jvm] Content open override fun setDidWork (p0: Boolean ) setEnabled [jvm] Content open override fun setEnabled (p0: Boolean ) setExcludes [jvm] Content open override fun setExcludes (p0: MutableIterable < String >): SourceTask setFinalizedBy [jvm] Content open override fun setFinalizedBy (p0: MutableIterable <*>) setGroup [jvm] Content open override fun setGroup (p0: String ?) setImpliesSubProjects [jvm] Content open override fun setImpliesSubProjects (p0: Boolean ) setIncludes [jvm] Content open override fun setIncludes (p0: MutableIterable < String >): SourceTask setMustRunAfter [jvm] Content open override fun setMustRunAfter (p0: MutableIterable <*>) setOnlyIf [jvm] Content open override fun setOnlyIf (p0: Closure< Any >) open override fun setOnlyIf (p0: Spec ) setProperty [jvm] Content open override fun setProperty (p0: String , p1: Any ) setShouldRunAfter [jvm] Content open override fun setShouldRunAfter (p0: MutableIterable <*>) setSource [jvm] Content open fun setSource (p0: Any ) open fun setSource (p0: FileTree) shouldRunAfter [jvm] Content open override fun shouldRunAfter (vararg p0: Any ): TaskDependency source [jvm] Content open fun source (vararg p0: Any ): SourceTask usesService [jvm] Content open override fun usesService (p0: Provider<out BuildService<*>>) Properties Name Summary compilationUnit [jvm] lateinit var compilationUnit : SqlDelightCompilationUnitImpl outputDirectory [jvm] var outputDirectory : File ? = null pluginVersion [jvm] @Input() val pluginVersion : String projectName [jvm] @Input() val projectName : Property< String > properties [jvm] lateinit var properties : SqlDelightDatabasePropertiesImpl verifyMigrations [jvm] @Input() var verifyMigrations : Boolean = false","title":"SqlDelightTask   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/#sqldelighttask","text":"[jvm] @CacheableTask() abstract class SqlDelightTask : SqlDelightWorkerTask","title":"SqlDelightTask"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/#types","text":"Name Summary GenerateInterfaces [jvm] Content abstract class GenerateInterfaces : WorkAction< SqlDelightTask.GenerateInterfacesWorkParameters > GenerateInterfacesWorkParameters [jvm] Content interface GenerateInterfacesWorkParameters : WorkParameters","title":"Types"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/#functions","text":"Name Summary appendParallelSafeAction [jvm] Content open override fun appendParallelSafeAction (p0: Action ) compareTo [jvm] Content open operator override fun compareTo (other: Task): Int configure [jvm] Content open override fun configure (p0: Closure< Any >): Task conventionMapping [jvm] Content open fun conventionMapping (p0: String , p1: Closure< Any >): Task open fun conventionMapping (p0: String , p1: Callable <*>): Task dependsOn [jvm] Content open override fun dependsOn (vararg p0: Any ): Task disableClassLoaderIsolation [jvm] Content fun disableClassLoaderIsolation () More info Makes the task use WorkerExecutor.noIsolation instead of WorkerExecutor.classLoaderIsolation doFirst [jvm] Content open override fun doFirst (p0: Closure< Any >): Task open override fun doFirst (p0: Action ): Task open override fun doFirst (p0: String , p1: Action ): Task doLast [jvm] Content open override fun doLast (p0: Closure< Any >): Task open override fun doLast (p0: Action ): Task open override fun doLast (p0: String , p1: Action ): Task exclude [jvm] Content open override fun exclude (p0: Closure< Any >): SourceTask open override fun exclude (vararg p0: String ): SourceTask open override fun exclude (p0: MutableIterable < String >): SourceTask open override fun exclude (p0: Spec ): SourceTask finalizedBy [jvm] Content open override fun finalizedBy (vararg p0: Any ): Task generateSqlDelightFiles [jvm] Content fun generateSqlDelightFiles () getActions [jvm] Content open override fun getActions (): MutableList > getAnt [jvm] Content open override fun getAnt (): AntBuilder getAsDynamicObject [jvm] Content @Internal() open override fun getAsDynamicObject (): DynamicObject getConvention [jvm] Content @Internal() ~~open~~ ~~override~~ ~~fun~~ ~~getConvention~~ ~~(~~~~)~~~~:~~ Convention getConventionMapping [jvm] Content @Internal() open override fun getConventionMapping (): ConventionMapping getDependsOn [jvm] Content open override fun getDependsOn (): MutableSet < Any > getDescription [jvm] Content open override fun getDescription (): String ? getDestroyables [jvm] Content open override fun getDestroyables (): TaskDestroyables getDidWork [jvm] Content open override fun getDidWork (): Boolean getEnabled [jvm] Content open override fun getEnabled (): Boolean getExcludes [jvm] Content @Internal() open override fun getExcludes (): MutableSet < String > getExtensions [jvm] Content open override fun getExtensions (): ExtensionContainer getFinalizedBy [jvm] Content open override fun getFinalizedBy (): TaskDependency getGroup [jvm] Content open override fun getGroup (): String ? getIdentityPath [jvm] Content open override fun getIdentityPath (): Path getImpliesSubProjects [jvm] Content open override fun getImpliesSubProjects (): Boolean getIncludes [jvm] Content @Internal() open override fun getIncludes (): MutableSet < String > getInputs [jvm] Content open override fun getInputs (): TaskInputsInternal getLocalState [jvm] Content open override fun getLocalState (): TaskLocalState getLogger [jvm] Content open override fun getLogger (): Logger getLogging [jvm] Content open override fun getLogging (): LoggingManager getMustRunAfter [jvm] Content open override fun getMustRunAfter (): TaskDependency getName [jvm] Content open override fun getName (): String getOnlyIf [jvm] Content open override fun getOnlyIf (): Spec getOutputs [jvm] Content open override fun getOutputs (): TaskOutputsInternal getPath [jvm] Content open override fun getPath (): String getPatternSetFactory [jvm] Content @Inject() open fun getPatternSetFactory (): Factory getProject [jvm] Content open override fun getProject (): Project getRequiredServices [jvm] Content open override fun getRequiredServices (): MutableSet <Provider<out BuildService<*>>> getServices [jvm] Content @Internal() open fun getServices (): ServiceRegistry getSharedResources [jvm] Content open override fun getSharedResources (): MutableList getShouldRunAfter [jvm] Content open override fun getShouldRunAfter (): TaskDependency getSource [jvm] Content @InputFiles() @SkipWhenEmpty() @PathSensitive(value = PathSensitivity.RELATIVE) open override fun getSource (): FileTree getStandardOutputCapture [jvm] Content open override fun getStandardOutputCapture (): StandardOutputCapture getState [jvm] Content open override fun getState (): TaskStateInternal getTaskActions [jvm] Content open override fun getTaskActions (): MutableList getTaskDependencies [jvm] Content open override fun getTaskDependencies (): TaskDependencyInternal getTaskIdentity [jvm] Content open override fun getTaskIdentity (): TaskIdentity<*> getTemporaryDir [jvm] Content open override fun getTemporaryDir (): File getTemporaryDirFactory [jvm] Content open override fun getTemporaryDirFactory (): Factory< File > getTimeout [jvm] Content open override fun getTimeout (): Property< Duration > hasProperty [jvm] Content open override fun hasProperty (p0: String ): Boolean hasTaskActions [jvm] Content open override fun hasTaskActions (): Boolean include [jvm] Content open override fun include (p0: Closure< Any >): SourceTask open override fun include (vararg p0: String ): SourceTask open override fun include (p0: MutableIterable < String >): SourceTask open override fun include (p0: Spec ): SourceTask isEnabled [jvm] Content @Internal() open fun isEnabled (): Boolean isHasCustomActions [jvm] Content open override fun isHasCustomActions (): Boolean mustRunAfter [jvm] Content open override fun mustRunAfter (vararg p0: Any ): Task onlyIf [jvm] Content open override fun onlyIf (p0: Closure< Any >) open override fun onlyIf (p0: Spec ) prependParallelSafeAction [jvm] Content open override fun prependParallelSafeAction (p0: Action ) property [jvm] Content open override fun property (p0: String ): Any ? setActions [jvm] Content open override fun setActions (p0: MutableList >) setDependsOn [jvm] Content open override fun setDependsOn (p0: MutableIterable <*>) setDescription [jvm] Content open override fun setDescription (p0: String ?) setDidWork [jvm] Content open override fun setDidWork (p0: Boolean ) setEnabled [jvm] Content open override fun setEnabled (p0: Boolean ) setExcludes [jvm] Content open override fun setExcludes (p0: MutableIterable < String >): SourceTask setFinalizedBy [jvm] Content open override fun setFinalizedBy (p0: MutableIterable <*>) setGroup [jvm] Content open override fun setGroup (p0: String ?) setImpliesSubProjects [jvm] Content open override fun setImpliesSubProjects (p0: Boolean ) setIncludes [jvm] Content open override fun setIncludes (p0: MutableIterable < String >): SourceTask setMustRunAfter [jvm] Content open override fun setMustRunAfter (p0: MutableIterable <*>) setOnlyIf [jvm] Content open override fun setOnlyIf (p0: Closure< Any >) open override fun setOnlyIf (p0: Spec ) setProperty [jvm] Content open override fun setProperty (p0: String , p1: Any ) setShouldRunAfter [jvm] Content open override fun setShouldRunAfter (p0: MutableIterable <*>) setSource [jvm] Content open fun setSource (p0: Any ) open fun setSource (p0: FileTree) shouldRunAfter [jvm] Content open override fun shouldRunAfter (vararg p0: Any ): TaskDependency source [jvm] Content open fun source (vararg p0: Any ): SourceTask usesService [jvm] Content open override fun usesService (p0: Provider<out BuildService<*>>)","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/#properties","text":"Name Summary compilationUnit [jvm] lateinit var compilationUnit : SqlDelightCompilationUnitImpl outputDirectory [jvm] var outputDirectory : File ? = null pluginVersion [jvm] @Input() val pluginVersion : String projectName [jvm] @Input() val projectName : Property< String > properties [jvm] lateinit var properties : SqlDelightDatabasePropertiesImpl verifyMigrations [jvm] @Input() var verifyMigrations : Boolean = false","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-sql-delight-task/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / SqlDelightTask SqlDelightTask [jvm] Content fun SqlDelightTask ()","title":"SqlDelightTask   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-sql-delight-task/#sqldelighttask","text":"[jvm] Content fun SqlDelightTask ()","title":"SqlDelightTask"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/compilation-unit/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / compilationUnit compilationUnit [jvm] Content lateinit var compilationUnit : SqlDelightCompilationUnitImpl","title":"compilationUnit   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/compilation-unit/#compilationunit","text":"[jvm] Content lateinit var compilationUnit : SqlDelightCompilationUnitImpl","title":"compilationUnit"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/generate-sql-delight-files/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / generateSqlDelightFiles generateSqlDelightFiles [jvm] Content fun generateSqlDelightFiles ()","title":"generateSqlDelightFiles   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/generate-sql-delight-files/#generatesqldelightfiles","text":"[jvm] Content fun generateSqlDelightFiles ()","title":"generateSqlDelightFiles"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/get-source/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / getSource getSource [jvm] Content @InputFiles() @SkipWhenEmpty() @PathSensitive(value = PathSensitivity.RELATIVE) open override fun getSource (): FileTree","title":"getSource   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/get-source/#getsource","text":"[jvm] Content @InputFiles() @SkipWhenEmpty() @PathSensitive(value = PathSensitivity.RELATIVE) open override fun getSource (): FileTree","title":"getSource"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/output-directory/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / outputDirectory outputDirectory [jvm] Content var outputDirectory : File ? = null","title":"outputDirectory   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/output-directory/#outputdirectory","text":"[jvm] Content var outputDirectory : File ? = null","title":"outputDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/plugin-version/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / pluginVersion pluginVersion [jvm] Content @Input() val pluginVersion : String","title":"pluginVersion   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/plugin-version/#pluginversion","text":"[jvm] Content @Input() val pluginVersion : String","title":"pluginVersion"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/project-name/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / projectName projectName [jvm] Content @Input() val projectName : Property< String >","title":"projectName   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/project-name/#projectname","text":"[jvm] Content @Input() val projectName : Property< String >","title":"projectName"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/properties/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / properties properties [jvm] Content lateinit var properties : SqlDelightDatabasePropertiesImpl","title":"properties   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/properties/#properties","text":"[jvm] Content lateinit var properties : SqlDelightDatabasePropertiesImpl","title":"properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/verify-migrations/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / verifyMigrations verifyMigrations [jvm] Content @Input() var verifyMigrations : Boolean = false","title":"verifyMigrations   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/verify-migrations/#verifymigrations","text":"[jvm] Content @Input() var verifyMigrations : Boolean = false","title":"verifyMigrations"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / GenerateInterfaces GenerateInterfaces [jvm] abstract class GenerateInterfaces : WorkAction< SqlDelightTask.GenerateInterfacesWorkParameters > Functions Name Summary execute [jvm] Content open override fun execute () getParameters [jvm] Content @Inject() abstract fun getParameters (): SqlDelightTask.GenerateInterfacesWorkParameters","title":"GenerateInterfaces   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces/#generateinterfaces","text":"[jvm] abstract class GenerateInterfaces : WorkAction< SqlDelightTask.GenerateInterfacesWorkParameters >","title":"GenerateInterfaces"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces/#functions","text":"Name Summary execute [jvm] Content open override fun execute () getParameters [jvm] Content @Inject() abstract fun getParameters (): SqlDelightTask.GenerateInterfacesWorkParameters","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces/-generate-interfaces/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / GenerateInterfaces / GenerateInterfaces GenerateInterfaces [jvm] Content fun GenerateInterfaces ()","title":"GenerateInterfaces   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces/-generate-interfaces/#generateinterfaces","text":"[jvm] Content fun GenerateInterfaces ()","title":"GenerateInterfaces"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces/execute/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / GenerateInterfaces / execute execute [jvm] Content open override fun execute ()","title":"execute   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces/execute/#execute","text":"[jvm] Content open override fun execute ()","title":"execute"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces-work-parameters/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / GenerateInterfacesWorkParameters GenerateInterfacesWorkParameters [jvm] interface GenerateInterfacesWorkParameters : WorkParameters Properties Name Summary compilationUnit [jvm] abstract val compilationUnit : Property outputDirectory [jvm] abstract val outputDirectory : DirectoryProperty projectName [jvm] abstract val projectName : Property< String > properties [jvm] abstract val properties : Property verifyMigrations [jvm] abstract val verifyMigrations : Property< Boolean >","title":"GenerateInterfacesWorkParameters   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces-work-parameters/#generateinterfacesworkparameters","text":"[jvm] interface GenerateInterfacesWorkParameters : WorkParameters","title":"GenerateInterfacesWorkParameters"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces-work-parameters/#properties","text":"Name Summary compilationUnit [jvm] abstract val compilationUnit : Property outputDirectory [jvm] abstract val outputDirectory : DirectoryProperty projectName [jvm] abstract val projectName : Property< String > properties [jvm] abstract val properties : Property verifyMigrations [jvm] abstract val verifyMigrations : Property< Boolean >","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces-work-parameters/compilation-unit/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / GenerateInterfacesWorkParameters / compilationUnit compilationUnit [jvm] Content abstract val compilationUnit : Property","title":"compilationUnit   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces-work-parameters/compilation-unit/#compilationunit","text":"[jvm] Content abstract val compilationUnit : Property","title":"compilationUnit"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces-work-parameters/output-directory/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / GenerateInterfacesWorkParameters / outputDirectory outputDirectory [jvm] Content abstract val outputDirectory : DirectoryProperty","title":"outputDirectory   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces-work-parameters/output-directory/#outputdirectory","text":"[jvm] Content abstract val outputDirectory : DirectoryProperty","title":"outputDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces-work-parameters/project-name/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / GenerateInterfacesWorkParameters / projectName projectName [jvm] Content abstract val projectName : Property< String >","title":"projectName   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces-work-parameters/project-name/#projectname","text":"[jvm] Content abstract val projectName : Property< String >","title":"projectName"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces-work-parameters/properties/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / GenerateInterfacesWorkParameters / properties properties [jvm] Content abstract val properties : Property","title":"properties   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces-work-parameters/properties/#properties","text":"[jvm] Content abstract val properties : Property","title":"properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces-work-parameters/verify-migrations/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / GenerateInterfacesWorkParameters / verifyMigrations verifyMigrations [jvm] Content abstract val verifyMigrations : Property< Boolean >","title":"verifyMigrations   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-generate-interfaces-work-parameters/verify-migrations/#verifymigrations","text":"[jvm] Content abstract val verifyMigrations : Property< Boolean >","title":"verifyMigrations"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-worker-task/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightWorkerTask SqlDelightWorkerTask [jvm] abstract class SqlDelightWorkerTask : SourceTask Common API for interacting with gradle workers in tasks Constructors SqlDelightWorkerTask [jvm] fun SqlDelightWorkerTask () Functions Name Summary appendParallelSafeAction [jvm] Content open override fun appendParallelSafeAction (p0: Action ) compareTo [jvm] Content open operator override fun compareTo (other: Task): Int configure [jvm] Content open override fun configure (p0: Closure< Any >): Task conventionMapping [jvm] Content open fun conventionMapping (p0: String , p1: Closure< Any >): Task open fun conventionMapping (p0: String , p1: Callable <*>): Task dependsOn [jvm] Content open override fun dependsOn (vararg p0: Any ): Task disableClassLoaderIsolation [jvm] Content fun disableClassLoaderIsolation () More info Makes the task use WorkerExecutor.noIsolation instead of WorkerExecutor.classLoaderIsolation doFirst [jvm] Content open override fun doFirst (p0: Closure< Any >): Task open override fun doFirst (p0: Action ): Task open override fun doFirst (p0: String , p1: Action ): Task doLast [jvm] Content open override fun doLast (p0: Closure< Any >): Task open override fun doLast (p0: Action ): Task open override fun doLast (p0: String , p1: Action ): Task exclude [jvm] Content open override fun exclude (p0: Closure< Any >): SourceTask open override fun exclude (vararg p0: String ): SourceTask open override fun exclude (p0: MutableIterable < String >): SourceTask open override fun exclude (p0: Spec ): SourceTask finalizedBy [jvm] Content open override fun finalizedBy (vararg p0: Any ): Task getActions [jvm] Content open override fun getActions (): MutableList > getAnt [jvm] Content open override fun getAnt (): AntBuilder getAsDynamicObject [jvm] Content @Internal() open override fun getAsDynamicObject (): DynamicObject getConvention [jvm] Content @Internal() ~~open~~ ~~override~~ ~~fun~~ ~~getConvention~~ ~~(~~~~)~~~~:~~ Convention getConventionMapping [jvm] Content @Internal() open override fun getConventionMapping (): ConventionMapping getDependsOn [jvm] Content open override fun getDependsOn (): MutableSet < Any > getDescription [jvm] Content open override fun getDescription (): String ? getDestroyables [jvm] Content open override fun getDestroyables (): TaskDestroyables getDidWork [jvm] Content open override fun getDidWork (): Boolean getEnabled [jvm] Content open override fun getEnabled (): Boolean getExcludes [jvm] Content @Internal() open override fun getExcludes (): MutableSet < String > getExtensions [jvm] Content open override fun getExtensions (): ExtensionContainer getFinalizedBy [jvm] Content open override fun getFinalizedBy (): TaskDependency getGroup [jvm] Content open override fun getGroup (): String ? getIdentityPath [jvm] Content open override fun getIdentityPath (): Path getImpliesSubProjects [jvm] Content open override fun getImpliesSubProjects (): Boolean getIncludes [jvm] Content @Internal() open override fun getIncludes (): MutableSet < String > getInputs [jvm] Content open override fun getInputs (): TaskInputsInternal getLocalState [jvm] Content open override fun getLocalState (): TaskLocalState getLogger [jvm] Content open override fun getLogger (): Logger getLogging [jvm] Content open override fun getLogging (): LoggingManager getMustRunAfter [jvm] Content open override fun getMustRunAfter (): TaskDependency getName [jvm] Content open override fun getName (): String getOnlyIf [jvm] Content open override fun getOnlyIf (): Spec getOutputs [jvm] Content open override fun getOutputs (): TaskOutputsInternal getPath [jvm] Content open override fun getPath (): String getPatternSetFactory [jvm] Content @Inject() open fun getPatternSetFactory (): Factory getProject [jvm] Content open override fun getProject (): Project getRequiredServices [jvm] Content open override fun getRequiredServices (): MutableSet <Provider<out BuildService<*>>> getServices [jvm] Content @Internal() open fun getServices (): ServiceRegistry getSharedResources [jvm] Content open override fun getSharedResources (): MutableList getShouldRunAfter [jvm] Content open override fun getShouldRunAfter (): TaskDependency getSource [jvm] Content @InputFiles() @SkipWhenEmpty() @IgnoreEmptyDirectories() @PathSensitive(value = PathSensitivity.ABSOLUTE) open fun getSource (): FileTree getStandardOutputCapture [jvm] Content open override fun getStandardOutputCapture (): StandardOutputCapture getState [jvm] Content open override fun getState (): TaskStateInternal getTaskActions [jvm] Content open override fun getTaskActions (): MutableList getTaskDependencies [jvm] Content open override fun getTaskDependencies (): TaskDependencyInternal getTaskIdentity [jvm] Content open override fun getTaskIdentity (): TaskIdentity<*> getTemporaryDir [jvm] Content open override fun getTemporaryDir (): File getTemporaryDirFactory [jvm] Content open override fun getTemporaryDirFactory (): Factory< File > getTimeout [jvm] Content open override fun getTimeout (): Property< Duration > hasProperty [jvm] Content open override fun hasProperty (p0: String ): Boolean hasTaskActions [jvm] Content open override fun hasTaskActions (): Boolean include [jvm] Content open override fun include (p0: Closure< Any >): SourceTask open override fun include (vararg p0: String ): SourceTask open override fun include (p0: MutableIterable < String >): SourceTask open override fun include (p0: Spec ): SourceTask isEnabled [jvm] Content @Internal() open fun isEnabled (): Boolean isHasCustomActions [jvm] Content open override fun isHasCustomActions (): Boolean mustRunAfter [jvm] Content open override fun mustRunAfter (vararg p0: Any ): Task onlyIf [jvm] Content open override fun onlyIf (p0: Closure< Any >) open override fun onlyIf (p0: Spec ) prependParallelSafeAction [jvm] Content open override fun prependParallelSafeAction (p0: Action ) property [jvm] Content open override fun property (p0: String ): Any ? setActions [jvm] Content open override fun setActions (p0: MutableList >) setDependsOn [jvm] Content open override fun setDependsOn (p0: MutableIterable <*>) setDescription [jvm] Content open override fun setDescription (p0: String ?) setDidWork [jvm] Content open override fun setDidWork (p0: Boolean ) setEnabled [jvm] Content open override fun setEnabled (p0: Boolean ) setExcludes [jvm] Content open override fun setExcludes (p0: MutableIterable < String >): SourceTask setFinalizedBy [jvm] Content open override fun setFinalizedBy (p0: MutableIterable <*>) setGroup [jvm] Content open override fun setGroup (p0: String ?) setImpliesSubProjects [jvm] Content open override fun setImpliesSubProjects (p0: Boolean ) setIncludes [jvm] Content open override fun setIncludes (p0: MutableIterable < String >): SourceTask setMustRunAfter [jvm] Content open override fun setMustRunAfter (p0: MutableIterable <*>) setOnlyIf [jvm] Content open override fun setOnlyIf (p0: Closure< Any >) open override fun setOnlyIf (p0: Spec ) setProperty [jvm] Content open override fun setProperty (p0: String , p1: Any ) setShouldRunAfter [jvm] Content open override fun setShouldRunAfter (p0: MutableIterable <*>) setSource [jvm] Content open fun setSource (p0: Any ) open fun setSource (p0: FileTree) shouldRunAfter [jvm] Content open override fun shouldRunAfter (vararg p0: Any ): TaskDependency source [jvm] Content open fun source (vararg p0: Any ): SourceTask usesService [jvm] Content open override fun usesService (p0: Provider<out BuildService<*>>) Inheritors Name GenerateMigrationOutputTask GenerateSchemaTask SqlDelightTask VerifyMigrationTask","title":"SqlDelightWorkerTask   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-worker-task/#sqldelightworkertask","text":"[jvm] abstract class SqlDelightWorkerTask : SourceTask Common API for interacting with gradle workers in tasks","title":"SqlDelightWorkerTask"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-worker-task/#constructors","text":"SqlDelightWorkerTask [jvm] fun SqlDelightWorkerTask ()","title":"Constructors"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-worker-task/#functions","text":"Name Summary appendParallelSafeAction [jvm] Content open override fun appendParallelSafeAction (p0: Action ) compareTo [jvm] Content open operator override fun compareTo (other: Task): Int configure [jvm] Content open override fun configure (p0: Closure< Any >): Task conventionMapping [jvm] Content open fun conventionMapping (p0: String , p1: Closure< Any >): Task open fun conventionMapping (p0: String , p1: Callable <*>): Task dependsOn [jvm] Content open override fun dependsOn (vararg p0: Any ): Task disableClassLoaderIsolation [jvm] Content fun disableClassLoaderIsolation () More info Makes the task use WorkerExecutor.noIsolation instead of WorkerExecutor.classLoaderIsolation doFirst [jvm] Content open override fun doFirst (p0: Closure< Any >): Task open override fun doFirst (p0: Action ): Task open override fun doFirst (p0: String , p1: Action ): Task doLast [jvm] Content open override fun doLast (p0: Closure< Any >): Task open override fun doLast (p0: Action ): Task open override fun doLast (p0: String , p1: Action ): Task exclude [jvm] Content open override fun exclude (p0: Closure< Any >): SourceTask open override fun exclude (vararg p0: String ): SourceTask open override fun exclude (p0: MutableIterable < String >): SourceTask open override fun exclude (p0: Spec ): SourceTask finalizedBy [jvm] Content open override fun finalizedBy (vararg p0: Any ): Task getActions [jvm] Content open override fun getActions (): MutableList > getAnt [jvm] Content open override fun getAnt (): AntBuilder getAsDynamicObject [jvm] Content @Internal() open override fun getAsDynamicObject (): DynamicObject getConvention [jvm] Content @Internal() ~~open~~ ~~override~~ ~~fun~~ ~~getConvention~~ ~~(~~~~)~~~~:~~ Convention getConventionMapping [jvm] Content @Internal() open override fun getConventionMapping (): ConventionMapping getDependsOn [jvm] Content open override fun getDependsOn (): MutableSet < Any > getDescription [jvm] Content open override fun getDescription (): String ? getDestroyables [jvm] Content open override fun getDestroyables (): TaskDestroyables getDidWork [jvm] Content open override fun getDidWork (): Boolean getEnabled [jvm] Content open override fun getEnabled (): Boolean getExcludes [jvm] Content @Internal() open override fun getExcludes (): MutableSet < String > getExtensions [jvm] Content open override fun getExtensions (): ExtensionContainer getFinalizedBy [jvm] Content open override fun getFinalizedBy (): TaskDependency getGroup [jvm] Content open override fun getGroup (): String ? getIdentityPath [jvm] Content open override fun getIdentityPath (): Path getImpliesSubProjects [jvm] Content open override fun getImpliesSubProjects (): Boolean getIncludes [jvm] Content @Internal() open override fun getIncludes (): MutableSet < String > getInputs [jvm] Content open override fun getInputs (): TaskInputsInternal getLocalState [jvm] Content open override fun getLocalState (): TaskLocalState getLogger [jvm] Content open override fun getLogger (): Logger getLogging [jvm] Content open override fun getLogging (): LoggingManager getMustRunAfter [jvm] Content open override fun getMustRunAfter (): TaskDependency getName [jvm] Content open override fun getName (): String getOnlyIf [jvm] Content open override fun getOnlyIf (): Spec getOutputs [jvm] Content open override fun getOutputs (): TaskOutputsInternal getPath [jvm] Content open override fun getPath (): String getPatternSetFactory [jvm] Content @Inject() open fun getPatternSetFactory (): Factory getProject [jvm] Content open override fun getProject (): Project getRequiredServices [jvm] Content open override fun getRequiredServices (): MutableSet <Provider<out BuildService<*>>> getServices [jvm] Content @Internal() open fun getServices (): ServiceRegistry getSharedResources [jvm] Content open override fun getSharedResources (): MutableList getShouldRunAfter [jvm] Content open override fun getShouldRunAfter (): TaskDependency getSource [jvm] Content @InputFiles() @SkipWhenEmpty() @IgnoreEmptyDirectories() @PathSensitive(value = PathSensitivity.ABSOLUTE) open fun getSource (): FileTree getStandardOutputCapture [jvm] Content open override fun getStandardOutputCapture (): StandardOutputCapture getState [jvm] Content open override fun getState (): TaskStateInternal getTaskActions [jvm] Content open override fun getTaskActions (): MutableList getTaskDependencies [jvm] Content open override fun getTaskDependencies (): TaskDependencyInternal getTaskIdentity [jvm] Content open override fun getTaskIdentity (): TaskIdentity<*> getTemporaryDir [jvm] Content open override fun getTemporaryDir (): File getTemporaryDirFactory [jvm] Content open override fun getTemporaryDirFactory (): Factory< File > getTimeout [jvm] Content open override fun getTimeout (): Property< Duration > hasProperty [jvm] Content open override fun hasProperty (p0: String ): Boolean hasTaskActions [jvm] Content open override fun hasTaskActions (): Boolean include [jvm] Content open override fun include (p0: Closure< Any >): SourceTask open override fun include (vararg p0: String ): SourceTask open override fun include (p0: MutableIterable < String >): SourceTask open override fun include (p0: Spec ): SourceTask isEnabled [jvm] Content @Internal() open fun isEnabled (): Boolean isHasCustomActions [jvm] Content open override fun isHasCustomActions (): Boolean mustRunAfter [jvm] Content open override fun mustRunAfter (vararg p0: Any ): Task onlyIf [jvm] Content open override fun onlyIf (p0: Closure< Any >) open override fun onlyIf (p0: Spec ) prependParallelSafeAction [jvm] Content open override fun prependParallelSafeAction (p0: Action ) property [jvm] Content open override fun property (p0: String ): Any ? setActions [jvm] Content open override fun setActions (p0: MutableList >) setDependsOn [jvm] Content open override fun setDependsOn (p0: MutableIterable <*>) setDescription [jvm] Content open override fun setDescription (p0: String ?) setDidWork [jvm] Content open override fun setDidWork (p0: Boolean ) setEnabled [jvm] Content open override fun setEnabled (p0: Boolean ) setExcludes [jvm] Content open override fun setExcludes (p0: MutableIterable < String >): SourceTask setFinalizedBy [jvm] Content open override fun setFinalizedBy (p0: MutableIterable <*>) setGroup [jvm] Content open override fun setGroup (p0: String ?) setImpliesSubProjects [jvm] Content open override fun setImpliesSubProjects (p0: Boolean ) setIncludes [jvm] Content open override fun setIncludes (p0: MutableIterable < String >): SourceTask setMustRunAfter [jvm] Content open override fun setMustRunAfter (p0: MutableIterable <*>) setOnlyIf [jvm] Content open override fun setOnlyIf (p0: Closure< Any >) open override fun setOnlyIf (p0: Spec ) setProperty [jvm] Content open override fun setProperty (p0: String , p1: Any ) setShouldRunAfter [jvm] Content open override fun setShouldRunAfter (p0: MutableIterable <*>) setSource [jvm] Content open fun setSource (p0: Any ) open fun setSource (p0: FileTree) shouldRunAfter [jvm] Content open override fun shouldRunAfter (vararg p0: Any ): TaskDependency source [jvm] Content open fun source (vararg p0: Any ): SourceTask usesService [jvm] Content open override fun usesService (p0: Provider<out BuildService<*>>)","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-worker-task/#inheritors","text":"Name GenerateMigrationOutputTask GenerateSchemaTask SqlDelightTask VerifyMigrationTask","title":"Inheritors"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-worker-task/-sql-delight-worker-task/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightWorkerTask / SqlDelightWorkerTask SqlDelightWorkerTask [jvm] Content fun SqlDelightWorkerTask ()","title":"SqlDelightWorkerTask   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-worker-task/-sql-delight-worker-task/#sqldelightworkertask","text":"[jvm] Content fun SqlDelightWorkerTask ()","title":"SqlDelightWorkerTask"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-worker-task/disable-class-loader-isolation/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightWorkerTask / disableClassLoaderIsolation disableClassLoaderIsolation [jvm] Content fun disableClassLoaderIsolation () More info Makes the task use WorkerExecutor.noIsolation instead of WorkerExecutor.classLoaderIsolation","title":"disableClassLoaderIsolation   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-worker-task/disable-class-loader-isolation/#disableclassloaderisolation","text":"[jvm] Content fun disableClassLoaderIsolation () More info Makes the task use WorkerExecutor.noIsolation instead of WorkerExecutor.classLoaderIsolation","title":"disableClassLoaderIsolation"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask VerifyMigrationTask [jvm] @CacheableTask() abstract class VerifyMigrationTask : SqlDelightWorkerTask Types Name Summary VerifyMigrationAction [jvm] Content abstract class VerifyMigrationAction : WorkAction< VerifyMigrationTask.VerifyMigrationWorkParameters > VerifyMigrationWorkParameters [jvm] Content interface VerifyMigrationWorkParameters : WorkParameters Functions Name Summary appendParallelSafeAction [jvm] Content open override fun appendParallelSafeAction (p0: Action ) compareTo [jvm] Content open operator override fun compareTo (other: Task): Int configure [jvm] Content open override fun configure (p0: Closure< Any >): Task conventionMapping [jvm] Content open fun conventionMapping (p0: String , p1: Closure< Any >): Task open fun conventionMapping (p0: String , p1: Callable <*>): Task dependsOn [jvm] Content open override fun dependsOn (vararg p0: Any ): Task disableClassLoaderIsolation [jvm] Content fun disableClassLoaderIsolation () More info Makes the task use WorkerExecutor.noIsolation instead of WorkerExecutor.classLoaderIsolation doFirst [jvm] Content open override fun doFirst (p0: Closure< Any >): Task open override fun doFirst (p0: Action ): Task open override fun doFirst (p0: String , p1: Action ): Task doLast [jvm] Content open override fun doLast (p0: Closure< Any >): Task open override fun doLast (p0: Action ): Task open override fun doLast (p0: String , p1: Action ): Task exclude [jvm] Content open override fun exclude (p0: Closure< Any >): SourceTask open override fun exclude (vararg p0: String ): SourceTask open override fun exclude (p0: MutableIterable < String >): SourceTask open override fun exclude (p0: Spec ): SourceTask finalizedBy [jvm] Content open override fun finalizedBy (vararg p0: Any ): Task getActions [jvm] Content open override fun getActions (): MutableList > getAnt [jvm] Content open override fun getAnt (): AntBuilder getAsDynamicObject [jvm] Content @Internal() open override fun getAsDynamicObject (): DynamicObject getConvention [jvm] Content @Internal() ~~open~~ ~~override~~ ~~fun~~ ~~getConvention~~ ~~(~~~~)~~~~:~~ Convention getConventionMapping [jvm] Content @Internal() open override fun getConventionMapping (): ConventionMapping getDependsOn [jvm] Content open override fun getDependsOn (): MutableSet < Any > getDescription [jvm] Content open override fun getDescription (): String ? getDestroyables [jvm] Content open override fun getDestroyables (): TaskDestroyables getDidWork [jvm] Content open override fun getDidWork (): Boolean getEnabled [jvm] Content open override fun getEnabled (): Boolean getExcludes [jvm] Content @Internal() open override fun getExcludes (): MutableSet < String > getExtensions [jvm] Content open override fun getExtensions (): ExtensionContainer getFinalizedBy [jvm] Content open override fun getFinalizedBy (): TaskDependency getGroup [jvm] Content open override fun getGroup (): String ? getIdentityPath [jvm] Content open override fun getIdentityPath (): Path getImpliesSubProjects [jvm] Content open override fun getImpliesSubProjects (): Boolean getIncludes [jvm] Content @Internal() open override fun getIncludes (): MutableSet < String > getInputs [jvm] Content open override fun getInputs (): TaskInputsInternal getLocalState [jvm] Content open override fun getLocalState (): TaskLocalState getLogger [jvm] Content open override fun getLogger (): Logger getLogging [jvm] Content open override fun getLogging (): LoggingManager getMustRunAfter [jvm] Content open override fun getMustRunAfter (): TaskDependency getName [jvm] Content open override fun getName (): String getOnlyIf [jvm] Content open override fun getOnlyIf (): Spec getOutputs [jvm] Content open override fun getOutputs (): TaskOutputsInternal getPath [jvm] Content open override fun getPath (): String getPatternSetFactory [jvm] Content @Inject() open fun getPatternSetFactory (): Factory getProject [jvm] Content open override fun getProject (): Project getRequiredServices [jvm] Content open override fun getRequiredServices (): MutableSet <Provider<out BuildService<*>>> getServices [jvm] Content @Internal() open fun getServices (): ServiceRegistry getSharedResources [jvm] Content open override fun getSharedResources (): MutableList getShouldRunAfter [jvm] Content open override fun getShouldRunAfter (): TaskDependency getSource [jvm] Content @InputFiles() @SkipWhenEmpty() @PathSensitive(value = PathSensitivity.RELATIVE) open override fun getSource (): FileTree getStandardOutputCapture [jvm] Content open override fun getStandardOutputCapture (): StandardOutputCapture getState [jvm] Content open override fun getState (): TaskStateInternal getTaskActions [jvm] Content open override fun getTaskActions (): MutableList getTaskDependencies [jvm] Content open override fun getTaskDependencies (): TaskDependencyInternal getTaskIdentity [jvm] Content open override fun getTaskIdentity (): TaskIdentity<*> getTemporaryDir [jvm] Content open override fun getTemporaryDir (): File getTemporaryDirFactory [jvm] Content open override fun getTemporaryDirFactory (): Factory< File > getTimeout [jvm] Content open override fun getTimeout (): Property< Duration > hasProperty [jvm] Content open override fun hasProperty (p0: String ): Boolean hasTaskActions [jvm] Content open override fun hasTaskActions (): Boolean include [jvm] Content open override fun include (p0: Closure< Any >): SourceTask open override fun include (vararg p0: String ): SourceTask open override fun include (p0: MutableIterable < String >): SourceTask open override fun include (p0: Spec ): SourceTask isEnabled [jvm] Content @Internal() open fun isEnabled (): Boolean isHasCustomActions [jvm] Content open override fun isHasCustomActions (): Boolean mustRunAfter [jvm] Content open override fun mustRunAfter (vararg p0: Any ): Task onlyIf [jvm] Content open override fun onlyIf (p0: Closure< Any >) open override fun onlyIf (p0: Spec ) prependParallelSafeAction [jvm] Content open override fun prependParallelSafeAction (p0: Action ) property [jvm] Content open override fun property (p0: String ): Any ? setActions [jvm] Content open override fun setActions (p0: MutableList >) setDependsOn [jvm] Content open override fun setDependsOn (p0: MutableIterable <*>) setDescription [jvm] Content open override fun setDescription (p0: String ?) setDidWork [jvm] Content open override fun setDidWork (p0: Boolean ) setEnabled [jvm] Content open override fun setEnabled (p0: Boolean ) setExcludes [jvm] Content open override fun setExcludes (p0: MutableIterable < String >): SourceTask setFinalizedBy [jvm] Content open override fun setFinalizedBy (p0: MutableIterable <*>) setGroup [jvm] Content open override fun setGroup (p0: String ?) setImpliesSubProjects [jvm] Content open override fun setImpliesSubProjects (p0: Boolean ) setIncludes [jvm] Content open override fun setIncludes (p0: MutableIterable < String >): SourceTask setMustRunAfter [jvm] Content open override fun setMustRunAfter (p0: MutableIterable <*>) setOnlyIf [jvm] Content open override fun setOnlyIf (p0: Closure< Any >) open override fun setOnlyIf (p0: Spec ) setProperty [jvm] Content open override fun setProperty (p0: String , p1: Any ) setShouldRunAfter [jvm] Content open override fun setShouldRunAfter (p0: MutableIterable <*>) setSource [jvm] Content open fun setSource (p0: Any ) open fun setSource (p0: FileTree) shouldRunAfter [jvm] Content open override fun shouldRunAfter (vararg p0: Any ): TaskDependency source [jvm] Content open fun source (vararg p0: Any ): SourceTask usesService [jvm] Content open override fun usesService (p0: Provider<out BuildService<*>>) verifyMigrations [jvm] Content fun verifyMigrations () Properties Name Summary compilationUnit [jvm] lateinit var compilationUnit : SqlDelightCompilationUnitImpl pluginVersion [jvm] @Input() val pluginVersion : String projectName [jvm] @Input() val projectName : Property< String > properties [jvm] lateinit var properties : SqlDelightDatabasePropertiesImpl verifyMigrations [jvm] @Input() var verifyMigrations : Boolean = false workingDirectory [jvm] @Internal() lateinit var workingDirectory : File Directory where the database files are copied for the migration scripts to run against.","title":"VerifyMigrationTask   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/#verifymigrationtask","text":"[jvm] @CacheableTask() abstract class VerifyMigrationTask : SqlDelightWorkerTask","title":"VerifyMigrationTask"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/#types","text":"Name Summary VerifyMigrationAction [jvm] Content abstract class VerifyMigrationAction : WorkAction< VerifyMigrationTask.VerifyMigrationWorkParameters > VerifyMigrationWorkParameters [jvm] Content interface VerifyMigrationWorkParameters : WorkParameters","title":"Types"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/#functions","text":"Name Summary appendParallelSafeAction [jvm] Content open override fun appendParallelSafeAction (p0: Action ) compareTo [jvm] Content open operator override fun compareTo (other: Task): Int configure [jvm] Content open override fun configure (p0: Closure< Any >): Task conventionMapping [jvm] Content open fun conventionMapping (p0: String , p1: Closure< Any >): Task open fun conventionMapping (p0: String , p1: Callable <*>): Task dependsOn [jvm] Content open override fun dependsOn (vararg p0: Any ): Task disableClassLoaderIsolation [jvm] Content fun disableClassLoaderIsolation () More info Makes the task use WorkerExecutor.noIsolation instead of WorkerExecutor.classLoaderIsolation doFirst [jvm] Content open override fun doFirst (p0: Closure< Any >): Task open override fun doFirst (p0: Action ): Task open override fun doFirst (p0: String , p1: Action ): Task doLast [jvm] Content open override fun doLast (p0: Closure< Any >): Task open override fun doLast (p0: Action ): Task open override fun doLast (p0: String , p1: Action ): Task exclude [jvm] Content open override fun exclude (p0: Closure< Any >): SourceTask open override fun exclude (vararg p0: String ): SourceTask open override fun exclude (p0: MutableIterable < String >): SourceTask open override fun exclude (p0: Spec ): SourceTask finalizedBy [jvm] Content open override fun finalizedBy (vararg p0: Any ): Task getActions [jvm] Content open override fun getActions (): MutableList > getAnt [jvm] Content open override fun getAnt (): AntBuilder getAsDynamicObject [jvm] Content @Internal() open override fun getAsDynamicObject (): DynamicObject getConvention [jvm] Content @Internal() ~~open~~ ~~override~~ ~~fun~~ ~~getConvention~~ ~~(~~~~)~~~~:~~ Convention getConventionMapping [jvm] Content @Internal() open override fun getConventionMapping (): ConventionMapping getDependsOn [jvm] Content open override fun getDependsOn (): MutableSet < Any > getDescription [jvm] Content open override fun getDescription (): String ? getDestroyables [jvm] Content open override fun getDestroyables (): TaskDestroyables getDidWork [jvm] Content open override fun getDidWork (): Boolean getEnabled [jvm] Content open override fun getEnabled (): Boolean getExcludes [jvm] Content @Internal() open override fun getExcludes (): MutableSet < String > getExtensions [jvm] Content open override fun getExtensions (): ExtensionContainer getFinalizedBy [jvm] Content open override fun getFinalizedBy (): TaskDependency getGroup [jvm] Content open override fun getGroup (): String ? getIdentityPath [jvm] Content open override fun getIdentityPath (): Path getImpliesSubProjects [jvm] Content open override fun getImpliesSubProjects (): Boolean getIncludes [jvm] Content @Internal() open override fun getIncludes (): MutableSet < String > getInputs [jvm] Content open override fun getInputs (): TaskInputsInternal getLocalState [jvm] Content open override fun getLocalState (): TaskLocalState getLogger [jvm] Content open override fun getLogger (): Logger getLogging [jvm] Content open override fun getLogging (): LoggingManager getMustRunAfter [jvm] Content open override fun getMustRunAfter (): TaskDependency getName [jvm] Content open override fun getName (): String getOnlyIf [jvm] Content open override fun getOnlyIf (): Spec getOutputs [jvm] Content open override fun getOutputs (): TaskOutputsInternal getPath [jvm] Content open override fun getPath (): String getPatternSetFactory [jvm] Content @Inject() open fun getPatternSetFactory (): Factory getProject [jvm] Content open override fun getProject (): Project getRequiredServices [jvm] Content open override fun getRequiredServices (): MutableSet <Provider<out BuildService<*>>> getServices [jvm] Content @Internal() open fun getServices (): ServiceRegistry getSharedResources [jvm] Content open override fun getSharedResources (): MutableList getShouldRunAfter [jvm] Content open override fun getShouldRunAfter (): TaskDependency getSource [jvm] Content @InputFiles() @SkipWhenEmpty() @PathSensitive(value = PathSensitivity.RELATIVE) open override fun getSource (): FileTree getStandardOutputCapture [jvm] Content open override fun getStandardOutputCapture (): StandardOutputCapture getState [jvm] Content open override fun getState (): TaskStateInternal getTaskActions [jvm] Content open override fun getTaskActions (): MutableList getTaskDependencies [jvm] Content open override fun getTaskDependencies (): TaskDependencyInternal getTaskIdentity [jvm] Content open override fun getTaskIdentity (): TaskIdentity<*> getTemporaryDir [jvm] Content open override fun getTemporaryDir (): File getTemporaryDirFactory [jvm] Content open override fun getTemporaryDirFactory (): Factory< File > getTimeout [jvm] Content open override fun getTimeout (): Property< Duration > hasProperty [jvm] Content open override fun hasProperty (p0: String ): Boolean hasTaskActions [jvm] Content open override fun hasTaskActions (): Boolean include [jvm] Content open override fun include (p0: Closure< Any >): SourceTask open override fun include (vararg p0: String ): SourceTask open override fun include (p0: MutableIterable < String >): SourceTask open override fun include (p0: Spec ): SourceTask isEnabled [jvm] Content @Internal() open fun isEnabled (): Boolean isHasCustomActions [jvm] Content open override fun isHasCustomActions (): Boolean mustRunAfter [jvm] Content open override fun mustRunAfter (vararg p0: Any ): Task onlyIf [jvm] Content open override fun onlyIf (p0: Closure< Any >) open override fun onlyIf (p0: Spec ) prependParallelSafeAction [jvm] Content open override fun prependParallelSafeAction (p0: Action ) property [jvm] Content open override fun property (p0: String ): Any ? setActions [jvm] Content open override fun setActions (p0: MutableList >) setDependsOn [jvm] Content open override fun setDependsOn (p0: MutableIterable <*>) setDescription [jvm] Content open override fun setDescription (p0: String ?) setDidWork [jvm] Content open override fun setDidWork (p0: Boolean ) setEnabled [jvm] Content open override fun setEnabled (p0: Boolean ) setExcludes [jvm] Content open override fun setExcludes (p0: MutableIterable < String >): SourceTask setFinalizedBy [jvm] Content open override fun setFinalizedBy (p0: MutableIterable <*>) setGroup [jvm] Content open override fun setGroup (p0: String ?) setImpliesSubProjects [jvm] Content open override fun setImpliesSubProjects (p0: Boolean ) setIncludes [jvm] Content open override fun setIncludes (p0: MutableIterable < String >): SourceTask setMustRunAfter [jvm] Content open override fun setMustRunAfter (p0: MutableIterable <*>) setOnlyIf [jvm] Content open override fun setOnlyIf (p0: Closure< Any >) open override fun setOnlyIf (p0: Spec ) setProperty [jvm] Content open override fun setProperty (p0: String , p1: Any ) setShouldRunAfter [jvm] Content open override fun setShouldRunAfter (p0: MutableIterable <*>) setSource [jvm] Content open fun setSource (p0: Any ) open fun setSource (p0: FileTree) shouldRunAfter [jvm] Content open override fun shouldRunAfter (vararg p0: Any ): TaskDependency source [jvm] Content open fun source (vararg p0: Any ): SourceTask usesService [jvm] Content open override fun usesService (p0: Provider<out BuildService<*>>) verifyMigrations [jvm] Content fun verifyMigrations ()","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/#properties","text":"Name Summary compilationUnit [jvm] lateinit var compilationUnit : SqlDelightCompilationUnitImpl pluginVersion [jvm] @Input() val pluginVersion : String projectName [jvm] @Input() val projectName : Property< String > properties [jvm] lateinit var properties : SqlDelightDatabasePropertiesImpl verifyMigrations [jvm] @Input() var verifyMigrations : Boolean = false workingDirectory [jvm] @Internal() lateinit var workingDirectory : File Directory where the database files are copied for the migration scripts to run against.","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-task/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / VerifyMigrationTask VerifyMigrationTask [jvm] Content fun VerifyMigrationTask ()","title":"VerifyMigrationTask   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-task/#verifymigrationtask","text":"[jvm] Content fun VerifyMigrationTask ()","title":"VerifyMigrationTask"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/compilation-unit/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / compilationUnit compilationUnit [jvm] Content lateinit var compilationUnit : SqlDelightCompilationUnitImpl","title":"compilationUnit   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/compilation-unit/#compilationunit","text":"[jvm] Content lateinit var compilationUnit : SqlDelightCompilationUnitImpl","title":"compilationUnit"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/get-source/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / getSource getSource [jvm] Content @InputFiles() @SkipWhenEmpty() @PathSensitive(value = PathSensitivity.RELATIVE) open override fun getSource (): FileTree","title":"getSource   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/get-source/#getsource","text":"[jvm] Content @InputFiles() @SkipWhenEmpty() @PathSensitive(value = PathSensitivity.RELATIVE) open override fun getSource (): FileTree","title":"getSource"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/plugin-version/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / pluginVersion pluginVersion [jvm] Content @Input() val pluginVersion : String","title":"pluginVersion   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/plugin-version/#pluginversion","text":"[jvm] Content @Input() val pluginVersion : String","title":"pluginVersion"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/project-name/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / projectName projectName [jvm] Content @Input() val projectName : Property< String >","title":"projectName   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/project-name/#projectname","text":"[jvm] Content @Input() val projectName : Property< String >","title":"projectName"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/properties/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / properties properties [jvm] Content lateinit var properties : SqlDelightDatabasePropertiesImpl","title":"properties   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/properties/#properties","text":"[jvm] Content lateinit var properties : SqlDelightDatabasePropertiesImpl","title":"properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/verify-migrations/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / verifyMigrations verifyMigrations [jvm] Content fun verifyMigrations () @Input() var verifyMigrations : Boolean = false","title":"verifyMigrations   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/verify-migrations/#verifymigrations","text":"[jvm] Content fun verifyMigrations () @Input() var verifyMigrations : Boolean = false","title":"verifyMigrations"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/working-directory/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / workingDirectory workingDirectory [jvm] Content @Internal() lateinit var workingDirectory : File More info Directory where the database files are copied for the migration scripts to run against.","title":"workingDirectory   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/working-directory/#workingdirectory","text":"[jvm] Content @Internal() lateinit var workingDirectory : File More info Directory where the database files are copied for the migration scripts to run against.","title":"workingDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-action/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / VerifyMigrationAction VerifyMigrationAction [jvm] abstract class VerifyMigrationAction : WorkAction< VerifyMigrationTask.VerifyMigrationWorkParameters > Functions Name Summary execute [jvm] Content open override fun execute () getParameters [jvm] Content @Inject() abstract fun getParameters (): VerifyMigrationTask.VerifyMigrationWorkParameters","title":"VerifyMigrationAction   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-action/#verifymigrationaction","text":"[jvm] abstract class VerifyMigrationAction : WorkAction< VerifyMigrationTask.VerifyMigrationWorkParameters >","title":"VerifyMigrationAction"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-action/#functions","text":"Name Summary execute [jvm] Content open override fun execute () getParameters [jvm] Content @Inject() abstract fun getParameters (): VerifyMigrationTask.VerifyMigrationWorkParameters","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-action/-verify-migration-action/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / VerifyMigrationAction / VerifyMigrationAction VerifyMigrationAction [jvm] Content fun VerifyMigrationAction ()","title":"VerifyMigrationAction   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-action/-verify-migration-action/#verifymigrationaction","text":"[jvm] Content fun VerifyMigrationAction ()","title":"VerifyMigrationAction"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-action/execute/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / VerifyMigrationAction / execute execute [jvm] Content open override fun execute ()","title":"execute   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-action/execute/#execute","text":"[jvm] Content open override fun execute ()","title":"execute"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-work-parameters/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / VerifyMigrationWorkParameters VerifyMigrationWorkParameters [jvm] interface VerifyMigrationWorkParameters : WorkParameters Properties Name Summary compilationUnit [jvm] abstract val compilationUnit : Property projectName [jvm] abstract val projectName : Property< String > properties [jvm] abstract val properties : Property verifyMigrations [jvm] abstract val verifyMigrations : Property< Boolean > workingDirectory [jvm] abstract val workingDirectory : DirectoryProperty","title":"VerifyMigrationWorkParameters   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-work-parameters/#verifymigrationworkparameters","text":"[jvm] interface VerifyMigrationWorkParameters : WorkParameters","title":"VerifyMigrationWorkParameters"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-work-parameters/#properties","text":"Name Summary compilationUnit [jvm] abstract val compilationUnit : Property projectName [jvm] abstract val projectName : Property< String > properties [jvm] abstract val properties : Property verifyMigrations [jvm] abstract val verifyMigrations : Property< Boolean > workingDirectory [jvm] abstract val workingDirectory : DirectoryProperty","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-work-parameters/compilation-unit/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / VerifyMigrationWorkParameters / compilationUnit compilationUnit [jvm] Content abstract val compilationUnit : Property","title":"compilationUnit   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-work-parameters/compilation-unit/#compilationunit","text":"[jvm] Content abstract val compilationUnit : Property","title":"compilationUnit"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-work-parameters/project-name/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / VerifyMigrationWorkParameters / projectName projectName [jvm] Content abstract val projectName : Property< String >","title":"projectName   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-work-parameters/project-name/#projectname","text":"[jvm] Content abstract val projectName : Property< String >","title":"projectName"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-work-parameters/properties/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / VerifyMigrationWorkParameters / properties properties [jvm] Content abstract val properties : Property","title":"properties   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-work-parameters/properties/#properties","text":"[jvm] Content abstract val properties : Property","title":"properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-work-parameters/verify-migrations/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / VerifyMigrationWorkParameters / verifyMigrations verifyMigrations [jvm] Content abstract val verifyMigrations : Property< Boolean >","title":"verifyMigrations   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-work-parameters/verify-migrations/#verifymigrations","text":"[jvm] Content abstract val verifyMigrations : Property< Boolean >","title":"verifyMigrations"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-work-parameters/working-directory/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / VerifyMigrationWorkParameters / workingDirectory workingDirectory [jvm] Content abstract val workingDirectory : DirectoryProperty","title":"workingDirectory   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-verify-migration-work-parameters/working-directory/#workingdirectory","text":"[jvm] Content abstract val workingDirectory : DirectoryProperty","title":"workingDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle.kotlin/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle.kotlin Package com.squareup.sqldelight.gradle.kotlin Functions Name Summary linkSqlite [jvm] Content fun Project. linkSqlite ()","title":"Package com.squareup.sqldelight.gradle.kotlin   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle.kotlin/#package-comsquareupsqldelightgradlekotlin","text":"","title":"Package com.squareup.sqldelight.gradle.kotlin"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle.kotlin/#functions","text":"Name Summary linkSqlite [jvm] Content fun Project. linkSqlite ()","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle.kotlin/link-sqlite/","text":"// sqldelight-gradle-plugin / com.squareup.sqldelight.gradle.kotlin / linkSqlite linkSqlite [jvm] Content fun Project. linkSqlite ()","title":"linkSqlite   - SQLDelight"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle.kotlin/link-sqlite/#linksqlite","text":"[jvm] Content fun Project. linkSqlite ()","title":"linkSqlite"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/","text":"// sqlite-driver / com.squareup.sqldelight.sqlite.driver Package com.squareup.sqldelight.sqlite.driver Types Name Summary JdbcSqliteDriver [jvm] Content class JdbcSqliteDriver ( url : String , properties : Properties ) : JdbcDriver, ConnectionManager","title":"Package com.squareup.sqldelight.sqlite.driver   - SQLDelight"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/#package-comsquareupsqldelightsqlitedriver","text":"","title":"Package com.squareup.sqldelight.sqlite.driver"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/#types","text":"Name Summary JdbcSqliteDriver [jvm] Content class JdbcSqliteDriver ( url : String , properties : Properties ) : JdbcDriver, ConnectionManager","title":"Types"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/","text":"// sqlite-driver / com.squareup.sqldelight.sqlite.driver / JdbcSqliteDriver JdbcSqliteDriver [jvm] class JdbcSqliteDriver ( url : String , properties : Properties ) : JdbcDriver, ConnectionManager Types Name Summary Companion [jvm] Content object Companion Functions Name Summary beginTransaction [jvm] Content open override fun Connection . beginTransaction () close [jvm] Content open override fun close () closeConnection [jvm] Content open override fun closeConnection (connection: Connection ) currentTransaction [jvm] Content open override fun currentTransaction (): Transacter.Transaction? endTransaction [jvm] Content open override fun Connection . endTransaction () execute [jvm] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?) executeQuery [jvm] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor getConnection [jvm] Content open override fun getConnection (): Connection newTransaction [jvm] Content open override fun newTransaction (): Transacter.Transaction rollbackTransaction [jvm] Content open override fun Connection . rollbackTransaction () Properties Name Summary transaction [jvm] open override var transaction : ConnectionManager.Transaction?","title":"JdbcSqliteDriver   - SQLDelight"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/#jdbcsqlitedriver","text":"[jvm] class JdbcSqliteDriver ( url : String , properties : Properties ) : JdbcDriver, ConnectionManager","title":"JdbcSqliteDriver"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/#functions","text":"Name Summary beginTransaction [jvm] Content open override fun Connection . beginTransaction () close [jvm] Content open override fun close () closeConnection [jvm] Content open override fun closeConnection (connection: Connection ) currentTransaction [jvm] Content open override fun currentTransaction (): Transacter.Transaction? endTransaction [jvm] Content open override fun Connection . endTransaction () execute [jvm] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?) executeQuery [jvm] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor getConnection [jvm] Content open override fun getConnection (): Connection newTransaction [jvm] Content open override fun newTransaction (): Transacter.Transaction rollbackTransaction [jvm] Content open override fun Connection . rollbackTransaction ()","title":"Functions"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/#properties","text":"Name Summary transaction [jvm] open override var transaction : ConnectionManager.Transaction?","title":"Properties"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/-jdbc-sqlite-driver/","text":"// sqlite-driver / com.squareup.sqldelight.sqlite.driver / JdbcSqliteDriver / JdbcSqliteDriver JdbcSqliteDriver [jvm] Content fun JdbcSqliteDriver (url: String , properties: Properties = Properties())","title":"JdbcSqliteDriver   - SQLDelight"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/-jdbc-sqlite-driver/#jdbcsqlitedriver","text":"[jvm] Content fun JdbcSqliteDriver (url: String , properties: Properties = Properties())","title":"JdbcSqliteDriver"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/-companion/","text":"// sqlite-driver / com.squareup.sqldelight.sqlite.driver / JdbcSqliteDriver / Companion Companion [jvm] object Companion Properties Name Summary IN_MEMORY [jvm] const val IN_MEMORY : String","title":"Companion   - SQLDelight"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/-companion/#properties","text":"Name Summary IN_MEMORY [jvm] const val IN_MEMORY : String","title":"Properties"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/-companion/-i-n_-m-e-m-o-r-y/","text":"// sqlite-driver / com.squareup.sqldelight.sqlite.driver / JdbcSqliteDriver / Companion / IN_MEMORY IN_MEMORY [jvm] Content const val IN_MEMORY : String","title":"IN_MEMORY   - SQLDelight"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/-companion/-i-n_-m-e-m-o-r-y/#in_memory","text":"[jvm] Content const val IN_MEMORY : String","title":"IN_MEMORY"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/","text":"// sqlite-migrations / com.squareup.sqlite.migrations Package com.squareup.sqlite.migrations Types Name Summary CatalogDatabase [jvm] Content class CatalogDatabase : Database Database [jvm] Content abstract class Database DatabaseComparator [jvm] Content interface DatabaseComparator < T : Database > DatabaseDiff [jvm] Content interface DatabaseDiff ObjectDifferDatabaseComparator [jvm] Content class ObjectDifferDatabaseComparator ( circularReferenceExceptionLogger : ( String ) -> Unit ?) : DatabaseComparator < CatalogDatabase > ObjectDifferDatabaseDiff [jvm] Content class ObjectDifferDatabaseDiff ( diff : DiffNode) : DatabaseDiff Functions Name Summary findDatabaseFiles [jvm] Content fun Sequence < File >. findDatabaseFiles (): Sequence < File >","title":"Package com.squareup.sqlite.migrations   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/#package-comsquareupsqlitemigrations","text":"","title":"Package com.squareup.sqlite.migrations"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/#types","text":"Name Summary CatalogDatabase [jvm] Content class CatalogDatabase : Database Database [jvm] Content abstract class Database DatabaseComparator [jvm] Content interface DatabaseComparator < T : Database > DatabaseDiff [jvm] Content interface DatabaseDiff ObjectDifferDatabaseComparator [jvm] Content class ObjectDifferDatabaseComparator ( circularReferenceExceptionLogger : ( String ) -> Unit ?) : DatabaseComparator < CatalogDatabase > ObjectDifferDatabaseDiff [jvm] Content class ObjectDifferDatabaseDiff ( diff : DiffNode) : DatabaseDiff","title":"Types"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/#functions","text":"Name Summary findDatabaseFiles [jvm] Content fun Sequence < File >. findDatabaseFiles (): Sequence < File >","title":"Functions"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/find-database-files/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / findDatabaseFiles findDatabaseFiles [jvm] Content fun Sequence < File >. findDatabaseFiles (): Sequence < File >","title":"findDatabaseFiles   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/find-database-files/#finddatabasefiles","text":"[jvm] Content fun Sequence < File >. findDatabaseFiles (): Sequence < File >","title":"findDatabaseFiles"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-catalog-database/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / CatalogDatabase CatalogDatabase [jvm] class CatalogDatabase : Database Types Name Summary Companion [jvm] Content object Companion","title":"CatalogDatabase   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-catalog-database/#catalogdatabase","text":"[jvm] class CatalogDatabase : Database","title":"CatalogDatabase"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-catalog-database/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-catalog-database/-companion/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / CatalogDatabase / Companion Companion [jvm] object Companion Functions Name Summary fromFile [jvm] Content fun fromFile (path: String , initStatements: List < String >): CatalogDatabase withInitStatements [jvm] Content fun withInitStatements (initStatements: List < String >): CatalogDatabase","title":"Companion   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-catalog-database/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-catalog-database/-companion/#functions","text":"Name Summary fromFile [jvm] Content fun fromFile (path: String , initStatements: List < String >): CatalogDatabase withInitStatements [jvm] Content fun withInitStatements (initStatements: List < String >): CatalogDatabase","title":"Functions"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-catalog-database/-companion/from-file/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / CatalogDatabase / Companion / fromFile fromFile [jvm] Content fun fromFile (path: String , initStatements: List < String >): CatalogDatabase","title":"fromFile   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-catalog-database/-companion/from-file/#fromfile","text":"[jvm] Content fun fromFile (path: String , initStatements: List < String >): CatalogDatabase","title":"fromFile"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-catalog-database/-companion/with-init-statements/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / CatalogDatabase / Companion / withInitStatements withInitStatements [jvm] Content fun withInitStatements (initStatements: List < String >): CatalogDatabase","title":"withInitStatements   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-catalog-database/-companion/with-init-statements/#withinitstatements","text":"[jvm] Content fun withInitStatements (initStatements: List < String >): CatalogDatabase","title":"withInitStatements"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / Database Database [jvm] abstract class Database Inheritors Name CatalogDatabase","title":"Database   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database/#database","text":"[jvm] abstract class Database","title":"Database"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database/#inheritors","text":"Name CatalogDatabase","title":"Inheritors"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database/-database/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / Database / Database Database [jvm] Content fun Database ()","title":"Database   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database/-database/#database","text":"[jvm] Content fun Database ()","title":"Database"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-comparator/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / DatabaseComparator DatabaseComparator [jvm] interface DatabaseComparator < T : Database > Functions Name Summary compare [jvm] Content abstract fun compare (db1: T , db2: T ): DatabaseDiff Inheritors Name ObjectDifferDatabaseComparator","title":"DatabaseComparator   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-comparator/#databasecomparator","text":"[jvm] interface DatabaseComparator < T : Database >","title":"DatabaseComparator"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-comparator/#functions","text":"Name Summary compare [jvm] Content abstract fun compare (db1: T , db2: T ): DatabaseDiff","title":"Functions"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-comparator/#inheritors","text":"Name ObjectDifferDatabaseComparator","title":"Inheritors"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-comparator/compare/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / DatabaseComparator / compare compare [jvm] Content abstract fun compare (db1: T , db2: T ): DatabaseDiff","title":"compare   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-comparator/compare/#compare","text":"[jvm] Content abstract fun compare (db1: T , db2: T ): DatabaseDiff","title":"compare"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-diff/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / DatabaseDiff DatabaseDiff [jvm] interface DatabaseDiff Functions Name Summary printTo [jvm] Content abstract fun printTo (out: Appendable ) Inheritors Name ObjectDifferDatabaseDiff","title":"DatabaseDiff   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-diff/#databasediff","text":"[jvm] interface DatabaseDiff","title":"DatabaseDiff"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-diff/#functions","text":"Name Summary printTo [jvm] Content abstract fun printTo (out: Appendable )","title":"Functions"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-diff/#inheritors","text":"Name ObjectDifferDatabaseDiff","title":"Inheritors"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-diff/print-to/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / DatabaseDiff / printTo printTo [jvm] Content abstract fun printTo (out: Appendable )","title":"printTo   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-diff/print-to/#printto","text":"[jvm] Content abstract fun printTo (out: Appendable )","title":"printTo"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-comparator/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / ObjectDifferDatabaseComparator ObjectDifferDatabaseComparator [jvm] class ObjectDifferDatabaseComparator ( circularReferenceExceptionLogger : ( String ) -> Unit ?) : DatabaseComparator < CatalogDatabase > Functions Name Summary compare [jvm] Content open override fun compare (db1: CatalogDatabase , db2: CatalogDatabase ): DatabaseDiff","title":"ObjectDifferDatabaseComparator   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-comparator/#objectdifferdatabasecomparator","text":"[jvm] class ObjectDifferDatabaseComparator ( circularReferenceExceptionLogger : ( String ) -> Unit ?) : DatabaseComparator < CatalogDatabase >","title":"ObjectDifferDatabaseComparator"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-comparator/#functions","text":"Name Summary compare [jvm] Content open override fun compare (db1: CatalogDatabase , db2: CatalogDatabase ): DatabaseDiff","title":"Functions"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-comparator/-object-differ-database-comparator/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / ObjectDifferDatabaseComparator / ObjectDifferDatabaseComparator ObjectDifferDatabaseComparator [jvm] Content fun ObjectDifferDatabaseComparator (circularReferenceExceptionLogger: ( String ) -> Unit ? = null)","title":"ObjectDifferDatabaseComparator   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-comparator/-object-differ-database-comparator/#objectdifferdatabasecomparator","text":"[jvm] Content fun ObjectDifferDatabaseComparator (circularReferenceExceptionLogger: ( String ) -> Unit ? = null)","title":"ObjectDifferDatabaseComparator"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-comparator/compare/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / ObjectDifferDatabaseComparator / compare compare [jvm] Content open override fun compare (db1: CatalogDatabase , db2: CatalogDatabase ): DatabaseDiff","title":"compare   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-comparator/compare/#compare","text":"[jvm] Content open override fun compare (db1: CatalogDatabase , db2: CatalogDatabase ): DatabaseDiff","title":"compare"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / ObjectDifferDatabaseDiff ObjectDifferDatabaseDiff [jvm] class ObjectDifferDatabaseDiff ( diff : DiffNode) : DatabaseDiff Functions Name Summary printTo [jvm] Content open override fun printTo (out: Appendable ) toString [jvm] Content open override fun toString (): String","title":"ObjectDifferDatabaseDiff   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/#objectdifferdatabasediff","text":"[jvm] class ObjectDifferDatabaseDiff ( diff : DiffNode) : DatabaseDiff","title":"ObjectDifferDatabaseDiff"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/#functions","text":"Name Summary printTo [jvm] Content open override fun printTo (out: Appendable ) toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/-object-differ-database-diff/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / ObjectDifferDatabaseDiff / ObjectDifferDatabaseDiff ObjectDifferDatabaseDiff [jvm] Content fun ObjectDifferDatabaseDiff (diff: DiffNode)","title":"ObjectDifferDatabaseDiff   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/-object-differ-database-diff/#objectdifferdatabasediff","text":"[jvm] Content fun ObjectDifferDatabaseDiff (diff: DiffNode)","title":"ObjectDifferDatabaseDiff"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/print-to/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / ObjectDifferDatabaseDiff / printTo printTo [jvm] Content open override fun printTo (out: Appendable )","title":"printTo   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/print-to/#printto","text":"[jvm] Content open override fun printTo (out: Appendable )","title":"printTo"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/to-string/","text":"// sqlite-migrations / com.squareup.sqlite.migrations / ObjectDifferDatabaseDiff / toString toString [jvm] Content open override fun toString (): String","title":"toString   - SQLDelight"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs Package com.squareup.sqldelight.drivers.sqljs Types Name Summary Buffer [js] Content external interface Buffer Config [js] Content external interface Config Database [js] Content open external class Database InitDatabaseJsStatic [js] Content external interface InitDatabaseJsStatic InitSqlJsStatic [js] Content external interface InitSqlJsStatic InitStatementJsStatic [js] Content external interface InitStatementJsStatic JsSqlDriver [js] Content class JsSqlDriver ( db : Database ) : SqlDriver ParamsCallback [js] Content external interface ParamsCallback ParamsObject [js] Content external interface ParamsObject QueryResults [js] Content external interface QueryResults SqlJsStatic [js] Content external interface SqlJsStatic Statement [js] Content open external class Statement Functions Name Summary createInstance [js] Content fun createInstance (type: dynamic, vararg args: dynamic): dynamic driver [js] Content fun Promise < Database >. driver (): Promise initDb [js] Content fun initDb (config: Config ? = js(\"{}\")): Promise < Database > initSqlDriver [js] Content fun initSqlDriver (schema: SqlDriver.Schema? = null): Promise invoke [js] Content operator fun InitDatabaseJsStatic . invoke (): Database operator fun InitSqlJsStatic . invoke (): Promise < SqlJsStatic > operator fun InitStatementJsStatic . invoke (): Statement operator fun InitDatabaseJsStatic . invoke (data: Array < Number >): Database operator fun InitDatabaseJsStatic . invoke (data: Uint8Array ): Database operator fun InitSqlJsStatic . invoke (config: Config ?): Promise < SqlJsStatic > transacter [js] Content fun Promise . transacter (): Promise withSchema [js] Content fun Promise . withSchema (schema: SqlDriver.Schema? = null): Promise Properties Name Summary initSqlJs [js] external val initSqlJs : InitSqlJsStatic","title":"Package com.squareup.sqldelight.drivers.sqljs   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/#package-comsquareupsqldelightdriverssqljs","text":"","title":"Package com.squareup.sqldelight.drivers.sqljs"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/#types","text":"Name Summary Buffer [js] Content external interface Buffer Config [js] Content external interface Config Database [js] Content open external class Database InitDatabaseJsStatic [js] Content external interface InitDatabaseJsStatic InitSqlJsStatic [js] Content external interface InitSqlJsStatic InitStatementJsStatic [js] Content external interface InitStatementJsStatic JsSqlDriver [js] Content class JsSqlDriver ( db : Database ) : SqlDriver ParamsCallback [js] Content external interface ParamsCallback ParamsObject [js] Content external interface ParamsObject QueryResults [js] Content external interface QueryResults SqlJsStatic [js] Content external interface SqlJsStatic Statement [js] Content open external class Statement","title":"Types"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/#functions","text":"Name Summary createInstance [js] Content fun createInstance (type: dynamic, vararg args: dynamic): dynamic driver [js] Content fun Promise < Database >. driver (): Promise initDb [js] Content fun initDb (config: Config ? = js(\"{}\")): Promise < Database > initSqlDriver [js] Content fun initSqlDriver (schema: SqlDriver.Schema? = null): Promise invoke [js] Content operator fun InitDatabaseJsStatic . invoke (): Database operator fun InitSqlJsStatic . invoke (): Promise < SqlJsStatic > operator fun InitStatementJsStatic . invoke (): Statement operator fun InitDatabaseJsStatic . invoke (data: Array < Number >): Database operator fun InitDatabaseJsStatic . invoke (data: Uint8Array ): Database operator fun InitSqlJsStatic . invoke (config: Config ?): Promise < SqlJsStatic > transacter [js] Content fun Promise . transacter (): Promise withSchema [js] Content fun Promise . withSchema (schema: SqlDriver.Schema? = null): Promise","title":"Functions"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/#properties","text":"Name Summary initSqlJs [js] external val initSqlJs : InitSqlJsStatic","title":"Properties"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/create-instance/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / createInstance createInstance [js] Content fun createInstance (type: dynamic, vararg args: dynamic): dynamic","title":"createInstance   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/create-instance/#createinstance","text":"[js] Content fun createInstance (type: dynamic, vararg args: dynamic): dynamic","title":"createInstance"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/driver/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / driver driver [js] Content fun Promise < Database >. driver (): Promise","title":"driver   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/driver/#driver","text":"[js] Content fun Promise < Database >. driver (): Promise","title":"driver"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/init-db/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / initDb initDb [js] Content fun initDb (config: Config ? = js(\"{}\")): Promise < Database >","title":"initDb   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/init-db/#initdb","text":"[js] Content fun initDb (config: Config ? = js(\"{}\")): Promise < Database >","title":"initDb"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/init-sql-driver/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / initSqlDriver initSqlDriver [js] Content fun initSqlDriver (schema: SqlDriver.Schema? = null): Promise","title":"initSqlDriver   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/init-sql-driver/#initsqldriver","text":"[js] Content fun initSqlDriver (schema: SqlDriver.Schema? = null): Promise","title":"initSqlDriver"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/init-sql-js/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / initSqlJs initSqlJs [js] Content external val initSqlJs : InitSqlJsStatic","title":"initSqlJs   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/init-sql-js/#initsqljs","text":"[js] Content external val initSqlJs : InitSqlJsStatic","title":"initSqlJs"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/invoke/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / invoke invoke [js] Content operator fun InitStatementJsStatic . invoke (): Statement operator fun InitDatabaseJsStatic . invoke (): Database operator fun InitDatabaseJsStatic . invoke (data: Array < Number >): Database operator fun InitDatabaseJsStatic . invoke (data: Uint8Array ): Database operator fun InitSqlJsStatic . invoke (): Promise < SqlJsStatic > operator fun InitSqlJsStatic . invoke (config: Config ?): Promise < SqlJsStatic >","title":"invoke   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/invoke/#invoke","text":"[js] Content operator fun InitStatementJsStatic . invoke (): Statement operator fun InitDatabaseJsStatic . invoke (): Database operator fun InitDatabaseJsStatic . invoke (data: Array < Number >): Database operator fun InitDatabaseJsStatic . invoke (data: Uint8Array ): Database operator fun InitSqlJsStatic . invoke (): Promise < SqlJsStatic > operator fun InitSqlJsStatic . invoke (config: Config ?): Promise < SqlJsStatic >","title":"invoke"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/transacter/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / transacter transacter [js] Content fun Promise . transacter (): Promise","title":"transacter   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/transacter/#transacter","text":"[js] Content fun Promise . transacter (): Promise","title":"transacter"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/with-schema/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / withSchema withSchema [js] Content fun Promise . withSchema (schema: SqlDriver.Schema? = null): Promise","title":"withSchema   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/with-schema/#withschema","text":"[js] Content fun Promise . withSchema (schema: SqlDriver.Schema? = null): Promise","title":"withSchema"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-buffer/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Buffer Buffer [js] external interface Buffer","title":"Buffer   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-buffer/#buffer","text":"[js] external interface Buffer","title":"Buffer"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-config/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Config Config [js] external interface Config","title":"Config   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-config/#config","text":"[js] external interface Config","title":"Config"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Database Database [js] open external class Database Constructors Database [js] fun Database (data: Buffer ?) Database [js] fun Database (data: Uint8Array ?) Database [js] fun Database (data: Array < Number >?) Functions Name Summary close [js] Content open fun close () create_function [js] Content open fun create_function (name: String , func: Function <*>) each [js] Content open fun each (sql: String , callback: ParamsCallback , done: () -> Unit ) open fun each (sql: String , params: ParamsObject , callback: ParamsCallback , done: () -> Unit ) open fun each (sql: String , params: Array , callback: ParamsCallback , done: () -> Unit ) exec [js] Content open fun exec (sql: String ): Array < QueryResults > export [js] Content open fun export (): Uint8Array getRowsModified [js] Content open fun getRowsModified (): Number prepare [js] Content open fun prepare (sql: String ): Statement open fun prepare (sql: String , params: ParamsObject ): Statement open fun prepare (sql: String , params: Array ): Statement run [js] Content open fun run (sql: String ): Database open fun run (sql: String , params: ParamsObject ): Database open fun run (sql: String , params: Array ): Database","title":"Database   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/#database","text":"[js] open external class Database","title":"Database"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/#constructors","text":"Database [js] fun Database (data: Buffer ?) Database [js] fun Database (data: Uint8Array ?) Database [js] fun Database (data: Array < Number >?)","title":"Constructors"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/#functions","text":"Name Summary close [js] Content open fun close () create_function [js] Content open fun create_function (name: String , func: Function <*>) each [js] Content open fun each (sql: String , callback: ParamsCallback , done: () -> Unit ) open fun each (sql: String , params: ParamsObject , callback: ParamsCallback , done: () -> Unit ) open fun each (sql: String , params: Array , callback: ParamsCallback , done: () -> Unit ) exec [js] Content open fun exec (sql: String ): Array < QueryResults > export [js] Content open fun export (): Uint8Array getRowsModified [js] Content open fun getRowsModified (): Number prepare [js] Content open fun prepare (sql: String ): Statement open fun prepare (sql: String , params: ParamsObject ): Statement open fun prepare (sql: String , params: Array ): Statement run [js] Content open fun run (sql: String ): Database open fun run (sql: String , params: ParamsObject ): Database open fun run (sql: String , params: Array ): Database","title":"Functions"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/-database/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Database / Database Database [js] Content fun Database (data: Buffer ?) fun Database (data: Uint8Array ?) fun Database (data: Array < Number >?) fun Database ()","title":"Database   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/-database/#database","text":"[js] Content fun Database (data: Buffer ?) fun Database (data: Uint8Array ?) fun Database (data: Array < Number >?) fun Database ()","title":"Database"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/close/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Database / close close [js] Content open fun close ()","title":"close   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/close/#close","text":"[js] Content open fun close ()","title":"close"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/create_function/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Database / create_function create_function [js] Content open fun create_function (name: String , func: Function <*>)","title":"create_function   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/create_function/#create_function","text":"[js] Content open fun create_function (name: String , func: Function <*>)","title":"create_function"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/each/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Database / each each [js] Content open fun each (sql: String , callback: ParamsCallback , done: () -> Unit ) open fun each (sql: String , params: ParamsObject , callback: ParamsCallback , done: () -> Unit ) open fun each (sql: String , params: Array , callback: ParamsCallback , done: () -> Unit )","title":"each   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/each/#each","text":"[js] Content open fun each (sql: String , callback: ParamsCallback , done: () -> Unit ) open fun each (sql: String , params: ParamsObject , callback: ParamsCallback , done: () -> Unit ) open fun each (sql: String , params: Array , callback: ParamsCallback , done: () -> Unit )","title":"each"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/exec/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Database / exec exec [js] Content open fun exec (sql: String ): Array < QueryResults >","title":"exec   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/exec/#exec","text":"[js] Content open fun exec (sql: String ): Array < QueryResults >","title":"exec"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/export/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Database / export export [js] Content open fun export (): Uint8Array","title":"export   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/export/#export","text":"[js] Content open fun export (): Uint8Array","title":"export"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/get-rows-modified/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Database / getRowsModified getRowsModified [js] Content open fun getRowsModified (): Number","title":"getRowsModified   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/get-rows-modified/#getrowsmodified","text":"[js] Content open fun getRowsModified (): Number","title":"getRowsModified"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/prepare/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Database / prepare prepare [js] Content open fun prepare (sql: String ): Statement open fun prepare (sql: String , params: ParamsObject ): Statement open fun prepare (sql: String , params: Array ): Statement","title":"prepare   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/prepare/#prepare","text":"[js] Content open fun prepare (sql: String ): Statement open fun prepare (sql: String , params: ParamsObject ): Statement open fun prepare (sql: String , params: Array ): Statement","title":"prepare"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/run/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Database / run run [js] Content open fun run (sql: String ): Database open fun run (sql: String , params: ParamsObject ): Database open fun run (sql: String , params: Array ): Database","title":"run   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-database/run/#run","text":"[js] Content open fun run (sql: String ): Database open fun run (sql: String , params: ParamsObject ): Database open fun run (sql: String , params: Array ): Database","title":"run"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-init-database-js-static/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / InitDatabaseJsStatic InitDatabaseJsStatic [js] external interface InitDatabaseJsStatic Extensions Name Summary invoke [js] Content operator fun InitDatabaseJsStatic . invoke (): Database operator fun InitDatabaseJsStatic . invoke (data: Array < Number >): Database operator fun InitDatabaseJsStatic . invoke (data: Uint8Array ): Database","title":"InitDatabaseJsStatic   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-init-database-js-static/#initdatabasejsstatic","text":"[js] external interface InitDatabaseJsStatic","title":"InitDatabaseJsStatic"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-init-database-js-static/#extensions","text":"Name Summary invoke [js] Content operator fun InitDatabaseJsStatic . invoke (): Database operator fun InitDatabaseJsStatic . invoke (data: Array < Number >): Database operator fun InitDatabaseJsStatic . invoke (data: Uint8Array ): Database","title":"Extensions"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-init-sql-js-static/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / InitSqlJsStatic InitSqlJsStatic [js] external interface InitSqlJsStatic Properties Name Summary default [js] abstract var default : InitSqlJsStatic Extensions Name Summary invoke [js] Content operator fun InitSqlJsStatic . invoke (): Promise < SqlJsStatic > operator fun InitSqlJsStatic . invoke (config: Config ?): Promise < SqlJsStatic >","title":"InitSqlJsStatic   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-init-sql-js-static/#initsqljsstatic","text":"[js] external interface InitSqlJsStatic","title":"InitSqlJsStatic"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-init-sql-js-static/#properties","text":"Name Summary default [js] abstract var default : InitSqlJsStatic","title":"Properties"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-init-sql-js-static/#extensions","text":"Name Summary invoke [js] Content operator fun InitSqlJsStatic . invoke (): Promise < SqlJsStatic > operator fun InitSqlJsStatic . invoke (config: Config ?): Promise < SqlJsStatic >","title":"Extensions"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-init-sql-js-static/default/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / InitSqlJsStatic / default default [js] Content abstract var default : InitSqlJsStatic","title":"default   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-init-sql-js-static/default/#default","text":"[js] Content abstract var default : InitSqlJsStatic","title":"default"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-init-statement-js-static/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / InitStatementJsStatic InitStatementJsStatic [js] external interface InitStatementJsStatic Extensions Name Summary invoke [js] Content operator fun InitStatementJsStatic . invoke (): Statement","title":"InitStatementJsStatic   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-init-statement-js-static/#initstatementjsstatic","text":"[js] external interface InitStatementJsStatic","title":"InitStatementJsStatic"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-init-statement-js-static/#extensions","text":"Name Summary invoke [js] Content operator fun InitStatementJsStatic . invoke (): Statement","title":"Extensions"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-js-sql-driver/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / JsSqlDriver JsSqlDriver [js] class JsSqlDriver ( db : Database ) : SqlDriver Functions Name Summary close [js] Content open override fun close () currentTransaction [js] Content open override fun currentTransaction (): Transacter.Transaction? execute [js] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?) executeQuery [js] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor newTransaction [js] Content open override fun newTransaction (): Transacter.Transaction","title":"JsSqlDriver   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-js-sql-driver/#jssqldriver","text":"[js] class JsSqlDriver ( db : Database ) : SqlDriver","title":"JsSqlDriver"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-js-sql-driver/#functions","text":"Name Summary close [js] Content open override fun close () currentTransaction [js] Content open override fun currentTransaction (): Transacter.Transaction? execute [js] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?) executeQuery [js] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor newTransaction [js] Content open override fun newTransaction (): Transacter.Transaction","title":"Functions"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-js-sql-driver/-js-sql-driver/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / JsSqlDriver / JsSqlDriver JsSqlDriver [js] Content fun JsSqlDriver (db: Database )","title":"JsSqlDriver   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-js-sql-driver/-js-sql-driver/#jssqldriver","text":"[js] Content fun JsSqlDriver (db: Database )","title":"JsSqlDriver"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-js-sql-driver/close/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / JsSqlDriver / close close [js] Content open override fun close ()","title":"close   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-js-sql-driver/close/#close","text":"[js] Content open override fun close ()","title":"close"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-js-sql-driver/current-transaction/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / JsSqlDriver / currentTransaction currentTransaction [js] Content open override fun currentTransaction (): Transacter.Transaction?","title":"currentTransaction   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-js-sql-driver/current-transaction/#currenttransaction","text":"[js] Content open override fun currentTransaction (): Transacter.Transaction?","title":"currentTransaction"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-js-sql-driver/execute-query/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / JsSqlDriver / executeQuery executeQuery [js] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor","title":"executeQuery   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-js-sql-driver/execute-query/#executequery","text":"[js] Content open override fun executeQuery (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?): SqlCursor","title":"executeQuery"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-js-sql-driver/execute/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / JsSqlDriver / execute execute [js] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?)","title":"execute   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-js-sql-driver/execute/#execute","text":"[js] Content open override fun execute (identifier: Int ?, sql: String , parameters: Int , binders: SqlPreparedStatement.() -> Unit ?)","title":"execute"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-js-sql-driver/new-transaction/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / JsSqlDriver / newTransaction newTransaction [js] Content open override fun newTransaction (): Transacter.Transaction","title":"newTransaction   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-js-sql-driver/new-transaction/#newtransaction","text":"[js] Content open override fun newTransaction (): Transacter.Transaction","title":"newTransaction"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-params-callback/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / ParamsCallback ParamsCallback [js] external interface ParamsCallback","title":"ParamsCallback   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-params-callback/#paramscallback","text":"[js] external interface ParamsCallback","title":"ParamsCallback"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-params-object/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / ParamsObject ParamsObject [js] external interface ParamsObject","title":"ParamsObject   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-params-object/#paramsobject","text":"[js] external interface ParamsObject","title":"ParamsObject"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-query-results/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / QueryResults QueryResults [js] external interface QueryResults Properties Name Summary columns [js] abstract var columns : Array < String > values [js] abstract var values : Array < Array >","title":"QueryResults   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-query-results/#queryresults","text":"[js] external interface QueryResults","title":"QueryResults"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-query-results/#properties","text":"Name Summary columns [js] abstract var columns : Array < String > values [js] abstract var values : Array < Array >","title":"Properties"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-query-results/columns/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / QueryResults / columns columns [js] Content abstract var columns : Array < String >","title":"columns   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-query-results/columns/#columns","text":"[js] Content abstract var columns : Array < String >","title":"columns"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-query-results/values/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / QueryResults / values values [js] Content abstract var values : Array < Array >","title":"values   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-query-results/values/#values","text":"[js] Content abstract var values : Array < Array >","title":"values"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-sql-js-static/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / SqlJsStatic SqlJsStatic [js] external interface SqlJsStatic Properties Name Summary Database [js] abstract var Database : InitDatabaseJsStatic Statement [js] abstract var Statement : InitStatementJsStatic","title":"SqlJsStatic   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-sql-js-static/#sqljsstatic","text":"[js] external interface SqlJsStatic","title":"SqlJsStatic"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-sql-js-static/#properties","text":"Name Summary Database [js] abstract var Database : InitDatabaseJsStatic Statement [js] abstract var Statement : InitStatementJsStatic","title":"Properties"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-sql-js-static/-database/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / SqlJsStatic / Database Database [js] Content abstract var Database : InitDatabaseJsStatic","title":"Database   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-sql-js-static/-database/#database","text":"[js] Content abstract var Database : InitDatabaseJsStatic","title":"Database"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-sql-js-static/-statement/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / SqlJsStatic / Statement Statement [js] Content abstract var Statement : InitStatementJsStatic","title":"Statement   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-sql-js-static/-statement/#statement","text":"[js] Content abstract var Statement : InitStatementJsStatic","title":"Statement"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Statement Statement [js] open external class Statement Functions Name Summary bind [js] Content open fun bind (): Boolean open fun bind (values: ParamsObject ): Boolean open fun bind (values: Array ): Boolean free [js] Content open fun free (): Boolean freemem [js] Content open fun freemem () get [js] Content open fun get (): Array open fun get (params: ParamsObject ): Array open fun get (params: Array ): Array getAsObject [js] Content open fun getAsObject (): ParamsObject open fun getAsObject (params: ParamsObject ): ParamsObject open fun getAsObject (params: Array ): ParamsObject getColumnNames [js] Content open fun getColumnNames (): Array < String > reset [js] Content open fun reset () run [js] Content open fun run () open fun run (values: ParamsObject ) open fun run (values: Array ) step [js] Content open fun step (): Boolean","title":"Statement   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/#statement","text":"[js] open external class Statement","title":"Statement"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/#functions","text":"Name Summary bind [js] Content open fun bind (): Boolean open fun bind (values: ParamsObject ): Boolean open fun bind (values: Array ): Boolean free [js] Content open fun free (): Boolean freemem [js] Content open fun freemem () get [js] Content open fun get (): Array open fun get (params: ParamsObject ): Array open fun get (params: Array ): Array getAsObject [js] Content open fun getAsObject (): ParamsObject open fun getAsObject (params: ParamsObject ): ParamsObject open fun getAsObject (params: Array ): ParamsObject getColumnNames [js] Content open fun getColumnNames (): Array < String > reset [js] Content open fun reset () run [js] Content open fun run () open fun run (values: ParamsObject ) open fun run (values: Array ) step [js] Content open fun step (): Boolean","title":"Functions"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/-statement/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Statement / Statement Statement [js] Content fun Statement ()","title":"Statement   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/-statement/#statement","text":"[js] Content fun Statement ()","title":"Statement"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/bind/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Statement / bind bind [js] Content open fun bind (): Boolean open fun bind (values: ParamsObject ): Boolean open fun bind (values: Array ): Boolean","title":"bind   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/bind/#bind","text":"[js] Content open fun bind (): Boolean open fun bind (values: ParamsObject ): Boolean open fun bind (values: Array ): Boolean","title":"bind"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/free/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Statement / free free [js] Content open fun free (): Boolean","title":"free   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/free/#free","text":"[js] Content open fun free (): Boolean","title":"free"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/freemem/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Statement / freemem freemem [js] Content open fun freemem ()","title":"freemem   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/freemem/#freemem","text":"[js] Content open fun freemem ()","title":"freemem"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/get-as-object/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Statement / getAsObject getAsObject [js] Content open fun getAsObject (): ParamsObject open fun getAsObject (params: ParamsObject ): ParamsObject open fun getAsObject (params: Array ): ParamsObject","title":"getAsObject   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/get-as-object/#getasobject","text":"[js] Content open fun getAsObject (): ParamsObject open fun getAsObject (params: ParamsObject ): ParamsObject open fun getAsObject (params: Array ): ParamsObject","title":"getAsObject"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/get-column-names/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Statement / getColumnNames getColumnNames [js] Content open fun getColumnNames (): Array < String >","title":"getColumnNames   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/get-column-names/#getcolumnnames","text":"[js] Content open fun getColumnNames (): Array < String >","title":"getColumnNames"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/get/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Statement / get get [js] Content open fun get (): Array open fun get (params: ParamsObject ): Array open fun get (params: Array ): Array","title":"get   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/get/#get","text":"[js] Content open fun get (): Array open fun get (params: ParamsObject ): Array open fun get (params: Array ): Array","title":"get"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/reset/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Statement / reset reset [js] Content open fun reset ()","title":"reset   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/reset/#reset","text":"[js] Content open fun reset ()","title":"reset"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/run/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Statement / run run [js] Content open fun run () open fun run (values: ParamsObject ) open fun run (values: Array )","title":"run   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/run/#run","text":"[js] Content open fun run () open fun run (values: ParamsObject ) open fun run (values: Array )","title":"run"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/step/","text":"// sqljs-driver / com.squareup.sqldelight.drivers.sqljs / Statement / step step [js] Content open fun step (): Boolean","title":"step   - SQLDelight"},{"location":"1.x/sqljs-driver/com.squareup.sqldelight.drivers.sqljs/-statement/step/#step","text":"[js] Content open fun step (): Boolean","title":"step"},{"location":"android_sqlite/","text":"Getting Started on Android First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: dependencies { implementation \"com.squareup.sqldelight:android-driver:1.5.2\" } val driver : SqlDriver = AndroidSqliteDriver ( Database . Schema , context , \"test.db\" ) It's recommended to switch Android Studio to use the \"Project\" view instead of the \"Android\" view of your files, in order to find and edit SQLDelight files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started"},{"location":"android_sqlite/#getting-started-on-android","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: dependencies { implementation \"com.squareup.sqldelight:android-driver:1.5.2\" } val driver : SqlDriver = AndroidSqliteDriver ( Database . Schema , context , \"test.db\" ) It's recommended to switch Android Studio to use the \"Project\" view instead of the \"Android\" view of your files, in order to find and edit SQLDelight files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started on Android"},{"location":"android_sqlite/android_paging/","text":"Android Paging AndroidX Paging2 To use SQLDelight with Android's Paging Library add a dependency on the paging extension artifact. dependencies { implementation \"com.squareup.sqldelight:android-paging-extensions:1.5.2\" } To create a DataSource write a query to get the number of rows and a query that takes an offset and a limit. countPlayers : SELECT count ( * ) FROM hockeyPlayer ; players : SELECT * FROM hockeyPlayer LIMIT : limit OFFSET : offset ; val dataSource = QueryDataSourceFactory ( queryProvider = playerQueries :: players , countQuery = playerQueries . countPlayers (), transacter = playerQueries , ). create () AndroidX Paging3 SQLDelight maintains an extension for AndroidX Paging3, which is currently in beta. To include SQLDelight Paging3 extensions: dependencies { implementation \"com.squareup.sqldelight:android-paging3-extensions:1.5.2\" } SQLDelight offers two methods for paging data -- offset based paging and keyset paging. Offset Based Paging Offset paging achieves paged results using OFFSET and LIMIT clauses. Creating a PagingSource that performs offset based paging requires a count query as well as the paged query. countPlayers : SELECT count ( * ) FROM hockeyPlayer ; players : SELECT * FROM hockeyPlayer LIMIT : limit OFFSET : offset ; import com.squareup.sqldelight.android.paging3.QueryPagingSource val pagingSource : PagingSource = QueryPagingSource ( countQuery = playerQueries . countPlayers (), transacter = playerQueries , dispatcher = Dispatchers . IO , queryProvider = playerQueries :: players , ) By default, queries are performed on Dispatchers.IO if no dispatcher is specified. Consumers expecting to use RxJava's Scheduler to perform queries should use the Scheduler.asCoroutineDispatcher extension function. Keyset Paging Offset paging is simple and easy to maintain. Unfortunately it performs poorly on large datasets. The OFFSET clause of a SQL statement really just drops already executed rows in a SQL query. Therefore, as the number to OFFSET grows, so does the amount of time it takes to execute your query. To overcome this, SQLDelight offers a \"keyset paging\" imlementation of PagingSource . Rather than querying an entire dataset and inefficiently dropping the first OFFSET elements, keyset paging operates using a unique column to restrict the bounds of your queries. This performs better at the expense of higher developer maintenance. The queryProvider callback that this paging source accepts has two parameters -- a beginInclusive non-null unique Key as well as an endExclusive nullable unique Key? . An example of the core paging query is shown below. keyedQuery : SELECT * FROM hockeyPlayer WHERE id >= : beginInclusive AND ( id < : endExclusive OR : endExclusive IS NULL ) ORDER BY id ASC ; Queries used in keyset paging must have a unique ordering like shown above. Both beginInclusive and endExclusive are pre-calculated keys that act as page boundaries. Page sizes are established when pre-calculating page boundaries. The pageBoundariesProvider callback takes an anchor: Key? parameter as well as a limit: Long? parameter. An example query that pre-calculates page boundaries is shown below. pageBoundaries : SELECT id FROM ( SELECT id , CASE WHEN (( row_number () OVER ( ORDER BY id ASC ) - 0 ) % : limit ) = 0 THEN 1 WHEN id = : anchor THEN 1 ELSE 0 END page_boundary ; FROM hockeyPlayer ORDER BY id ASC ) WHERE page_boundary = 1 ; Pre-calculating page boundaries of a SQL query will likely require SQLite Window Functions . Window functions were introduced in SQLite version 3.25.0, and therefore are not available by default until Android API 30. To use keyset paging SQLDelight recommends either setting minApi 30 or bundling your own SQLite version. The Requery organization offers an up-to-date distribution of SQLite as a standalone library. The AndroidX paging library allows for the first page fetch to differ in size from the subsequent page fetches with PagingConfig.initialLoadSize . This functionality should be avoided , as the pageBoundariesProvider callback is invoked a single time on the first page fetch. Failing to have matching PagingConifg.initialLoadSize and PagingConfig.pageSize will result in unexpected page boundary generation. This paging source does not support jumping. To create this paging source, use the QueryPagingSource factory function. import com.squareup.sqldelight.android.paging3.QueryPagingSource val keyedSource = QueryPagingSource ( transacter = playerQueries , dispatcher = Dispatchers . IO , pageBoundariesProvider = playerQueries :: pageBoundaries , queryProvider = playerQueries :: keyedQuery , ) By default, queries are performed on Dispatchers.IO if no dispatcher is specified. Consumers expecting to use RxJava's Scheduler to perform queries should use the Scheduler.asCoroutineDispatcher extension function.","title":"Android Paging"},{"location":"android_sqlite/android_paging/#android-paging","text":"","title":"Android Paging"},{"location":"android_sqlite/android_paging/#androidx-paging2","text":"To use SQLDelight with Android's Paging Library add a dependency on the paging extension artifact. dependencies { implementation \"com.squareup.sqldelight:android-paging-extensions:1.5.2\" } To create a DataSource write a query to get the number of rows and a query that takes an offset and a limit. countPlayers : SELECT count ( * ) FROM hockeyPlayer ; players : SELECT * FROM hockeyPlayer LIMIT : limit OFFSET : offset ; val dataSource = QueryDataSourceFactory ( queryProvider = playerQueries :: players , countQuery = playerQueries . countPlayers (), transacter = playerQueries , ). create ()","title":"AndroidX Paging2"},{"location":"android_sqlite/android_paging/#androidx-paging3","text":"SQLDelight maintains an extension for AndroidX Paging3, which is currently in beta. To include SQLDelight Paging3 extensions: dependencies { implementation \"com.squareup.sqldelight:android-paging3-extensions:1.5.2\" } SQLDelight offers two methods for paging data -- offset based paging and keyset paging.","title":"AndroidX Paging3"},{"location":"android_sqlite/android_paging/#offset-based-paging","text":"Offset paging achieves paged results using OFFSET and LIMIT clauses. Creating a PagingSource that performs offset based paging requires a count query as well as the paged query. countPlayers : SELECT count ( * ) FROM hockeyPlayer ; players : SELECT * FROM hockeyPlayer LIMIT : limit OFFSET : offset ; import com.squareup.sqldelight.android.paging3.QueryPagingSource val pagingSource : PagingSource = QueryPagingSource ( countQuery = playerQueries . countPlayers (), transacter = playerQueries , dispatcher = Dispatchers . IO , queryProvider = playerQueries :: players , ) By default, queries are performed on Dispatchers.IO if no dispatcher is specified. Consumers expecting to use RxJava's Scheduler to perform queries should use the Scheduler.asCoroutineDispatcher extension function.","title":"Offset Based Paging"},{"location":"android_sqlite/android_paging/#keyset-paging","text":"Offset paging is simple and easy to maintain. Unfortunately it performs poorly on large datasets. The OFFSET clause of a SQL statement really just drops already executed rows in a SQL query. Therefore, as the number to OFFSET grows, so does the amount of time it takes to execute your query. To overcome this, SQLDelight offers a \"keyset paging\" imlementation of PagingSource . Rather than querying an entire dataset and inefficiently dropping the first OFFSET elements, keyset paging operates using a unique column to restrict the bounds of your queries. This performs better at the expense of higher developer maintenance. The queryProvider callback that this paging source accepts has two parameters -- a beginInclusive non-null unique Key as well as an endExclusive nullable unique Key? . An example of the core paging query is shown below. keyedQuery : SELECT * FROM hockeyPlayer WHERE id >= : beginInclusive AND ( id < : endExclusive OR : endExclusive IS NULL ) ORDER BY id ASC ; Queries used in keyset paging must have a unique ordering like shown above. Both beginInclusive and endExclusive are pre-calculated keys that act as page boundaries. Page sizes are established when pre-calculating page boundaries. The pageBoundariesProvider callback takes an anchor: Key? parameter as well as a limit: Long? parameter. An example query that pre-calculates page boundaries is shown below. pageBoundaries : SELECT id FROM ( SELECT id , CASE WHEN (( row_number () OVER ( ORDER BY id ASC ) - 0 ) % : limit ) = 0 THEN 1 WHEN id = : anchor THEN 1 ELSE 0 END page_boundary ; FROM hockeyPlayer ORDER BY id ASC ) WHERE page_boundary = 1 ; Pre-calculating page boundaries of a SQL query will likely require SQLite Window Functions . Window functions were introduced in SQLite version 3.25.0, and therefore are not available by default until Android API 30. To use keyset paging SQLDelight recommends either setting minApi 30 or bundling your own SQLite version. The Requery organization offers an up-to-date distribution of SQLite as a standalone library. The AndroidX paging library allows for the first page fetch to differ in size from the subsequent page fetches with PagingConfig.initialLoadSize . This functionality should be avoided , as the pageBoundariesProvider callback is invoked a single time on the first page fetch. Failing to have matching PagingConifg.initialLoadSize and PagingConfig.pageSize will result in unexpected page boundary generation. This paging source does not support jumping. To create this paging source, use the QueryPagingSource factory function. import com.squareup.sqldelight.android.paging3.QueryPagingSource val keyedSource = QueryPagingSource ( transacter = playerQueries , dispatcher = Dispatchers . IO , pageBoundariesProvider = playerQueries :: pageBoundaries , queryProvider = playerQueries :: keyedQuery , ) By default, queries are performed on Dispatchers.IO if no dispatcher is specified. Consumers expecting to use RxJava's Scheduler to perform queries should use the Scheduler.asCoroutineDispatcher extension function.","title":"Keyset Paging"},{"location":"android_sqlite/coroutines/","text":"Flow To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions-jvm:1.5.2\" } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Coroutines"},{"location":"android_sqlite/coroutines/#flow","text":"To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions-jvm:1.5.2\" } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Flow"},{"location":"android_sqlite/custom_projections/","text":"Projections By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"android_sqlite/custom_projections/#projections","text":"By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"android_sqlite/gradle/","text":"Gradle For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db' or 'src/commonMain/db' for KMM. // Defaults to [\"sqldelight\"] sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" // If set to true, migration files will fail during compilation if there are errors in them. // Defaults to false verifyMigrations = true } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" verifyMigrations = true } } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"android_sqlite/gradle/#gradle","text":"For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db' or 'src/commonMain/db' for KMM. // Defaults to [\"sqldelight\"] sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" // If set to true, migration files will fail during compilation if there are errors in them. // Defaults to false verifyMigrations = true } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" verifyMigrations = true } }","title":"Gradle"},{"location":"android_sqlite/gradle/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"android_sqlite/grouping_statements/","text":"You can group multiple SQL statements together to be executed at once: upsert { UPDATE myTable SET column1 = : column1 , column2 = : column2 WHERE id = : id ; INSERT OR IGNORE INTO myTable ( id , column1 , column2 ) VALUES (: id , : column1 , : column2 ); }","title":"Grouping Statements"},{"location":"android_sqlite/intellij_plugin/","text":"IntelliJ Plugin The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"android_sqlite/intellij_plugin/#intellij-plugin","text":"The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"android_sqlite/migrations/","text":"Migrations The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date. If the driver supports it, migrations are run in a transaction. You should not surround your migrations in BEGIN/END TRANSACTION , as this can cause a crash with some drivers. Versioning The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files. Verifying Migrations You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration. Code Migrations If you run your migration from code and would like to perform data migrations you can use the Database.Schema.migrateWithCallbacks api: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersion ( 3 ) { database . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) Alternatively, it is often useful to receive the SqlDriver as a parameter. In those cases, you can use AfterVersionWithDriver class instead: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersionWithDriver ( 3 ) { it . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) In the following example, if you have 1.sqm, 2.sqm, 3.sqm, 4.sqm, and 5.sqm as migrations, the above callback will happen after 3.sqm completes when the database is on version 4. After the callback it will resume at 4.sqm and complete the remaining migrations, in this case 4.sqm and 5.sqm, meaning the final database version is 6. If you are using an AndroidSqliteDriver you can pass these callbacks in during the driver's creation: val driver : SqlDriver = AndroidSqliteDriver ( schema = Database . Schema , context = context , name = \"test.db\" , callback = AndroidSqliteDriver . Callback ( schema = Database . Schema , AfterVersion ( 3 ) { database . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) )","title":"Migrations"},{"location":"android_sqlite/migrations/#migrations","text":"The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date. If the driver supports it, migrations are run in a transaction. You should not surround your migrations in BEGIN/END TRANSACTION , as this can cause a crash with some drivers.","title":"Migrations"},{"location":"android_sqlite/migrations/#versioning","text":"The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files.","title":"Versioning"},{"location":"android_sqlite/migrations/#verifying-migrations","text":"You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration.","title":"Verifying Migrations"},{"location":"android_sqlite/migrations/#code-migrations","text":"If you run your migration from code and would like to perform data migrations you can use the Database.Schema.migrateWithCallbacks api: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersion ( 3 ) { database . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) Alternatively, it is often useful to receive the SqlDriver as a parameter. In those cases, you can use AfterVersionWithDriver class instead: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersionWithDriver ( 3 ) { it . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) In the following example, if you have 1.sqm, 2.sqm, 3.sqm, 4.sqm, and 5.sqm as migrations, the above callback will happen after 3.sqm completes when the database is on version 4. After the callback it will resume at 4.sqm and complete the remaining migrations, in this case 4.sqm and 5.sqm, meaning the final database version is 6. If you are using an AndroidSqliteDriver you can pass these callbacks in during the driver's creation: val driver : SqlDriver = AndroidSqliteDriver ( schema = Database . Schema , context = context , name = \"test.db\" , callback = AndroidSqliteDriver . Callback ( schema = Database . Schema , AfterVersion ( 3 ) { database . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) )","title":"Code Migrations"},{"location":"android_sqlite/query_arguments/","text":"Bind Args .sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments. Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Arguments"},{"location":"android_sqlite/query_arguments/#bind-args","text":".sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments.","title":"Bind Args"},{"location":"android_sqlite/query_arguments/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"android_sqlite/query_arguments/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"android_sqlite/query_arguments/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"android_sqlite/query_arguments/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"android_sqlite/resources/","text":"Other Resources Guides SQLDelight 1.x Quickstart Guide for Android","title":"Resources"},{"location":"android_sqlite/resources/#other-resources","text":"","title":"Other Resources"},{"location":"android_sqlite/resources/#guides","text":"SQLDelight 1.x Quickstart Guide for Android","title":"Guides"},{"location":"android_sqlite/rxjava/","text":"RxJava To observe a query, depend on the RxJava extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:rxjava3-extensions:1.5.2\" } val players : Observable < List < HockeyPlayer >> = playerQueries . selectAll () . asObservable () . mapToList () Note: For RxJava 2, use rxjava2-extensions as the artifact name.","title":"RxJava"},{"location":"android_sqlite/rxjava/#rxjava","text":"To observe a query, depend on the RxJava extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:rxjava3-extensions:1.5.2\" } val players : Observable < List < HockeyPlayer >> = playerQueries . selectAll () . asObservable () . mapToList () Note: For RxJava 2, use rxjava2-extensions as the artifact name.","title":"RxJava"},{"location":"android_sqlite/testing/","text":"In some tests (like verification of migrations) you might wish to swap out the Android driver with the JVM driver , enabling you to test code involving the database without needing an Android emulator or physical device. To do that use the jvm SQLite driver: dependencies { testImplementation 'com.squareup.sqldelight:sqlite-driver:1.5.2' } // When your test needs a driver @Before fun before () { driver = JdbcSqliteDriver ( JdbcSqliteDriver . IN_MEMORY ) Database . Schema . create ( driver ) } If you are using the SQLite that comes bundled with Android (rather than shipping your own ), you can override the version of sqlite-jdbc to one that matches your Android minSdkVersion , for example for API 23 use SQLite 3.8.10.2: dependencies { testImplementation ( 'org.xerial:sqlite-jdbc:3.8.10.2' ) { // Override the version of sqlite used by sqlite-driver to match Android API 23 force = true } }","title":"Testing"},{"location":"android_sqlite/transactions/","text":"API If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () } Rollback Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size } Callbacks You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Transactions"},{"location":"android_sqlite/transactions/#api","text":"If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () }","title":"API"},{"location":"android_sqlite/transactions/#rollback","text":"Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size }","title":"Rollback"},{"location":"android_sqlite/transactions/#callbacks","text":"You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Callbacks"},{"location":"android_sqlite/types/","text":"SQLite Types SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 ) Custom Column Types If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) ) Enums As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Types"},{"location":"android_sqlite/types/#sqlite-types","text":"SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 )","title":"SQLite Types"},{"location":"android_sqlite/types/#custom-column-types","text":"If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) )","title":"Custom Column Types"},{"location":"android_sqlite/types/#enums","text":"As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Enums"},{"location":"android_sqlite/upgrading/","text":"Upgrading from Versions before 1.0 If you're still on SQLDelight 0.6 doing the upgrade to 0.7 first so you stay on the SupportSQLite artifact will likely be easiest Upgrade the gradle plugin from 0.7 to 0.7.1. This will upgrade the arch.persistence.db dependency to 1.1.1, but should have no effect on your usage of sqldelight. Upgrade the gradle plugin from 0.7.1 to 0.7.2. This changes the runtime package from com.squareup.sqldelight to com.squareup.sqldelight.prerelease , so you will need to change references in your own code. Upgrade the gradle plugin from 0.7.2 to 0.9.0. This upgrades the transitive dependencies and generated code to instead use AndroidX, which is a requirement of SQLDelight. This should be done at the same time as you upgrading your own project to AndroidX, and cannot be done separately since SQLDelight generates code which references android support/AndroidX. ALTERNATIVELY Upgrade the gradle plugin from 0.7 to 0.8.0 before then upgrading to 0.9.0. This upgrades to AndroidX without changing the sqldelight package name to com.squareup.sqldelight.prerelease Suppose on SQLDelight 0.9 you have this User.sq file: CREATE TABLE user ( id INTEGER NOT NULL PRIMARY KEY , name TEXT NOT NULL ); insertDefaultData : INSERT INTO user VALUES ( 1 , 'Alec' ); users : SELECT * FROM user ; names : SELECT name FROM user ; insertUser : INSERT INTO user VALUES ( ? , ? ); This will generate the UserModel class with methods for your queries. Copy and paste all *Model.java files out of the build directory and into your src/main/java folder. Upgrade the gradle plugin from 0.9 to 1.0.0-rc4. Note your build will fail at this point because of the model code having undefined references to the old SQL Delight runtime (like SqlDelightStatement ). To add these back in add an implementation dependency on com.squareup.sqldelight:runtime:0.9.0 . At this point your build should still be working, but changes to .sq files will not be reflected in your *Model.java files. If things aren't working at this point, please file an issue! Begin by modifying your SupportSQLiteOpenHelper.Callback to call into the now generated Database which holds generated code for SQL Delight 1.0: //Before @Override void onCreate ( SupportSQLiteDatabase db ) { db . execSql ( UserModel . CREATE_TABLE ); db . execSql ( UserModel . INSERTDEFAULTDATA ); // Other create table/initialization } In SQL Delight 1.0 all unlabeled statements in .sq files (including CREATE statements) will be run during onCreate , so we can remove the insertDefaultData identifier from above: User.sq ... --insertDefaultData: INSERT INTO user VALUES ( 1 , 'Alec' ); ... and now your SupportSQLiteOpenHelper.Callback should call into the Database for create @Override void onCreate ( SupportSQLiteDatabase db ) { SqlDriver driver = AndroidSqliteDriver ( db ) Database . Schema . create ( driver ) } You can do the same for your migrations if you place them in .sqm files, but thats not necessary part of the upgrade. At this point things should still work normally. Next add in the code to create your Database as part of an object graph/singleton pattern/whevs: @Provides @Singleton static SupportSQLiteOpenHelper provideDatabaseHelper ( @App Context context ) { SupportSQLiteOpenHelper . Configuration config = SupportSQLiteOpenHelper . Configuration . builder ( context ) . name ( DATABASE_NAME ) . callback ( new MyDatabaseCallback ()) . build (); return new FrameworkSQLiteOpenHelperFactory (). create ( config ); } @Provides @Singleton static Database provideDatabase ( SupportSQLiteOpenHelper helper ) { return new Database ( new AndroidSqliteDriver ( helper )); } If you're also using SQL Brite make sure you create a BriteDatabase with the same SupportSQLiteOpenHelper that's being used to create the Database . Things should still be working. The following assume you're using SQL Brite to get reactive callbacks from the database, but upgrades using only SQL Delight will be similar. Mutating queries can be converted individually by using the Database : before: private val insertUser : UserModel . InsertUser by lazy { UserModel . InsertUser ( datbaseOpenHelper . writableDatabase ) } insertUser . bind ( 2 , \"Jake\" ) insertUser . executeInsert () after: database . userQueries . insertUser ( 2 , \"Jake\" ) You no longer need a \"Factory\" type to perform queries, the query wrapper is all that is needed. before: val query = User . FACTORY . users () val usersObservable = briteDatabase . createQuery ( query . tables , query . statement , query . args ) . mapToList ( User . FACTORY . usersMapper () :: map ) after: val usersObservable = database . userQueries . users () . asObservable ( Schedulers . io ()) // The scheduler to run the query on. . mapToList () If you still want to use a custom type, pass it as a parameter to the query. val myUsersObservable = database . userQueries . users ( :: MyUser ) . asObservable ( Schedulers . io ()) . mapToList () Once you no longer have references to UserModel.java , delete the whole class. Repeat for each of your *Model.java files until upgrading is complete!","title":"Upgrading Pre-1.0"},{"location":"android_sqlite/upgrading/#upgrading-from-versions-before-10","text":"If you're still on SQLDelight 0.6 doing the upgrade to 0.7 first so you stay on the SupportSQLite artifact will likely be easiest Upgrade the gradle plugin from 0.7 to 0.7.1. This will upgrade the arch.persistence.db dependency to 1.1.1, but should have no effect on your usage of sqldelight. Upgrade the gradle plugin from 0.7.1 to 0.7.2. This changes the runtime package from com.squareup.sqldelight to com.squareup.sqldelight.prerelease , so you will need to change references in your own code. Upgrade the gradle plugin from 0.7.2 to 0.9.0. This upgrades the transitive dependencies and generated code to instead use AndroidX, which is a requirement of SQLDelight. This should be done at the same time as you upgrading your own project to AndroidX, and cannot be done separately since SQLDelight generates code which references android support/AndroidX. ALTERNATIVELY Upgrade the gradle plugin from 0.7 to 0.8.0 before then upgrading to 0.9.0. This upgrades to AndroidX without changing the sqldelight package name to com.squareup.sqldelight.prerelease Suppose on SQLDelight 0.9 you have this User.sq file: CREATE TABLE user ( id INTEGER NOT NULL PRIMARY KEY , name TEXT NOT NULL ); insertDefaultData : INSERT INTO user VALUES ( 1 , 'Alec' ); users : SELECT * FROM user ; names : SELECT name FROM user ; insertUser : INSERT INTO user VALUES ( ? , ? ); This will generate the UserModel class with methods for your queries. Copy and paste all *Model.java files out of the build directory and into your src/main/java folder. Upgrade the gradle plugin from 0.9 to 1.0.0-rc4. Note your build will fail at this point because of the model code having undefined references to the old SQL Delight runtime (like SqlDelightStatement ). To add these back in add an implementation dependency on com.squareup.sqldelight:runtime:0.9.0 . At this point your build should still be working, but changes to .sq files will not be reflected in your *Model.java files. If things aren't working at this point, please file an issue! Begin by modifying your SupportSQLiteOpenHelper.Callback to call into the now generated Database which holds generated code for SQL Delight 1.0: //Before @Override void onCreate ( SupportSQLiteDatabase db ) { db . execSql ( UserModel . CREATE_TABLE ); db . execSql ( UserModel . INSERTDEFAULTDATA ); // Other create table/initialization } In SQL Delight 1.0 all unlabeled statements in .sq files (including CREATE statements) will be run during onCreate , so we can remove the insertDefaultData identifier from above: User.sq ... --insertDefaultData: INSERT INTO user VALUES ( 1 , 'Alec' ); ... and now your SupportSQLiteOpenHelper.Callback should call into the Database for create @Override void onCreate ( SupportSQLiteDatabase db ) { SqlDriver driver = AndroidSqliteDriver ( db ) Database . Schema . create ( driver ) } You can do the same for your migrations if you place them in .sqm files, but thats not necessary part of the upgrade. At this point things should still work normally. Next add in the code to create your Database as part of an object graph/singleton pattern/whevs: @Provides @Singleton static SupportSQLiteOpenHelper provideDatabaseHelper ( @App Context context ) { SupportSQLiteOpenHelper . Configuration config = SupportSQLiteOpenHelper . Configuration . builder ( context ) . name ( DATABASE_NAME ) . callback ( new MyDatabaseCallback ()) . build (); return new FrameworkSQLiteOpenHelperFactory (). create ( config ); } @Provides @Singleton static Database provideDatabase ( SupportSQLiteOpenHelper helper ) { return new Database ( new AndroidSqliteDriver ( helper )); } If you're also using SQL Brite make sure you create a BriteDatabase with the same SupportSQLiteOpenHelper that's being used to create the Database . Things should still be working. The following assume you're using SQL Brite to get reactive callbacks from the database, but upgrades using only SQL Delight will be similar. Mutating queries can be converted individually by using the Database : before: private val insertUser : UserModel . InsertUser by lazy { UserModel . InsertUser ( datbaseOpenHelper . writableDatabase ) } insertUser . bind ( 2 , \"Jake\" ) insertUser . executeInsert () after: database . userQueries . insertUser ( 2 , \"Jake\" ) You no longer need a \"Factory\" type to perform queries, the query wrapper is all that is needed. before: val query = User . FACTORY . users () val usersObservable = briteDatabase . createQuery ( query . tables , query . statement , query . args ) . mapToList ( User . FACTORY . usersMapper () :: map ) after: val usersObservable = database . userQueries . users () . asObservable ( Schedulers . io ()) // The scheduler to run the query on. . mapToList () If you still want to use a custom type, pass it as a parameter to the query. val myUsersObservable = database . userQueries . users ( :: MyUser ) . asObservable ( Schedulers . io ()) . mapToList () Once you no longer have references to UserModel.java , delete the whole class. Repeat for each of your *Model.java files until upgrading is complete!","title":"Upgrading from Versions before 1.0"},{"location":"common/coroutines-multiplatform/","text":"Flow To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: kotlin { sourceSets . commonMain . dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions:1.5.2\" } } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Coroutines multiplatform"},{"location":"common/coroutines-multiplatform/#flow","text":"To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: kotlin { sourceSets . commonMain . dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions:1.5.2\" } } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Flow"},{"location":"common/coroutines-usage/","text":"val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Coroutines usage"},{"location":"common/coroutines/","text":"Flow To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions-jvm:1.5.2\" } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Coroutines"},{"location":"common/coroutines/#flow","text":"To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions-jvm:1.5.2\" } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Flow"},{"location":"common/custom_column_types/","text":"Custom Column Types If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) ) Enums As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Custom column types"},{"location":"common/custom_column_types/#custom-column-types","text":"If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) )","title":"Custom Column Types"},{"location":"common/custom_column_types/#enums","text":"As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Enums"},{"location":"common/custom_projections/","text":"Projections By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"common/custom_projections/#projections","text":"By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"common/gradle-common-groovy-properties/","text":"// Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db' or 'src/commonMain/db' for KMM. // Defaults to [\"sqldelight\"] sourceFolders = [\"db\"] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file(\"src/main/sqldelight/databases\") // Optionally specify schema dependencies on other gradle projects dependency project(':OtherProject') // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" // If set to true, migration files will fail during compilation if there are errors in them. // Defaults to false verifyMigrations = true","title":"Gradle common groovy properties"},{"location":"common/gradle-common-kotlin-properties/","text":"packageName = \"com.example.db\" sourceFolders = listOf(\"db\") schemaOutputDirectory = file(\"build/dbs\") dependency(project(\":OtherProject\")) dialect = \"sqlite:3.24\" verifyMigrations = true","title":"Gradle common kotlin properties"},{"location":"common/gradle-dependencies/","text":"Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle dependencies"},{"location":"common/gradle-dependencies/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"common/gradle-multiplatform/","text":"Gradle For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db' or 'src/commonMain/db' for KMM. // Defaults to [\"sqldelight\"] sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" // If set to true, migration files will fail during compilation if there are errors in them. // Defaults to false verifyMigrations = true } // For native targets, whether sqlite should be automatically linked. // Defaults to true. linkSqlite = false } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" verifyMigrations = true } linkSqlite = false } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"common/gradle-multiplatform/#gradle","text":"For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db' or 'src/commonMain/db' for KMM. // Defaults to [\"sqldelight\"] sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" // If set to true, migration files will fail during compilation if there are errors in them. // Defaults to false verifyMigrations = true } // For native targets, whether sqlite should be automatically linked. // Defaults to true. linkSqlite = false } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" verifyMigrations = true } linkSqlite = false }","title":"Gradle"},{"location":"common/gradle-multiplatform/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"common/gradle/","text":"Gradle For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db' or 'src/commonMain/db' for KMM. // Defaults to [\"sqldelight\"] sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" // If set to true, migration files will fail during compilation if there are errors in them. // Defaults to false verifyMigrations = true } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" verifyMigrations = true } } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"common/gradle/#gradle","text":"For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db' or 'src/commonMain/db' for KMM. // Defaults to [\"sqldelight\"] sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" // If set to true, migration files will fail during compilation if there are errors in them. // Defaults to false verifyMigrations = true } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" verifyMigrations = true } }","title":"Gradle"},{"location":"common/gradle/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"common/gradle_server/","text":"Gradle build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"sqldelight\" , \"resources\" ] // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // Whether or not to use .sqm files as the source of truth for the schema. // Defaults to false deriveSchemaFromMigrations = true // If set, configures a task to output the .sqm migration files as valid SQL // Defaults to null migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) // The extension format to use for generated valid SQL migrations. // Defaults to \".sql\" migrationOutputFileFormat = \".sql\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = [ \"sqldelight\" , \"resources\" ] dependency project ( ' : OtherProject ' ) deriveSchemaFromMigrations = true migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" } } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"common/gradle_server/#gradle","text":"build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"sqldelight\" , \"resources\" ] // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // Whether or not to use .sqm files as the source of truth for the schema. // Defaults to false deriveSchemaFromMigrations = true // If set, configures a task to output the .sqm migration files as valid SQL // Defaults to null migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) // The extension format to use for generated valid SQL migrations. // Defaults to \".sql\" migrationOutputFileFormat = \".sql\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = [ \"sqldelight\" , \"resources\" ] dependency project ( ' : OtherProject ' ) deriveSchemaFromMigrations = true migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" } }","title":"Gradle"},{"location":"common/gradle_server/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"common/grouping_statements/","text":"You can group multiple SQL statements together to be executed at once: upsert { UPDATE myTable SET column1 = : column1 , column2 = : column2 WHERE id = : id ; INSERT OR IGNORE INTO myTable ( id , column1 , column2 ) VALUES (: id , : column1 , : column2 ); }","title":"Grouping statements"},{"location":"common/index_gradle_database/","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } }","title":"Index gradle database"},{"location":"common/index_gradle_database_post_dialect/","text":"} } ```","title":"Index gradle database post dialect"},{"location":"common/index_gradle_database_pre_dialect/","text":"First apply the gradle plugin in your project. ```groovy buildscript { repositories { google() mavenCentral() } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\"","title":"Index gradle database pre dialect"},{"location":"common/index_queries/","text":"SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Index queries"},{"location":"common/index_schema/","text":"Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of:","title":"Index schema"},{"location":"common/index_schema_sq/","text":"Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' );","title":"Index schema sq"},{"location":"common/index_server/","text":"SQLDelight needs to know the schema of your database. If you always create your schema fresh with create table statements, you'll want to put those statements in .sq files, as shown here . If you apply migration files to an already running database, you'll want to rename your migration files to .sqm files, as shown here Fresh Schema Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); In the same .sq files you can start placing your sql statements to be executed at runtime . Migration Schema First, configure gradle to use migrations to assemble the schema: sqldelight { Database { ... sourceFolders = [ \"sqldelight\" ] deriveSchemaFromMigrations = true } } Migration files have the extension .sqm , and must have a number in their file name indicating what order the migration file runs in. For example, given this hierarchy: src --main ----sqldelight ------v1__backend.sqm ------v2__backend.sqm SQLDelight will create the schema by applying v1__backend.sqm and then v2__backend.sqm . Place your normal SQL CREATE / ALTER statements in these files. If another service reads from your migrations files (like flyway), make sure to read the info on migrations and how to output valid SQL. Typesafe SQL Before you're able to execute SQL statements at runtime, you need to create a SqlDriver to connect to your database. The easiest way is off of a DataSource that you would get from hikari or other connection managers. dependencies { implementation \"com.squareup.sqldelight:jdbc-driver:1.5.2\" } val driver : SqlDriver = dataSource . asJdbcDriver () Regardless of if you specify the schema as fresh create table statements or through migrations, runtime SQL goes in .sq files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Index server"},{"location":"common/index_server/#fresh-schema","text":"Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); In the same .sq files you can start placing your sql statements to be executed at runtime .","title":"Fresh Schema"},{"location":"common/index_server/#migration-schema","text":"First, configure gradle to use migrations to assemble the schema: sqldelight { Database { ... sourceFolders = [ \"sqldelight\" ] deriveSchemaFromMigrations = true } } Migration files have the extension .sqm , and must have a number in their file name indicating what order the migration file runs in. For example, given this hierarchy: src --main ----sqldelight ------v1__backend.sqm ------v2__backend.sqm SQLDelight will create the schema by applying v1__backend.sqm and then v2__backend.sqm . Place your normal SQL CREATE / ALTER statements in these files. If another service reads from your migrations files (like flyway), make sure to read the info on migrations and how to output valid SQL.","title":"Migration Schema"},{"location":"common/index_server/#typesafe-sql","text":"Before you're able to execute SQL statements at runtime, you need to create a SqlDriver to connect to your database. The easiest way is off of a DataSource that you would get from hikari or other connection managers. dependencies { implementation \"com.squareup.sqldelight:jdbc-driver:1.5.2\" } val driver : SqlDriver = dataSource . asJdbcDriver () Regardless of if you specify the schema as fresh create table statements or through migrations, runtime SQL goes in .sq files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Typesafe SQL"},{"location":"common/intellij_plugin/","text":"IntelliJ Plugin The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"common/intellij_plugin/#intellij-plugin","text":"The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"common/migrations/","text":"Migrations The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date. If the driver supports it, migrations are run in a transaction. You should not surround your migrations in BEGIN/END TRANSACTION , as this can cause a crash with some drivers. Versioning The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files. Verifying Migrations You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration. Code Migrations If you run your migration from code and would like to perform data migrations you can use the Database.Schema.migrateWithCallbacks api: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersion ( 3 ) { database . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) Alternatively, it is often useful to receive the SqlDriver as a parameter. In those cases, you can use AfterVersionWithDriver class instead: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersionWithDriver ( 3 ) { it . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) In the following example, if you have 1.sqm, 2.sqm, 3.sqm, 4.sqm, and 5.sqm as migrations, the above callback will happen after 3.sqm completes when the database is on version 4. After the callback it will resume at 4.sqm and complete the remaining migrations, in this case 4.sqm and 5.sqm, meaning the final database version is 6.","title":"Migrations"},{"location":"common/migrations/#migrations","text":"The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date. If the driver supports it, migrations are run in a transaction. You should not surround your migrations in BEGIN/END TRANSACTION , as this can cause a crash with some drivers.","title":"Migrations"},{"location":"common/migrations/#versioning","text":"The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files.","title":"Versioning"},{"location":"common/migrations/#verifying-migrations","text":"You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration.","title":"Verifying Migrations"},{"location":"common/migrations/#code-migrations","text":"If you run your migration from code and would like to perform data migrations you can use the Database.Schema.migrateWithCallbacks api: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersion ( 3 ) { database . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) Alternatively, it is often useful to receive the SqlDriver as a parameter. In those cases, you can use AfterVersionWithDriver class instead: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersionWithDriver ( 3 ) { it . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) In the following example, if you have 1.sqm, 2.sqm, 3.sqm, 4.sqm, and 5.sqm as migrations, the above callback will happen after 3.sqm completes when the database is on version 4. After the callback it will resume at 4.sqm and complete the remaining migrations, in this case 4.sqm and 5.sqm, meaning the final database version is 6.","title":"Code Migrations"},{"location":"common/migrations_server/","text":"Valid SQL migrations Using custom kotlin types in migration files means those files are no longer valid SQL. You can optionally configure a gradle task to output your migration files as valid SQL for other services to read from: sqldelight { Database { migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" // Defaults to .sql } } This creates a new task generateMainDatabaseMigrations which will output your .sqm files as valid SQL in the output directory, with the output format. Create a dependency from your compileKotlin task so that services such as flyway will have the files available on their classpath: compileKotlin . configure { dependsOn \"generateMainDatabaseMigrations\" }","title":"Migrations server"},{"location":"common/migrations_server/#valid-sql-migrations","text":"Using custom kotlin types in migration files means those files are no longer valid SQL. You can optionally configure a gradle task to output your migration files as valid SQL for other services to read from: sqldelight { Database { migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" // Defaults to .sql } } This creates a new task generateMainDatabaseMigrations which will output your .sqm files as valid SQL in the output directory, with the output format. Create a dependency from your compileKotlin task so that services such as flyway will have the files available on their classpath: compileKotlin . configure { dependsOn \"generateMainDatabaseMigrations\" }","title":"Valid SQL migrations"},{"location":"common/multiplatform/","text":"Multiplatform To use SQLDelight in Kotlin multiplatform configure the Gradle plugin with a package to generate code into. apply plugin: \"org.jetbrains.kotlin.multiplatform\" apply plugin: \"com.squareup.sqldelight\" sqldelight { MyDatabase { packageName = \"com.example.hockey\" } } Put .sq files in the src/commonMain/sqldelight directory, and then expect a SqlDriver to be provided by individual platforms when creating the Database . Migration files should also be in the same src/commonMain/sqldelight directory.","title":"Multiplatform"},{"location":"common/multiplatform/#multiplatform","text":"To use SQLDelight in Kotlin multiplatform configure the Gradle plugin with a package to generate code into. apply plugin: \"org.jetbrains.kotlin.multiplatform\" apply plugin: \"com.squareup.sqldelight\" sqldelight { MyDatabase { packageName = \"com.example.hockey\" } } Put .sq files in the src/commonMain/sqldelight directory, and then expect a SqlDriver to be provided by individual platforms when creating the Database . Migration files should also be in the same src/commonMain/sqldelight directory.","title":"Multiplatform"},{"location":"common/query_arguments/","text":"Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Query arguments"},{"location":"common/query_arguments/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"common/query_arguments/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"common/query_arguments/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"common/query_arguments/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"common/query_arguments_sqlite/","text":"Bind Args .sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments. Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Query arguments sqlite"},{"location":"common/query_arguments_sqlite/#bind-args","text":".sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments.","title":"Bind Args"},{"location":"common/query_arguments_sqlite/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"common/query_arguments_sqlite/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"common/query_arguments_sqlite/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"common/query_arguments_sqlite/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"common/rxjava/","text":"RxJava To observe a query, depend on the RxJava extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:rxjava3-extensions:1.5.2\" } val players : Observable < List < HockeyPlayer >> = playerQueries . selectAll () . asObservable () . mapToList () Note: For RxJava 2, use rxjava2-extensions as the artifact name.","title":"RxJava"},{"location":"common/rxjava/#rxjava","text":"To observe a query, depend on the RxJava extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:rxjava3-extensions:1.5.2\" } val players : Observable < List < HockeyPlayer >> = playerQueries . selectAll () . asObservable () . mapToList () Note: For RxJava 2, use rxjava2-extensions as the artifact name.","title":"RxJava"},{"location":"common/transactions/","text":"API If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () } Rollback Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size } Callbacks You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Transactions"},{"location":"common/transactions/#api","text":"If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () }","title":"API"},{"location":"common/transactions/#rollback","text":"Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size }","title":"Rollback"},{"location":"common/transactions/#callbacks","text":"You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Callbacks"},{"location":"common/types_server_migrations/","text":"Custom Types in Migrations If migrations are the schema's source of truth, you can also specify the exposed kotlin type when altering a table: import kotlin . collection . List ; ALTER TABLE my_table ADD COLUMN new_column VARCHAR ( 8 ) AS List < String > ;","title":"Types server migrations"},{"location":"common/types_server_migrations/#custom-types-in-migrations","text":"If migrations are the schema's source of truth, you can also specify the exposed kotlin type when altering a table: import kotlin . collection . List ; ALTER TABLE my_table ADD COLUMN new_column VARCHAR ( 8 ) AS List < String > ;","title":"Custom Types in Migrations"},{"location":"common/types_sqlite/","text":"SQLite Types SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 )","title":"Types sqlite"},{"location":"common/types_sqlite/#sqlite-types","text":"SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 )","title":"SQLite Types"},{"location":"js_sqlite/","text":"Getting started on Kotlin JS with SQLDelight First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } } Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: kotlin { sourceSets . jsMain . dependencies { implementation \"com.squareup.sqldelight:sqljs-driver:1.5.2\" } } Unlike on other platforms, the SqlJs driver can not be instantiated directly. The driver must be loaded asynchronously by calling the initSqlDriver function which returns a Promise<SqlDriver> . // As a Promise val promise : Promise < SqlDriver > = initSqlDriver ( Database . Schema ) promise . then { driver -> /* ... */ } // In a coroutine suspend fun createDriver () { val driver : SqlDriver = initSqlDriver ( Database . Schema ). await () /* ... */ } If building for browsers, some additional webpack configuration is also required. // project/webpack.conf.d/fs.js config . resolve = { fallback : { fs : false , path : false , crypto : false , } }; // project/webpack.conf.d/wasm.js const CopyWebpackPlugin = require ( 'copy-webpack-plugin' ); config . plugins . push ( new CopyWebpackPlugin ({ patterns : [ { from : '../../node_modules/sql.js/dist/sql-wasm.wasm' , to : '../../../{your project}/build/distributions' } ] }) ); SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started"},{"location":"js_sqlite/#getting-started-on-kotlin-js-with-sqldelight","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } } Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: kotlin { sourceSets . jsMain . dependencies { implementation \"com.squareup.sqldelight:sqljs-driver:1.5.2\" } } Unlike on other platforms, the SqlJs driver can not be instantiated directly. The driver must be loaded asynchronously by calling the initSqlDriver function which returns a Promise<SqlDriver> . // As a Promise val promise : Promise < SqlDriver > = initSqlDriver ( Database . Schema ) promise . then { driver -> /* ... */ } // In a coroutine suspend fun createDriver () { val driver : SqlDriver = initSqlDriver ( Database . Schema ). await () /* ... */ } If building for browsers, some additional webpack configuration is also required. // project/webpack.conf.d/fs.js config . resolve = { fallback : { fs : false , path : false , crypto : false , } }; // project/webpack.conf.d/wasm.js const CopyWebpackPlugin = require ( 'copy-webpack-plugin' ); config . plugins . push ( new CopyWebpackPlugin ({ patterns : [ { from : '../../node_modules/sql.js/dist/sql-wasm.wasm' , to : '../../../{your project}/build/distributions' } ] }) ); SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting started on Kotlin JS with SQLDelight"},{"location":"js_sqlite/coroutines/","text":"Flow To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: kotlin { sourceSets . commonMain . dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions:1.5.2\" } } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Coroutines"},{"location":"js_sqlite/coroutines/#flow","text":"To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: kotlin { sourceSets . commonMain . dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions:1.5.2\" } } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Flow"},{"location":"js_sqlite/custom_projections/","text":"Projections By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"js_sqlite/custom_projections/#projections","text":"By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"js_sqlite/gradle/","text":"Gradle For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db' or 'src/commonMain/db' for KMM. // Defaults to [\"sqldelight\"] sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" // If set to true, migration files will fail during compilation if there are errors in them. // Defaults to false verifyMigrations = true } // For native targets, whether sqlite should be automatically linked. // Defaults to true. linkSqlite = false } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" verifyMigrations = true } linkSqlite = false } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"js_sqlite/gradle/#gradle","text":"For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db' or 'src/commonMain/db' for KMM. // Defaults to [\"sqldelight\"] sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" // If set to true, migration files will fail during compilation if there are errors in them. // Defaults to false verifyMigrations = true } // For native targets, whether sqlite should be automatically linked. // Defaults to true. linkSqlite = false } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" verifyMigrations = true } linkSqlite = false }","title":"Gradle"},{"location":"js_sqlite/gradle/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"js_sqlite/grouping_statements/","text":"You can group multiple SQL statements together to be executed at once: upsert { UPDATE myTable SET column1 = : column1 , column2 = : column2 WHERE id = : id ; INSERT OR IGNORE INTO myTable ( id , column1 , column2 ) VALUES (: id , : column1 , : column2 ); }","title":"Grouping Statements"},{"location":"js_sqlite/intellij_plugin/","text":"IntelliJ Plugin The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"js_sqlite/intellij_plugin/#intellij-plugin","text":"The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"js_sqlite/migrations/","text":"Migrations The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date. If the driver supports it, migrations are run in a transaction. You should not surround your migrations in BEGIN/END TRANSACTION , as this can cause a crash with some drivers. Versioning The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files. Verifying Migrations You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration. Code Migrations If you run your migration from code and would like to perform data migrations you can use the Database.Schema.migrateWithCallbacks api: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersion ( 3 ) { database . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) Alternatively, it is often useful to receive the SqlDriver as a parameter. In those cases, you can use AfterVersionWithDriver class instead: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersionWithDriver ( 3 ) { it . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) In the following example, if you have 1.sqm, 2.sqm, 3.sqm, 4.sqm, and 5.sqm as migrations, the above callback will happen after 3.sqm completes when the database is on version 4. After the callback it will resume at 4.sqm and complete the remaining migrations, in this case 4.sqm and 5.sqm, meaning the final database version is 6.","title":"Migrations"},{"location":"js_sqlite/migrations/#migrations","text":"The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date. If the driver supports it, migrations are run in a transaction. You should not surround your migrations in BEGIN/END TRANSACTION , as this can cause a crash with some drivers.","title":"Migrations"},{"location":"js_sqlite/migrations/#versioning","text":"The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files.","title":"Versioning"},{"location":"js_sqlite/migrations/#verifying-migrations","text":"You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration.","title":"Verifying Migrations"},{"location":"js_sqlite/migrations/#code-migrations","text":"If you run your migration from code and would like to perform data migrations you can use the Database.Schema.migrateWithCallbacks api: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersion ( 3 ) { database . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) Alternatively, it is often useful to receive the SqlDriver as a parameter. In those cases, you can use AfterVersionWithDriver class instead: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersionWithDriver ( 3 ) { it . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) In the following example, if you have 1.sqm, 2.sqm, 3.sqm, 4.sqm, and 5.sqm as migrations, the above callback will happen after 3.sqm completes when the database is on version 4. After the callback it will resume at 4.sqm and complete the remaining migrations, in this case 4.sqm and 5.sqm, meaning the final database version is 6.","title":"Code Migrations"},{"location":"js_sqlite/multiplatform/","text":"Multiplatform setup with the SqlJs Driver First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } } Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: kotlin { // The drivers needed will change depending on what platforms you target: sourceSets . androidMain . dependencies { implementation \"com.squareup.sqldelight:android-driver:1.5.2\" } // or sourceSets.iosMain, sourceSets.windowsMain, etc. sourceSets . nativeMain . dependencies { implementation \"com.squareup.sqldelight:native-driver:1.5.2\" } sourceSets . jvmMain . dependencies { implementation \"com.squareup.sqldelight:sqlite-driver:1.5.2\" } sourceSets . jsMain . dependencies { implementation \"com.squareup.sqldelight:sqljs-driver:1.5.2\" } } Because the SqlJs driver must be initialized asynchronously, the drivers for other platforms must be initialized in a compatible way to be usable in a common source set. The drivers can be initialized in a coroutine, and a higher-order function can be used to ensure that the driver is initialized before executing a block of code that requires the database: // in src/commonMain/kotlin expect suspend fun provideDbDriver ( schema : SqlDriver . Schema ): SqlDriver class SharedDatabase ( private val driverProvider : suspend ( SqlDriver . Schema ) -> SqlDriver ) { private var database : Database ? = null suspend fun initDatabase () { if ( database == null ) { database = driverProvider ( Database . Schema ). createDatabase () } } suspend operator fun < R > invoke ( block : suspend ( Database ) -> R ): R { initDatabase () return block ( database !! ) } private fun SqlDriver . createDatabase (): Database { /* ... */ } } val sharedDb = SharedDatabase ( :: createTestDbDriver ) class DataRepository ( private val withDatabase : SharedDatabase = sharedDb ) { suspend fun getData () = withDatabase { database -> /* Do something with the database */ } } // in src/jsMain/kotlin actual suspend fun provideDbDriver ( schema : SqlDriver . Schema ): SqlDriver { return initSqlDriver ( schema ). await () } // in src/nativeMain/kotlin actual suspend fun provideDbDriver ( schema : SqlDriver . Schema ): SqlDriver { return NativeSqliteDriver ( schema , \"test.db\" ) } // in src/jvmMain/kotlin actual suspend fun provideDbDriver ( schema : SqlDriver . Schema ): SqlDriver { return JdbcSqliteDriver ( JdbcSqliteDriver . IN_MEMORY ). also { driver -> schema . create ( driver ) } }","title":"Multiplatform"},{"location":"js_sqlite/multiplatform/#multiplatform-setup-with-the-sqljs-driver","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } } Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: kotlin { // The drivers needed will change depending on what platforms you target: sourceSets . androidMain . dependencies { implementation \"com.squareup.sqldelight:android-driver:1.5.2\" } // or sourceSets.iosMain, sourceSets.windowsMain, etc. sourceSets . nativeMain . dependencies { implementation \"com.squareup.sqldelight:native-driver:1.5.2\" } sourceSets . jvmMain . dependencies { implementation \"com.squareup.sqldelight:sqlite-driver:1.5.2\" } sourceSets . jsMain . dependencies { implementation \"com.squareup.sqldelight:sqljs-driver:1.5.2\" } } Because the SqlJs driver must be initialized asynchronously, the drivers for other platforms must be initialized in a compatible way to be usable in a common source set. The drivers can be initialized in a coroutine, and a higher-order function can be used to ensure that the driver is initialized before executing a block of code that requires the database: // in src/commonMain/kotlin expect suspend fun provideDbDriver ( schema : SqlDriver . Schema ): SqlDriver class SharedDatabase ( private val driverProvider : suspend ( SqlDriver . Schema ) -> SqlDriver ) { private var database : Database ? = null suspend fun initDatabase () { if ( database == null ) { database = driverProvider ( Database . Schema ). createDatabase () } } suspend operator fun < R > invoke ( block : suspend ( Database ) -> R ): R { initDatabase () return block ( database !! ) } private fun SqlDriver . createDatabase (): Database { /* ... */ } } val sharedDb = SharedDatabase ( :: createTestDbDriver ) class DataRepository ( private val withDatabase : SharedDatabase = sharedDb ) { suspend fun getData () = withDatabase { database -> /* Do something with the database */ } } // in src/jsMain/kotlin actual suspend fun provideDbDriver ( schema : SqlDriver . Schema ): SqlDriver { return initSqlDriver ( schema ). await () } // in src/nativeMain/kotlin actual suspend fun provideDbDriver ( schema : SqlDriver . Schema ): SqlDriver { return NativeSqliteDriver ( schema , \"test.db\" ) } // in src/jvmMain/kotlin actual suspend fun provideDbDriver ( schema : SqlDriver . Schema ): SqlDriver { return JdbcSqliteDriver ( JdbcSqliteDriver . IN_MEMORY ). also { driver -> schema . create ( driver ) } }","title":"Multiplatform setup with the SqlJs Driver"},{"location":"js_sqlite/query_arguments/","text":"Bind Args .sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments. Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Arguments"},{"location":"js_sqlite/query_arguments/#bind-args","text":".sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments.","title":"Bind Args"},{"location":"js_sqlite/query_arguments/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"js_sqlite/query_arguments/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"js_sqlite/query_arguments/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"js_sqlite/query_arguments/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"js_sqlite/transactions/","text":"API If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () } Rollback Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size } Callbacks You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Transactions"},{"location":"js_sqlite/transactions/#api","text":"If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () }","title":"API"},{"location":"js_sqlite/transactions/#rollback","text":"Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size }","title":"Rollback"},{"location":"js_sqlite/transactions/#callbacks","text":"You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Callbacks"},{"location":"js_sqlite/types/","text":"SQLite Types SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 ) Custom Column Types If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) ) Enums As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Types"},{"location":"js_sqlite/types/#sqlite-types","text":"SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 )","title":"SQLite Types"},{"location":"js_sqlite/types/#custom-column-types","text":"If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) )","title":"Custom Column Types"},{"location":"js_sqlite/types/#enums","text":"As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Enums"},{"location":"jvm_h2/","text":"\ud83d\udc77\u200d\u2640\ufe0f IN DEVELOPMENT H2 is still incubating, and pieces of the dialect are missing. If you are using it and encounter parts of the dialect which are unsupported, please report at sql-psi Getting Started with H2 First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" dialect = \"hsql\" } } SQLDelight needs to know the schema of your database. If you always create your schema fresh with create table statements, you'll want to put those statements in .sq files, as shown here . If you apply migration files to an already running database, you'll want to rename your migration files to .sqm files, as shown here Fresh Schema Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); In the same .sq files you can start placing your sql statements to be executed at runtime . Migration Schema First, configure gradle to use migrations to assemble the schema: sqldelight { Database { ... sourceFolders = [ \"sqldelight\" ] deriveSchemaFromMigrations = true } } Migration files have the extension .sqm , and must have a number in their file name indicating what order the migration file runs in. For example, given this hierarchy: src --main ----sqldelight ------v1__backend.sqm ------v2__backend.sqm SQLDelight will create the schema by applying v1__backend.sqm and then v2__backend.sqm . Place your normal SQL CREATE / ALTER statements in these files. If another service reads from your migrations files (like flyway), make sure to read the info on migrations and how to output valid SQL. Typesafe SQL Before you're able to execute SQL statements at runtime, you need to create a SqlDriver to connect to your database. The easiest way is off of a DataSource that you would get from hikari or other connection managers. dependencies { implementation \"com.squareup.sqldelight:jdbc-driver:1.5.2\" } val driver : SqlDriver = dataSource . asJdbcDriver () Regardless of if you specify the schema as fresh create table statements or through migrations, runtime SQL goes in .sq files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started"},{"location":"jvm_h2/#in-development","text":"H2 is still incubating, and pieces of the dialect are missing. If you are using it and encounter parts of the dialect which are unsupported, please report at sql-psi","title":"\ud83d\udc77\u200d\u2640\ufe0f IN DEVELOPMENT"},{"location":"jvm_h2/#getting-started-with-h2","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" dialect = \"hsql\" } } SQLDelight needs to know the schema of your database. If you always create your schema fresh with create table statements, you'll want to put those statements in .sq files, as shown here . If you apply migration files to an already running database, you'll want to rename your migration files to .sqm files, as shown here","title":"Getting Started with H2"},{"location":"jvm_h2/#fresh-schema","text":"Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); In the same .sq files you can start placing your sql statements to be executed at runtime .","title":"Fresh Schema"},{"location":"jvm_h2/#migration-schema","text":"First, configure gradle to use migrations to assemble the schema: sqldelight { Database { ... sourceFolders = [ \"sqldelight\" ] deriveSchemaFromMigrations = true } } Migration files have the extension .sqm , and must have a number in their file name indicating what order the migration file runs in. For example, given this hierarchy: src --main ----sqldelight ------v1__backend.sqm ------v2__backend.sqm SQLDelight will create the schema by applying v1__backend.sqm and then v2__backend.sqm . Place your normal SQL CREATE / ALTER statements in these files. If another service reads from your migrations files (like flyway), make sure to read the info on migrations and how to output valid SQL.","title":"Migration Schema"},{"location":"jvm_h2/#typesafe-sql","text":"Before you're able to execute SQL statements at runtime, you need to create a SqlDriver to connect to your database. The easiest way is off of a DataSource that you would get from hikari or other connection managers. dependencies { implementation \"com.squareup.sqldelight:jdbc-driver:1.5.2\" } val driver : SqlDriver = dataSource . asJdbcDriver () Regardless of if you specify the schema as fresh create table statements or through migrations, runtime SQL goes in .sq files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Typesafe SQL"},{"location":"jvm_h2/custom_projections/","text":"Projections By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"jvm_h2/custom_projections/#projections","text":"By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"jvm_h2/gradle/","text":"Gradle build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"sqldelight\" , \"resources\" ] // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // Whether or not to use .sqm files as the source of truth for the schema. // Defaults to false deriveSchemaFromMigrations = true // If set, configures a task to output the .sqm migration files as valid SQL // Defaults to null migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) // The extension format to use for generated valid SQL migrations. // Defaults to \".sql\" migrationOutputFileFormat = \".sql\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = [ \"sqldelight\" , \"resources\" ] dependency project ( ' : OtherProject ' ) deriveSchemaFromMigrations = true migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" } } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"jvm_h2/gradle/#gradle","text":"build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"sqldelight\" , \"resources\" ] // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // Whether or not to use .sqm files as the source of truth for the schema. // Defaults to false deriveSchemaFromMigrations = true // If set, configures a task to output the .sqm migration files as valid SQL // Defaults to null migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) // The extension format to use for generated valid SQL migrations. // Defaults to \".sql\" migrationOutputFileFormat = \".sql\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = [ \"sqldelight\" , \"resources\" ] dependency project ( ' : OtherProject ' ) deriveSchemaFromMigrations = true migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" } }","title":"Gradle"},{"location":"jvm_h2/gradle/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"jvm_h2/grouping_statements/","text":"You can group multiple SQL statements together to be executed at once: upsert { UPDATE myTable SET column1 = : column1 , column2 = : column2 WHERE id = : id ; INSERT OR IGNORE INTO myTable ( id , column1 , column2 ) VALUES (: id , : column1 , : column2 ); }","title":"Grouping Statements"},{"location":"jvm_h2/intellij_plugin/","text":"IntelliJ Plugin The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"jvm_h2/intellij_plugin/#intellij-plugin","text":"The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"jvm_h2/migrations/","text":"Valid SQL migrations Using custom kotlin types in migration files means those files are no longer valid SQL. You can optionally configure a gradle task to output your migration files as valid SQL for other services to read from: sqldelight { Database { migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" // Defaults to .sql } } This creates a new task generateMainDatabaseMigrations which will output your .sqm files as valid SQL in the output directory, with the output format. Create a dependency from your compileKotlin task so that services such as flyway will have the files available on their classpath: compileKotlin . configure { dependsOn \"generateMainDatabaseMigrations\" }","title":"Migrations"},{"location":"jvm_h2/migrations/#valid-sql-migrations","text":"Using custom kotlin types in migration files means those files are no longer valid SQL. You can optionally configure a gradle task to output your migration files as valid SQL for other services to read from: sqldelight { Database { migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" // Defaults to .sql } } This creates a new task generateMainDatabaseMigrations which will output your .sqm files as valid SQL in the output directory, with the output format. Create a dependency from your compileKotlin task so that services such as flyway will have the files available on their classpath: compileKotlin . configure { dependsOn \"generateMainDatabaseMigrations\" }","title":"Valid SQL migrations"},{"location":"jvm_h2/query_arguments/","text":"Bind Args .sq files use the exact same syntax as MySQL, including bound arguments. If a statement contains bind args, the associated method will require corresponding arguments. Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Arguments"},{"location":"jvm_h2/query_arguments/#bind-args","text":".sq files use the exact same syntax as MySQL, including bound arguments. If a statement contains bind args, the associated method will require corresponding arguments.","title":"Bind Args"},{"location":"jvm_h2/query_arguments/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"jvm_h2/query_arguments/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"jvm_h2/query_arguments/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"jvm_h2/query_arguments/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"jvm_h2/transactions/","text":"API If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () } Rollback Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size } Callbacks You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Transactions"},{"location":"jvm_h2/transactions/#api","text":"If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () }","title":"API"},{"location":"jvm_h2/transactions/#rollback","text":"Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size }","title":"Rollback"},{"location":"jvm_h2/transactions/#callbacks","text":"You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Callbacks"},{"location":"jvm_h2/types/","text":"MySQL Types SQLDelight column definitions are identical to regular H2 column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. CREATE TABLE some_types ( some_tiny_int TINYINT , -- Retrieved as Int some_small_int SMALLINT , -- Retrieved as Int some_integer INTEGER , -- Retrieved as Int some_int INT , -- Retrieved as Int some_big_int BIGINT , -- Retrieved as Long some_decimal DECIMAL ( 6 , 5 ), -- Retrieved as Int some_dec DEC ( 6 , 5 ), -- Retrieved as Int some_numeric NUMERIC ( 6 , 5 ), -- Retrieved as Int some_float FLOAT ( 6 ), -- Retrieved as Double some_real REAL , -- Retrieved as Double some_double DOUBLE , -- Retrieved as Double some_double_precision DOUBLE PRECISION , -- Retrieved as Double some_boolean BOOLEAN , -- Retrieved as Boolean some_date DATE , -- Retrieved as String some_time TIME , -- Retrieved as String some_timestamp2 TIMESTAMP ( 6 ), -- Retrieved as String some_char CHAR , -- Retrieved as String some_character CHARACTER ( 6 ), -- Retrieved as String some_char_varying CHAR VARYING ( 6 ), -- Retrieved as String some_longvarchar LONGVARCHAR , -- Retrieved as String some_character_varying CHARACTER VARYING ( 6 ), -- Retrieved as String some_varchar VARCHAR ( 16 ), -- Retrieved as String some_clo CHARACTER LARGE OBJECT ( 16 ), -- Retrieved as String some_clob clob ( 16 M CHARACTERS ), -- Retrieved as String some_binary BINARY , -- Retrieved as ByteArray some_binary2 BINARY ( 6 ), -- Retrieved as ByteArray some_longvarbinary LONGVARBINARY , -- Retrieved as ByteArray some_longvarbinary2 LONGVARBINARY ( 6 ), -- Retrieved as ByteArray some_binary_varying BINARY VARYING ( 6 ), -- Retrieved as ByteArray some_varbinary VARBINARY ( 8 ), -- Retrieved as ByteArray some_uuid UUID , -- Retrieved as ByteArray some_blob BLOB , -- Retrieved as ByteArray some_blo BINARY LARGE OBJECT ( 6 ), -- Retrieved as ByteArray some_bit BIT , -- Retrieved as ByteArray some_bit2 BIT ( 6 ), -- Retrieved as ByteArray some_bit_varying BIT VARYING ( 6 ), -- Retrieved as ByteArray some_interval INTERVAL YEAR TO MONTH , -- Retrieved as ByteArray some_interval2 INTERVAL YEAR ( 3 ), -- Retrieved as ByteArray some_interval3 INTERVAL DAY ( 4 ) TO HOUR , -- Retrieved as ByteArray some_interval4 INTERVAL MINUTE ( 4 ) TO SECOND ( 6 ), -- Retrieved as ByteArray some_interval5 INTERVAL SECOND ( 4 , 6 ) -- Retrieved as ByteArray ); Custom Column Types If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) ) Enums As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) ) Custom Types in Migrations If migrations are the schema's source of truth, you can also specify the exposed kotlin type when altering a table: import kotlin . collection . List ; ALTER TABLE my_table ADD COLUMN new_column VARCHAR ( 8 ) AS List < String > ;","title":"Types"},{"location":"jvm_h2/types/#mysql-types","text":"SQLDelight column definitions are identical to regular H2 column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. CREATE TABLE some_types ( some_tiny_int TINYINT , -- Retrieved as Int some_small_int SMALLINT , -- Retrieved as Int some_integer INTEGER , -- Retrieved as Int some_int INT , -- Retrieved as Int some_big_int BIGINT , -- Retrieved as Long some_decimal DECIMAL ( 6 , 5 ), -- Retrieved as Int some_dec DEC ( 6 , 5 ), -- Retrieved as Int some_numeric NUMERIC ( 6 , 5 ), -- Retrieved as Int some_float FLOAT ( 6 ), -- Retrieved as Double some_real REAL , -- Retrieved as Double some_double DOUBLE , -- Retrieved as Double some_double_precision DOUBLE PRECISION , -- Retrieved as Double some_boolean BOOLEAN , -- Retrieved as Boolean some_date DATE , -- Retrieved as String some_time TIME , -- Retrieved as String some_timestamp2 TIMESTAMP ( 6 ), -- Retrieved as String some_char CHAR , -- Retrieved as String some_character CHARACTER ( 6 ), -- Retrieved as String some_char_varying CHAR VARYING ( 6 ), -- Retrieved as String some_longvarchar LONGVARCHAR , -- Retrieved as String some_character_varying CHARACTER VARYING ( 6 ), -- Retrieved as String some_varchar VARCHAR ( 16 ), -- Retrieved as String some_clo CHARACTER LARGE OBJECT ( 16 ), -- Retrieved as String some_clob clob ( 16 M CHARACTERS ), -- Retrieved as String some_binary BINARY , -- Retrieved as ByteArray some_binary2 BINARY ( 6 ), -- Retrieved as ByteArray some_longvarbinary LONGVARBINARY , -- Retrieved as ByteArray some_longvarbinary2 LONGVARBINARY ( 6 ), -- Retrieved as ByteArray some_binary_varying BINARY VARYING ( 6 ), -- Retrieved as ByteArray some_varbinary VARBINARY ( 8 ), -- Retrieved as ByteArray some_uuid UUID , -- Retrieved as ByteArray some_blob BLOB , -- Retrieved as ByteArray some_blo BINARY LARGE OBJECT ( 6 ), -- Retrieved as ByteArray some_bit BIT , -- Retrieved as ByteArray some_bit2 BIT ( 6 ), -- Retrieved as ByteArray some_bit_varying BIT VARYING ( 6 ), -- Retrieved as ByteArray some_interval INTERVAL YEAR TO MONTH , -- Retrieved as ByteArray some_interval2 INTERVAL YEAR ( 3 ), -- Retrieved as ByteArray some_interval3 INTERVAL DAY ( 4 ) TO HOUR , -- Retrieved as ByteArray some_interval4 INTERVAL MINUTE ( 4 ) TO SECOND ( 6 ), -- Retrieved as ByteArray some_interval5 INTERVAL SECOND ( 4 , 6 ) -- Retrieved as ByteArray );","title":"MySQL Types"},{"location":"jvm_h2/types/#custom-column-types","text":"If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) )","title":"Custom Column Types"},{"location":"jvm_h2/types/#enums","text":"As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Enums"},{"location":"jvm_h2/types/#custom-types-in-migrations","text":"If migrations are the schema's source of truth, you can also specify the exposed kotlin type when altering a table: import kotlin . collection . List ; ALTER TABLE my_table ADD COLUMN new_column VARCHAR ( 8 ) AS List < String > ;","title":"Custom Types in Migrations"},{"location":"jvm_mysql/","text":"Getting Started with MySQL First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" dialect = \"mysql\" } } SQLDelight needs to know the schema of your database. If you always create your schema fresh with create table statements, you'll want to put those statements in .sq files, as shown here . If you apply migration files to an already running database, you'll want to rename your migration files to .sqm files, as shown here Fresh Schema Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); In the same .sq files you can start placing your sql statements to be executed at runtime . Migration Schema First, configure gradle to use migrations to assemble the schema: sqldelight { Database { ... sourceFolders = [ \"sqldelight\" ] deriveSchemaFromMigrations = true } } Migration files have the extension .sqm , and must have a number in their file name indicating what order the migration file runs in. For example, given this hierarchy: src --main ----sqldelight ------v1__backend.sqm ------v2__backend.sqm SQLDelight will create the schema by applying v1__backend.sqm and then v2__backend.sqm . Place your normal SQL CREATE / ALTER statements in these files. If another service reads from your migrations files (like flyway), make sure to read the info on migrations and how to output valid SQL. Typesafe SQL Before you're able to execute SQL statements at runtime, you need to create a SqlDriver to connect to your database. The easiest way is off of a DataSource that you would get from hikari or other connection managers. dependencies { implementation \"com.squareup.sqldelight:jdbc-driver:1.5.2\" } val driver : SqlDriver = dataSource . asJdbcDriver () Regardless of if you specify the schema as fresh create table statements or through migrations, runtime SQL goes in .sq files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started"},{"location":"jvm_mysql/#getting-started-with-mysql","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" dialect = \"mysql\" } } SQLDelight needs to know the schema of your database. If you always create your schema fresh with create table statements, you'll want to put those statements in .sq files, as shown here . If you apply migration files to an already running database, you'll want to rename your migration files to .sqm files, as shown here","title":"Getting Started with MySQL"},{"location":"jvm_mysql/#fresh-schema","text":"Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); In the same .sq files you can start placing your sql statements to be executed at runtime .","title":"Fresh Schema"},{"location":"jvm_mysql/#migration-schema","text":"First, configure gradle to use migrations to assemble the schema: sqldelight { Database { ... sourceFolders = [ \"sqldelight\" ] deriveSchemaFromMigrations = true } } Migration files have the extension .sqm , and must have a number in their file name indicating what order the migration file runs in. For example, given this hierarchy: src --main ----sqldelight ------v1__backend.sqm ------v2__backend.sqm SQLDelight will create the schema by applying v1__backend.sqm and then v2__backend.sqm . Place your normal SQL CREATE / ALTER statements in these files. If another service reads from your migrations files (like flyway), make sure to read the info on migrations and how to output valid SQL.","title":"Migration Schema"},{"location":"jvm_mysql/#typesafe-sql","text":"Before you're able to execute SQL statements at runtime, you need to create a SqlDriver to connect to your database. The easiest way is off of a DataSource that you would get from hikari or other connection managers. dependencies { implementation \"com.squareup.sqldelight:jdbc-driver:1.5.2\" } val driver : SqlDriver = dataSource . asJdbcDriver () Regardless of if you specify the schema as fresh create table statements or through migrations, runtime SQL goes in .sq files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Typesafe SQL"},{"location":"jvm_mysql/custom_projections/","text":"Projections By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"jvm_mysql/custom_projections/#projections","text":"By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"jvm_mysql/gradle/","text":"Gradle build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"sqldelight\" , \"resources\" ] // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // Whether or not to use .sqm files as the source of truth for the schema. // Defaults to false deriveSchemaFromMigrations = true // If set, configures a task to output the .sqm migration files as valid SQL // Defaults to null migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) // The extension format to use for generated valid SQL migrations. // Defaults to \".sql\" migrationOutputFileFormat = \".sql\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = [ \"sqldelight\" , \"resources\" ] dependency project ( ' : OtherProject ' ) deriveSchemaFromMigrations = true migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" } } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"jvm_mysql/gradle/#gradle","text":"build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"sqldelight\" , \"resources\" ] // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // Whether or not to use .sqm files as the source of truth for the schema. // Defaults to false deriveSchemaFromMigrations = true // If set, configures a task to output the .sqm migration files as valid SQL // Defaults to null migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) // The extension format to use for generated valid SQL migrations. // Defaults to \".sql\" migrationOutputFileFormat = \".sql\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = [ \"sqldelight\" , \"resources\" ] dependency project ( ' : OtherProject ' ) deriveSchemaFromMigrations = true migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" } }","title":"Gradle"},{"location":"jvm_mysql/gradle/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"jvm_mysql/grouping_statements/","text":"You can group multiple SQL statements together to be executed at once: upsert { UPDATE myTable SET column1 = : column1 , column2 = : column2 WHERE id = : id ; INSERT OR IGNORE INTO myTable ( id , column1 , column2 ) VALUES (: id , : column1 , : column2 ); }","title":"Grouping Statements"},{"location":"jvm_mysql/intellij_plugin/","text":"IntelliJ Plugin The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"jvm_mysql/intellij_plugin/#intellij-plugin","text":"The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"jvm_mysql/migrations/","text":"Valid SQL migrations Using custom kotlin types in migration files means those files are no longer valid SQL. You can optionally configure a gradle task to output your migration files as valid SQL for other services to read from: sqldelight { Database { migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" // Defaults to .sql } } This creates a new task generateMainDatabaseMigrations which will output your .sqm files as valid SQL in the output directory, with the output format. Create a dependency from your compileKotlin task so that services such as flyway will have the files available on their classpath: compileKotlin . configure { dependsOn \"generateMainDatabaseMigrations\" }","title":"Migrations"},{"location":"jvm_mysql/migrations/#valid-sql-migrations","text":"Using custom kotlin types in migration files means those files are no longer valid SQL. You can optionally configure a gradle task to output your migration files as valid SQL for other services to read from: sqldelight { Database { migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" // Defaults to .sql } } This creates a new task generateMainDatabaseMigrations which will output your .sqm files as valid SQL in the output directory, with the output format. Create a dependency from your compileKotlin task so that services such as flyway will have the files available on their classpath: compileKotlin . configure { dependsOn \"generateMainDatabaseMigrations\" }","title":"Valid SQL migrations"},{"location":"jvm_mysql/query_arguments/","text":"Bind Args .sq files use the exact same syntax as MySQL, including bound arguments. If a statement contains bind args, the associated method will require corresponding arguments. Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Arguments"},{"location":"jvm_mysql/query_arguments/#bind-args","text":".sq files use the exact same syntax as MySQL, including bound arguments. If a statement contains bind args, the associated method will require corresponding arguments.","title":"Bind Args"},{"location":"jvm_mysql/query_arguments/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"jvm_mysql/query_arguments/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"jvm_mysql/query_arguments/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"jvm_mysql/query_arguments/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"jvm_mysql/transactions/","text":"API If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () } Rollback Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size } Callbacks You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Transactions"},{"location":"jvm_mysql/transactions/#api","text":"If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () }","title":"API"},{"location":"jvm_mysql/transactions/#rollback","text":"Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size }","title":"Rollback"},{"location":"jvm_mysql/transactions/#callbacks","text":"You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Callbacks"},{"location":"jvm_mysql/types/","text":"MySQL Types SQLDelight column definitions are identical to regular MySQL column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. CREATE TABLE some_types ( some_tiny_int TINYINT , -- Retrieved as Int some_small_int SMALLINT , -- Retrieved as Int some_medium_int MEDIUMINT , -- Retrieved as Int some_integer INTEGER , -- Retrieved as Int some_int INT , -- Retrieved as Int some_big_int BIGINT , -- Retrieved as Long some_decimal DECIMAL , -- Retrieved as Double some_dec DEC , -- Retrieved as Double some_fixed FIXED , -- Retrieved as Double some_numeric NUMERIC , -- Retrieved as Double some_float FLOAT , -- Retrieved as Double some_real REAL , -- Retrieved as Double some_double_prec DOUBLE PRECISION , -- Retrieved as Double some_double DOUBLE , -- Retrieved as Double some_date DATE , -- Retrieved as String some_time TIME , -- Retrieved as String some_datetime DATETIME , -- Retrieved as String some_timestamp TIMESTAMP , -- Retrieved as String some_year YEAR , -- Retrieved as String some_char CHAR , -- Retrieved as String some_varchar VARCHAR ( 16 ), -- Retrieved as String some_tiny_text TINYTEXT , -- Retrieved as String some_text TEXT , -- Retrieved as String some_medium_text MEDIUMTEXT , -- Retrieved as String some_long_text LONGTEXT , -- Retrieved as String some_enum ENUM , -- Retrieved as String some_set SET , -- Retrieved as String some_varbinary VARBINARY ( 8 ), -- Retrieved as ByteArray some_blob BLOB ( 8 , 8 ), -- Retrieved as ByteArray some_binary BINARY , -- Retrieved as ByteArray some_json JSON , -- Retrieved as String some_boolean BOOLEAN , -- Retrieved as Boolean ); Custom Column Types If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) ) Enums As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) ) Custom Types in Migrations If migrations are the schema's source of truth, you can also specify the exposed kotlin type when altering a table: import kotlin . collection . List ; ALTER TABLE my_table ADD COLUMN new_column VARCHAR ( 8 ) AS List < String > ;","title":"Types"},{"location":"jvm_mysql/types/#mysql-types","text":"SQLDelight column definitions are identical to regular MySQL column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. CREATE TABLE some_types ( some_tiny_int TINYINT , -- Retrieved as Int some_small_int SMALLINT , -- Retrieved as Int some_medium_int MEDIUMINT , -- Retrieved as Int some_integer INTEGER , -- Retrieved as Int some_int INT , -- Retrieved as Int some_big_int BIGINT , -- Retrieved as Long some_decimal DECIMAL , -- Retrieved as Double some_dec DEC , -- Retrieved as Double some_fixed FIXED , -- Retrieved as Double some_numeric NUMERIC , -- Retrieved as Double some_float FLOAT , -- Retrieved as Double some_real REAL , -- Retrieved as Double some_double_prec DOUBLE PRECISION , -- Retrieved as Double some_double DOUBLE , -- Retrieved as Double some_date DATE , -- Retrieved as String some_time TIME , -- Retrieved as String some_datetime DATETIME , -- Retrieved as String some_timestamp TIMESTAMP , -- Retrieved as String some_year YEAR , -- Retrieved as String some_char CHAR , -- Retrieved as String some_varchar VARCHAR ( 16 ), -- Retrieved as String some_tiny_text TINYTEXT , -- Retrieved as String some_text TEXT , -- Retrieved as String some_medium_text MEDIUMTEXT , -- Retrieved as String some_long_text LONGTEXT , -- Retrieved as String some_enum ENUM , -- Retrieved as String some_set SET , -- Retrieved as String some_varbinary VARBINARY ( 8 ), -- Retrieved as ByteArray some_blob BLOB ( 8 , 8 ), -- Retrieved as ByteArray some_binary BINARY , -- Retrieved as ByteArray some_json JSON , -- Retrieved as String some_boolean BOOLEAN , -- Retrieved as Boolean );","title":"MySQL Types"},{"location":"jvm_mysql/types/#custom-column-types","text":"If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) )","title":"Custom Column Types"},{"location":"jvm_mysql/types/#enums","text":"As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Enums"},{"location":"jvm_mysql/types/#custom-types-in-migrations","text":"If migrations are the schema's source of truth, you can also specify the exposed kotlin type when altering a table: import kotlin . collection . List ; ALTER TABLE my_table ADD COLUMN new_column VARCHAR ( 8 ) AS List < String > ;","title":"Custom Types in Migrations"},{"location":"jvm_postgresql/","text":"\ud83d\udc77\u200d\u2640\ufe0f IN DEVELOPMENT PostgreSQL is still incubating, and pieces of the dialect are missing. If you are using it and encounter parts of the dialect which are unsupported, please report at sql-psi Getting Started with PostgreSQL First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" dialect = \"postgresql\" } } SQLDelight needs to know the schema of your database. If you always create your schema fresh with create table statements, you'll want to put those statements in .sq files, as shown here . If you apply migration files to an already running database, you'll want to rename your migration files to .sqm files, as shown here Fresh Schema Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); In the same .sq files you can start placing your sql statements to be executed at runtime . Migration Schema First, configure gradle to use migrations to assemble the schema: sqldelight { Database { ... sourceFolders = [ \"sqldelight\" ] deriveSchemaFromMigrations = true } } Migration files have the extension .sqm , and must have a number in their file name indicating what order the migration file runs in. For example, given this hierarchy: src --main ----sqldelight ------v1__backend.sqm ------v2__backend.sqm SQLDelight will create the schema by applying v1__backend.sqm and then v2__backend.sqm . Place your normal SQL CREATE / ALTER statements in these files. If another service reads from your migrations files (like flyway), make sure to read the info on migrations and how to output valid SQL. Typesafe SQL Before you're able to execute SQL statements at runtime, you need to create a SqlDriver to connect to your database. The easiest way is off of a DataSource that you would get from hikari or other connection managers. dependencies { implementation \"com.squareup.sqldelight:jdbc-driver:1.5.2\" } val driver : SqlDriver = dataSource . asJdbcDriver () Regardless of if you specify the schema as fresh create table statements or through migrations, runtime SQL goes in .sq files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started"},{"location":"jvm_postgresql/#in-development","text":"PostgreSQL is still incubating, and pieces of the dialect are missing. If you are using it and encounter parts of the dialect which are unsupported, please report at sql-psi","title":"\ud83d\udc77\u200d\u2640\ufe0f IN DEVELOPMENT"},{"location":"jvm_postgresql/#getting-started-with-postgresql","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" dialect = \"postgresql\" } } SQLDelight needs to know the schema of your database. If you always create your schema fresh with create table statements, you'll want to put those statements in .sq files, as shown here . If you apply migration files to an already running database, you'll want to rename your migration files to .sqm files, as shown here","title":"Getting Started with PostgreSQL"},{"location":"jvm_postgresql/#fresh-schema","text":"Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); In the same .sq files you can start placing your sql statements to be executed at runtime .","title":"Fresh Schema"},{"location":"jvm_postgresql/#migration-schema","text":"First, configure gradle to use migrations to assemble the schema: sqldelight { Database { ... sourceFolders = [ \"sqldelight\" ] deriveSchemaFromMigrations = true } } Migration files have the extension .sqm , and must have a number in their file name indicating what order the migration file runs in. For example, given this hierarchy: src --main ----sqldelight ------v1__backend.sqm ------v2__backend.sqm SQLDelight will create the schema by applying v1__backend.sqm and then v2__backend.sqm . Place your normal SQL CREATE / ALTER statements in these files. If another service reads from your migrations files (like flyway), make sure to read the info on migrations and how to output valid SQL.","title":"Migration Schema"},{"location":"jvm_postgresql/#typesafe-sql","text":"Before you're able to execute SQL statements at runtime, you need to create a SqlDriver to connect to your database. The easiest way is off of a DataSource that you would get from hikari or other connection managers. dependencies { implementation \"com.squareup.sqldelight:jdbc-driver:1.5.2\" } val driver : SqlDriver = dataSource . asJdbcDriver () Regardless of if you specify the schema as fresh create table statements or through migrations, runtime SQL goes in .sq files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Typesafe SQL"},{"location":"jvm_postgresql/custom_projections/","text":"Projections By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"jvm_postgresql/custom_projections/#projections","text":"By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"jvm_postgresql/gradle/","text":"Gradle build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"sqldelight\" , \"resources\" ] // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // Whether or not to use .sqm files as the source of truth for the schema. // Defaults to false deriveSchemaFromMigrations = true // If set, configures a task to output the .sqm migration files as valid SQL // Defaults to null migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) // The extension format to use for generated valid SQL migrations. // Defaults to \".sql\" migrationOutputFileFormat = \".sql\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = [ \"sqldelight\" , \"resources\" ] dependency project ( ' : OtherProject ' ) deriveSchemaFromMigrations = true migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" } } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"jvm_postgresql/gradle/#gradle","text":"build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"sqldelight\" , \"resources\" ] // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // Whether or not to use .sqm files as the source of truth for the schema. // Defaults to false deriveSchemaFromMigrations = true // If set, configures a task to output the .sqm migration files as valid SQL // Defaults to null migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) // The extension format to use for generated valid SQL migrations. // Defaults to \".sql\" migrationOutputFileFormat = \".sql\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = [ \"sqldelight\" , \"resources\" ] dependency project ( ' : OtherProject ' ) deriveSchemaFromMigrations = true migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" } }","title":"Gradle"},{"location":"jvm_postgresql/gradle/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"jvm_postgresql/grouping_statements/","text":"You can group multiple SQL statements together to be executed at once: upsert { UPDATE myTable SET column1 = : column1 , column2 = : column2 WHERE id = : id ; INSERT OR IGNORE INTO myTable ( id , column1 , column2 ) VALUES (: id , : column1 , : column2 ); }","title":"Grouping Statements"},{"location":"jvm_postgresql/intellij_plugin/","text":"IntelliJ Plugin The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"jvm_postgresql/intellij_plugin/#intellij-plugin","text":"The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"jvm_postgresql/migrations/","text":"Valid SQL migrations Using custom kotlin types in migration files means those files are no longer valid SQL. You can optionally configure a gradle task to output your migration files as valid SQL for other services to read from: sqldelight { Database { migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" // Defaults to .sql } } This creates a new task generateMainDatabaseMigrations which will output your .sqm files as valid SQL in the output directory, with the output format. Create a dependency from your compileKotlin task so that services such as flyway will have the files available on their classpath: compileKotlin . configure { dependsOn \"generateMainDatabaseMigrations\" }","title":"Migrations"},{"location":"jvm_postgresql/migrations/#valid-sql-migrations","text":"Using custom kotlin types in migration files means those files are no longer valid SQL. You can optionally configure a gradle task to output your migration files as valid SQL for other services to read from: sqldelight { Database { migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" // Defaults to .sql } } This creates a new task generateMainDatabaseMigrations which will output your .sqm files as valid SQL in the output directory, with the output format. Create a dependency from your compileKotlin task so that services such as flyway will have the files available on their classpath: compileKotlin . configure { dependsOn \"generateMainDatabaseMigrations\" }","title":"Valid SQL migrations"},{"location":"jvm_postgresql/query_arguments/","text":"Bind Args .sq files use the exact same syntax as PostgreSQL, including bound arguments. If a statement contains bind args, the associated method will require corresponding arguments. Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Arguments"},{"location":"jvm_postgresql/query_arguments/#bind-args","text":".sq files use the exact same syntax as PostgreSQL, including bound arguments. If a statement contains bind args, the associated method will require corresponding arguments.","title":"Bind Args"},{"location":"jvm_postgresql/query_arguments/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"jvm_postgresql/query_arguments/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"jvm_postgresql/query_arguments/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"jvm_postgresql/query_arguments/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"jvm_postgresql/transactions/","text":"API If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () } Rollback Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size } Callbacks You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Transactions"},{"location":"jvm_postgresql/transactions/#api","text":"If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () }","title":"API"},{"location":"jvm_postgresql/transactions/#rollback","text":"Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size }","title":"Rollback"},{"location":"jvm_postgresql/transactions/#callbacks","text":"You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Callbacks"},{"location":"jvm_postgresql/types/","text":"PostgreSQL Types SQLDelight column definitions are identical to regular PostgreSQL column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. CREATE TABLE some_types ( some_smallint SMALLINT , -- Retrieved as Short some_int2 INT2 , -- Retrieved as Short some_integer INTEGER , -- Retrieved as Int some_int INT , -- Retrieved as Int some_int4 INT4 , -- Retrieved as Int some_bigint BIGINT , -- Retrieved as Long some_int8 INT8 , -- Retrieved as Long some_numeric NUMERIC , -- Retrieved as Double some_decimal DECIMAL , -- Retrieved as Double some_real REAL , -- Retrieved as Double some_float4 FLOAT4 , -- Retrieved as Double some_double_prec DOUBLE PRECISION , -- Retrieved as Double some_float8 FLOAT8 , -- Retrieved as Double some_smallserial SMALLSERIAL , -- Retrieved as Short some_serial2 SERIAL2 , -- Retrieved as Short some_serial SERIAL , -- Retrieved as Int some_serial4 SERIAL4 , -- Retrieved as Int some_bigserial BIGSERIAL , -- Retrieved as Long some_serial8 SERIAL8 , -- Retrieved as Long some_character CHARACTER , -- Retrieved as String some_char CHAR , -- Retrieved as String some_char_var CHARACTER VARYING ( 16 ), -- Retrieved as String some_varchar VARCHAR ( 16 ), -- Retrieved as String some_text TEXT , -- Retrieved as String some_date DATE , -- Retrieved as String some_time TIME , -- Retrieved as String some_timestamp TIMESTAMP , -- Retrieved as String some_json JSON -- Retrieved as String ); Custom Column Types If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) ) Enums As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) ) Custom Types in Migrations If migrations are the schema's source of truth, you can also specify the exposed kotlin type when altering a table: import kotlin . collection . List ; ALTER TABLE my_table ADD COLUMN new_column VARCHAR ( 8 ) AS List < String > ;","title":"Types"},{"location":"jvm_postgresql/types/#postgresql-types","text":"SQLDelight column definitions are identical to regular PostgreSQL column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. CREATE TABLE some_types ( some_smallint SMALLINT , -- Retrieved as Short some_int2 INT2 , -- Retrieved as Short some_integer INTEGER , -- Retrieved as Int some_int INT , -- Retrieved as Int some_int4 INT4 , -- Retrieved as Int some_bigint BIGINT , -- Retrieved as Long some_int8 INT8 , -- Retrieved as Long some_numeric NUMERIC , -- Retrieved as Double some_decimal DECIMAL , -- Retrieved as Double some_real REAL , -- Retrieved as Double some_float4 FLOAT4 , -- Retrieved as Double some_double_prec DOUBLE PRECISION , -- Retrieved as Double some_float8 FLOAT8 , -- Retrieved as Double some_smallserial SMALLSERIAL , -- Retrieved as Short some_serial2 SERIAL2 , -- Retrieved as Short some_serial SERIAL , -- Retrieved as Int some_serial4 SERIAL4 , -- Retrieved as Int some_bigserial BIGSERIAL , -- Retrieved as Long some_serial8 SERIAL8 , -- Retrieved as Long some_character CHARACTER , -- Retrieved as String some_char CHAR , -- Retrieved as String some_char_var CHARACTER VARYING ( 16 ), -- Retrieved as String some_varchar VARCHAR ( 16 ), -- Retrieved as String some_text TEXT , -- Retrieved as String some_date DATE , -- Retrieved as String some_time TIME , -- Retrieved as String some_timestamp TIMESTAMP , -- Retrieved as String some_json JSON -- Retrieved as String );","title":"PostgreSQL Types"},{"location":"jvm_postgresql/types/#custom-column-types","text":"If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) )","title":"Custom Column Types"},{"location":"jvm_postgresql/types/#enums","text":"As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Enums"},{"location":"jvm_postgresql/types/#custom-types-in-migrations","text":"If migrations are the schema's source of truth, you can also specify the exposed kotlin type when altering a table: import kotlin . collection . List ; ALTER TABLE my_table ADD COLUMN new_column VARCHAR ( 8 ) AS List < String > ;","title":"Custom Types in Migrations"},{"location":"jvm_sqlite/","text":"Getting Started on JVM with SQLite First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } } Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: dependencies { implementation \"com.squareup.sqldelight:sqlite-driver:1.5.2\" } val driver : SqlDriver = JdbcSqliteDriver ( JdbcSqliteDriver . IN_MEMORY ) Database . Schema . create ( driver ) SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started"},{"location":"jvm_sqlite/#getting-started-on-jvm-with-sqlite","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } } Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: dependencies { implementation \"com.squareup.sqldelight:sqlite-driver:1.5.2\" } val driver : SqlDriver = JdbcSqliteDriver ( JdbcSqliteDriver . IN_MEMORY ) Database . Schema . create ( driver ) SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started on JVM with SQLite"},{"location":"jvm_sqlite/coroutines/","text":"Flow To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions-jvm:1.5.2\" } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Coroutines"},{"location":"jvm_sqlite/coroutines/#flow","text":"To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions-jvm:1.5.2\" } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Flow"},{"location":"jvm_sqlite/custom_projections/","text":"Projections By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"jvm_sqlite/custom_projections/#projections","text":"By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"jvm_sqlite/gradle/","text":"Gradle For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db' or 'src/commonMain/db' for KMM. // Defaults to [\"sqldelight\"] sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" // If set to true, migration files will fail during compilation if there are errors in them. // Defaults to false verifyMigrations = true } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" verifyMigrations = true } } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"jvm_sqlite/gradle/#gradle","text":"For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db' or 'src/commonMain/db' for KMM. // Defaults to [\"sqldelight\"] sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" // If set to true, migration files will fail during compilation if there are errors in them. // Defaults to false verifyMigrations = true } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" verifyMigrations = true } }","title":"Gradle"},{"location":"jvm_sqlite/gradle/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"jvm_sqlite/grouping_statements/","text":"You can group multiple SQL statements together to be executed at once: upsert { UPDATE myTable SET column1 = : column1 , column2 = : column2 WHERE id = : id ; INSERT OR IGNORE INTO myTable ( id , column1 , column2 ) VALUES (: id , : column1 , : column2 ); }","title":"Grouping Statements"},{"location":"jvm_sqlite/intellij_plugin/","text":"IntelliJ Plugin The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"jvm_sqlite/intellij_plugin/#intellij-plugin","text":"The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"jvm_sqlite/migrations/","text":"Migrations The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date. If the driver supports it, migrations are run in a transaction. You should not surround your migrations in BEGIN/END TRANSACTION , as this can cause a crash with some drivers. Versioning The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files. Verifying Migrations You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration. Code Migrations If you run your migration from code and would like to perform data migrations you can use the Database.Schema.migrateWithCallbacks api: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersion ( 3 ) { database . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) Alternatively, it is often useful to receive the SqlDriver as a parameter. In those cases, you can use AfterVersionWithDriver class instead: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersionWithDriver ( 3 ) { it . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) In the following example, if you have 1.sqm, 2.sqm, 3.sqm, 4.sqm, and 5.sqm as migrations, the above callback will happen after 3.sqm completes when the database is on version 4. After the callback it will resume at 4.sqm and complete the remaining migrations, in this case 4.sqm and 5.sqm, meaning the final database version is 6.","title":"Migrations"},{"location":"jvm_sqlite/migrations/#migrations","text":"The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date. If the driver supports it, migrations are run in a transaction. You should not surround your migrations in BEGIN/END TRANSACTION , as this can cause a crash with some drivers.","title":"Migrations"},{"location":"jvm_sqlite/migrations/#versioning","text":"The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files.","title":"Versioning"},{"location":"jvm_sqlite/migrations/#verifying-migrations","text":"You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration.","title":"Verifying Migrations"},{"location":"jvm_sqlite/migrations/#code-migrations","text":"If you run your migration from code and would like to perform data migrations you can use the Database.Schema.migrateWithCallbacks api: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersion ( 3 ) { database . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) Alternatively, it is often useful to receive the SqlDriver as a parameter. In those cases, you can use AfterVersionWithDriver class instead: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersionWithDriver ( 3 ) { it . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) In the following example, if you have 1.sqm, 2.sqm, 3.sqm, 4.sqm, and 5.sqm as migrations, the above callback will happen after 3.sqm completes when the database is on version 4. After the callback it will resume at 4.sqm and complete the remaining migrations, in this case 4.sqm and 5.sqm, meaning the final database version is 6.","title":"Code Migrations"},{"location":"jvm_sqlite/query_arguments/","text":"Bind Args .sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments. Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Arguments"},{"location":"jvm_sqlite/query_arguments/#bind-args","text":".sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments.","title":"Bind Args"},{"location":"jvm_sqlite/query_arguments/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"jvm_sqlite/query_arguments/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"jvm_sqlite/query_arguments/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"jvm_sqlite/query_arguments/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"jvm_sqlite/rxjava/","text":"RxJava To observe a query, depend on the RxJava extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:rxjava3-extensions:1.5.2\" } val players : Observable < List < HockeyPlayer >> = playerQueries . selectAll () . asObservable () . mapToList () Note: For RxJava 2, use rxjava2-extensions as the artifact name.","title":"RxJava"},{"location":"jvm_sqlite/rxjava/#rxjava","text":"To observe a query, depend on the RxJava extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:rxjava3-extensions:1.5.2\" } val players : Observable < List < HockeyPlayer >> = playerQueries . selectAll () . asObservable () . mapToList () Note: For RxJava 2, use rxjava2-extensions as the artifact name.","title":"RxJava"},{"location":"jvm_sqlite/transactions/","text":"API If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () } Rollback Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size } Callbacks You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Transactions"},{"location":"jvm_sqlite/transactions/#api","text":"If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () }","title":"API"},{"location":"jvm_sqlite/transactions/#rollback","text":"Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size }","title":"Rollback"},{"location":"jvm_sqlite/transactions/#callbacks","text":"You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Callbacks"},{"location":"jvm_sqlite/types/","text":"SQLite Types SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 ) Custom Column Types If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) ) Enums As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Types"},{"location":"jvm_sqlite/types/#sqlite-types","text":"SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 )","title":"SQLite Types"},{"location":"jvm_sqlite/types/#custom-column-types","text":"If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) )","title":"Custom Column Types"},{"location":"jvm_sqlite/types/#enums","text":"As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Enums"},{"location":"multiplatform_sqlite/","text":"Getting Started with Multiplatform First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } } Put your SQL statements in a .sq file under src/commonMain/sqldelight . Typically the first statement in the SQL file creates a table. -- src/commonMain/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: kotlin { // The drivers needed will change depending on what platforms you target: sourceSets . androidMain . dependencies { implementation \"com.squareup.sqldelight:android-driver:1.5.2\" } // or sourceSets.iosMain, sourceSets.windowsMain, etc. sourceSets . nativeMain . dependencies { implementation \"com.squareup.sqldelight:native-driver:1.5.2\" } sourceSets . jvmMain . dependencies { implementation \"com.squareup.sqldelight:sqlite-driver:1.5.2\" } } // in src/commonMain/kotlin expect class DriverFactory { expect fun createDriver (): SqlDriver } fun createDatabase ( driverFactory ): Database { val driver = driverFactory . createDriver () val database = Database ( driver ) // Do more work with the database (see below). } // in src/androidMain/kotlin actual class DriverFactory ( private val context : Context ) { actual fun createDriver (): SqlDriver { return AndroidSqliteDriver ( Database . Schema , context , \"test.db\" ) } } // in src/nativeMain/kotlin actual class DriverFactory { actual fun createDriver (): SqlDriver { return NativeSqliteDriver ( Database . Schema , \"test.db\" ) } } // in src/jvmMain/kotlin actual class DriverFactory { actual fun createDriver (): SqlDriver { val driver : SqlDriver = JdbcSqliteDriver ( JdbcSqliteDriver . IN_MEMORY ) Database . Schema . create ( driver ) return driver } } For use with the SqlJs driver, see here . SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started"},{"location":"multiplatform_sqlite/#getting-started-with-multiplatform","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } } Put your SQL statements in a .sq file under src/commonMain/sqldelight . Typically the first statement in the SQL file creates a table. -- src/commonMain/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: kotlin { // The drivers needed will change depending on what platforms you target: sourceSets . androidMain . dependencies { implementation \"com.squareup.sqldelight:android-driver:1.5.2\" } // or sourceSets.iosMain, sourceSets.windowsMain, etc. sourceSets . nativeMain . dependencies { implementation \"com.squareup.sqldelight:native-driver:1.5.2\" } sourceSets . jvmMain . dependencies { implementation \"com.squareup.sqldelight:sqlite-driver:1.5.2\" } } // in src/commonMain/kotlin expect class DriverFactory { expect fun createDriver (): SqlDriver } fun createDatabase ( driverFactory ): Database { val driver = driverFactory . createDriver () val database = Database ( driver ) // Do more work with the database (see below). } // in src/androidMain/kotlin actual class DriverFactory ( private val context : Context ) { actual fun createDriver (): SqlDriver { return AndroidSqliteDriver ( Database . Schema , context , \"test.db\" ) } } // in src/nativeMain/kotlin actual class DriverFactory { actual fun createDriver (): SqlDriver { return NativeSqliteDriver ( Database . Schema , \"test.db\" ) } } // in src/jvmMain/kotlin actual class DriverFactory { actual fun createDriver (): SqlDriver { val driver : SqlDriver = JdbcSqliteDriver ( JdbcSqliteDriver . IN_MEMORY ) Database . Schema . create ( driver ) return driver } } For use with the SqlJs driver, see here . SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started with Multiplatform"},{"location":"multiplatform_sqlite/coroutines/","text":"Flow To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: kotlin { sourceSets . commonMain . dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions:1.5.2\" } } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Coroutines"},{"location":"multiplatform_sqlite/coroutines/#flow","text":"To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: kotlin { sourceSets . commonMain . dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions:1.5.2\" } } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Flow"},{"location":"multiplatform_sqlite/custom_projections/","text":"Projections By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"multiplatform_sqlite/custom_projections/#projections","text":"By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"multiplatform_sqlite/gradle/","text":"Gradle For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db' or 'src/commonMain/db' for KMM. // Defaults to [\"sqldelight\"] sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" // If set to true, migration files will fail during compilation if there are errors in them. // Defaults to false verifyMigrations = true } // For native targets, whether sqlite should be automatically linked. // Defaults to true. linkSqlite = false } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" verifyMigrations = true } linkSqlite = false } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"multiplatform_sqlite/gradle/#gradle","text":"For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db' or 'src/commonMain/db' for KMM. // Defaults to [\"sqldelight\"] sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" // If set to true, migration files will fail during compilation if there are errors in them. // Defaults to false verifyMigrations = true } // For native targets, whether sqlite should be automatically linked. // Defaults to true. linkSqlite = false } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" verifyMigrations = true } linkSqlite = false }","title":"Gradle"},{"location":"multiplatform_sqlite/gradle/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"multiplatform_sqlite/grouping_statements/","text":"You can group multiple SQL statements together to be executed at once: upsert { UPDATE myTable SET column1 = : column1 , column2 = : column2 WHERE id = : id ; INSERT OR IGNORE INTO myTable ( id , column1 , column2 ) VALUES (: id , : column1 , : column2 ); }","title":"Grouping Statements"},{"location":"multiplatform_sqlite/intellij_plugin/","text":"IntelliJ Plugin The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"multiplatform_sqlite/intellij_plugin/#intellij-plugin","text":"The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"multiplatform_sqlite/migrations/","text":"Migrations The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date. If the driver supports it, migrations are run in a transaction. You should not surround your migrations in BEGIN/END TRANSACTION , as this can cause a crash with some drivers. Versioning The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files. Verifying Migrations You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration. Code Migrations If you run your migration from code and would like to perform data migrations you can use the Database.Schema.migrateWithCallbacks api: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersion ( 3 ) { database . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) Alternatively, it is often useful to receive the SqlDriver as a parameter. In those cases, you can use AfterVersionWithDriver class instead: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersionWithDriver ( 3 ) { it . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) In the following example, if you have 1.sqm, 2.sqm, 3.sqm, 4.sqm, and 5.sqm as migrations, the above callback will happen after 3.sqm completes when the database is on version 4. After the callback it will resume at 4.sqm and complete the remaining migrations, in this case 4.sqm and 5.sqm, meaning the final database version is 6.","title":"Migrations"},{"location":"multiplatform_sqlite/migrations/#migrations","text":"The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date. If the driver supports it, migrations are run in a transaction. You should not surround your migrations in BEGIN/END TRANSACTION , as this can cause a crash with some drivers.","title":"Migrations"},{"location":"multiplatform_sqlite/migrations/#versioning","text":"The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files.","title":"Versioning"},{"location":"multiplatform_sqlite/migrations/#verifying-migrations","text":"You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration.","title":"Verifying Migrations"},{"location":"multiplatform_sqlite/migrations/#code-migrations","text":"If you run your migration from code and would like to perform data migrations you can use the Database.Schema.migrateWithCallbacks api: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersion ( 3 ) { database . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) Alternatively, it is often useful to receive the SqlDriver as a parameter. In those cases, you can use AfterVersionWithDriver class instead: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersionWithDriver ( 3 ) { it . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) In the following example, if you have 1.sqm, 2.sqm, 3.sqm, 4.sqm, and 5.sqm as migrations, the above callback will happen after 3.sqm completes when the database is on version 4. After the callback it will resume at 4.sqm and complete the remaining migrations, in this case 4.sqm and 5.sqm, meaning the final database version is 6.","title":"Code Migrations"},{"location":"multiplatform_sqlite/query_arguments/","text":"Bind Args .sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments. Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Arguments"},{"location":"multiplatform_sqlite/query_arguments/#bind-args","text":".sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments.","title":"Bind Args"},{"location":"multiplatform_sqlite/query_arguments/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"multiplatform_sqlite/query_arguments/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"multiplatform_sqlite/query_arguments/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"multiplatform_sqlite/query_arguments/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"multiplatform_sqlite/resources/","text":"Other Resources Guides Introduction to Multiplatform Persistence with SQLDelight Multiplatform Persistence with SQLDelight Samples https://github.com/joreilly/PeopleInSpace (Android/iOS/watchOS/macOS/Web) https://github.com/JakeWharton/SdkSearch (Android/Web) https://github.com/saket/press (Android/macOS) https://github.com/cashapp/sqldelight/tree/master/sample (Android/iOS/Web) https://github.com/russhwolf/To-Do (Android/iOS using Compose/SwiftUI)","title":"Resources"},{"location":"multiplatform_sqlite/resources/#other-resources","text":"","title":"Other Resources"},{"location":"multiplatform_sqlite/resources/#guides","text":"Introduction to Multiplatform Persistence with SQLDelight Multiplatform Persistence with SQLDelight","title":"Guides"},{"location":"multiplatform_sqlite/resources/#samples","text":"https://github.com/joreilly/PeopleInSpace (Android/iOS/watchOS/macOS/Web) https://github.com/JakeWharton/SdkSearch (Android/Web) https://github.com/saket/press (Android/macOS) https://github.com/cashapp/sqldelight/tree/master/sample (Android/iOS/Web) https://github.com/russhwolf/To-Do (Android/iOS using Compose/SwiftUI)","title":"Samples"},{"location":"multiplatform_sqlite/transactions/","text":"API If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () } Rollback Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size } Callbacks You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Transactions"},{"location":"multiplatform_sqlite/transactions/#api","text":"If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () }","title":"API"},{"location":"multiplatform_sqlite/transactions/#rollback","text":"Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size }","title":"Rollback"},{"location":"multiplatform_sqlite/transactions/#callbacks","text":"You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Callbacks"},{"location":"multiplatform_sqlite/types/","text":"SQLite Types SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 ) Custom Column Types If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) ) Enums As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Types"},{"location":"multiplatform_sqlite/types/#sqlite-types","text":"SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 )","title":"SQLite Types"},{"location":"multiplatform_sqlite/types/#custom-column-types","text":"If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) )","title":"Custom Column Types"},{"location":"multiplatform_sqlite/types/#enums","text":"As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Enums"},{"location":"native_sqlite/","text":"Getting started on Kotlin Native with SQLDelight First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } } Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: kotlin { // or sourceSets.iosMain, sourceSets.windowsMain, etc. sourceSets . nativeMain . dependencies { implementation \"com.squareup.sqldelight:native-driver:1.5.2\" } } val driver : SqlDriver = NativeSqliteDriver ( Database . Schema , \"test.db\" ) SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality. Reader Connection Pools Disk databases can (optionally) have multiple reader connections. To configure the reader pool, pass the maxReaderConnections parameter to the various constructors of NativeSqliteDriver : val driver : SqlDriver = NativeSqliteDriver ( Database . Schema , \"test.db\" , maxReaderConnections = 4 ) Reader connections are only used to run queries outside of a transaction. Any write calls, and anything in a transaction, uses a singe connection dedicated to transactions.","title":"Getting Started"},{"location":"native_sqlite/#getting-started-on-kotlin-native-with-sqldelight","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.5.2' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } } Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: kotlin { // or sourceSets.iosMain, sourceSets.windowsMain, etc. sourceSets . nativeMain . dependencies { implementation \"com.squareup.sqldelight:native-driver:1.5.2\" } } val driver : SqlDriver = NativeSqliteDriver ( Database . Schema , \"test.db\" ) SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting started on Kotlin Native with SQLDelight"},{"location":"native_sqlite/#reader-connection-pools","text":"Disk databases can (optionally) have multiple reader connections. To configure the reader pool, pass the maxReaderConnections parameter to the various constructors of NativeSqliteDriver : val driver : SqlDriver = NativeSqliteDriver ( Database . Schema , \"test.db\" , maxReaderConnections = 4 ) Reader connections are only used to run queries outside of a transaction. Any write calls, and anything in a transaction, uses a singe connection dedicated to transactions.","title":"Reader Connection Pools"},{"location":"native_sqlite/coroutines/","text":"Flow To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: kotlin { sourceSets . commonMain . dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions:1.5.2\" } } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Coroutines"},{"location":"native_sqlite/coroutines/#flow","text":"To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: kotlin { sourceSets . commonMain . dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions:1.5.2\" } } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Flow"},{"location":"native_sqlite/custom_projections/","text":"Projections By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"native_sqlite/custom_projections/#projections","text":"By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"native_sqlite/gradle/","text":"Gradle For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db' or 'src/commonMain/db' for KMM. // Defaults to [\"sqldelight\"] sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" // If set to true, migration files will fail during compilation if there are errors in them. // Defaults to false verifyMigrations = true } // For native targets, whether sqlite should be automatically linked. // Defaults to true. linkSqlite = false } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" verifyMigrations = true } linkSqlite = false } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"native_sqlite/gradle/#gradle","text":"For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db' or 'src/commonMain/db' for KMM. // Defaults to [\"sqldelight\"] sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" // If set to true, migration files will fail during compilation if there are errors in them. // Defaults to false verifyMigrations = true } // For native targets, whether sqlite should be automatically linked. // Defaults to true. linkSqlite = false } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" verifyMigrations = true } linkSqlite = false }","title":"Gradle"},{"location":"native_sqlite/gradle/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"native_sqlite/grouping_statements/","text":"You can group multiple SQL statements together to be executed at once: upsert { UPDATE myTable SET column1 = : column1 , column2 = : column2 WHERE id = : id ; INSERT OR IGNORE INTO myTable ( id , column1 , column2 ) VALUES (: id , : column1 , : column2 ); }","title":"Grouping Statements"},{"location":"native_sqlite/intellij_plugin/","text":"IntelliJ Plugin The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"native_sqlite/intellij_plugin/#intellij-plugin","text":"The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight MarketplaceWidget.setupMarketplaceWidget('install', 8191, \"#intellij-plugin-button\");","title":"IntelliJ Plugin"},{"location":"native_sqlite/migrations/","text":"Migrations The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date. If the driver supports it, migrations are run in a transaction. You should not surround your migrations in BEGIN/END TRANSACTION , as this can cause a crash with some drivers. Versioning The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files. Verifying Migrations You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration. Code Migrations If you run your migration from code and would like to perform data migrations you can use the Database.Schema.migrateWithCallbacks api: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersion ( 3 ) { database . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) Alternatively, it is often useful to receive the SqlDriver as a parameter. In those cases, you can use AfterVersionWithDriver class instead: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersionWithDriver ( 3 ) { it . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) In the following example, if you have 1.sqm, 2.sqm, 3.sqm, 4.sqm, and 5.sqm as migrations, the above callback will happen after 3.sqm completes when the database is on version 4. After the callback it will resume at 4.sqm and complete the remaining migrations, in this case 4.sqm and 5.sqm, meaning the final database version is 6.","title":"Migrations"},{"location":"native_sqlite/migrations/#migrations","text":"The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date. If the driver supports it, migrations are run in a transaction. You should not surround your migrations in BEGIN/END TRANSACTION , as this can cause a crash with some drivers.","title":"Migrations"},{"location":"native_sqlite/migrations/#versioning","text":"The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files.","title":"Versioning"},{"location":"native_sqlite/migrations/#verifying-migrations","text":"You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration.","title":"Verifying Migrations"},{"location":"native_sqlite/migrations/#code-migrations","text":"If you run your migration from code and would like to perform data migrations you can use the Database.Schema.migrateWithCallbacks api: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersion ( 3 ) { database . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) Alternatively, it is often useful to receive the SqlDriver as a parameter. In those cases, you can use AfterVersionWithDriver class instead: Database . Schema . migrateWithCallbacks ( driver = database , oldVersion = 0 , newVersion = Database . Schema . version , AfterVersionWithDriver ( 3 ) { it . execute ( null , \"INSERT INTO test (value) VALUES('hello')\" , 0 ) }, ) In the following example, if you have 1.sqm, 2.sqm, 3.sqm, 4.sqm, and 5.sqm as migrations, the above callback will happen after 3.sqm completes when the database is on version 4. After the callback it will resume at 4.sqm and complete the remaining migrations, in this case 4.sqm and 5.sqm, meaning the final database version is 6.","title":"Code Migrations"},{"location":"native_sqlite/query_arguments/","text":"Bind Args .sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments. Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Arguments"},{"location":"native_sqlite/query_arguments/#bind-args","text":".sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments.","title":"Bind Args"},{"location":"native_sqlite/query_arguments/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"native_sqlite/query_arguments/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"native_sqlite/query_arguments/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"native_sqlite/query_arguments/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"native_sqlite/transactions/","text":"API If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () } Rollback Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size } Callbacks You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Transactions"},{"location":"native_sqlite/transactions/#api","text":"If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithResult function. val players : List < Player > = database . playerQueries . transactionWithResult { database . playerQueries . selectAll (). executeAsList () }","title":"API"},{"location":"native_sqlite/transactions/#rollback","text":"Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted : Int = database . playerQueries . transactionWithResult { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size }","title":"Rollback"},{"location":"native_sqlite/transactions/#callbacks","text":"You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Callbacks"},{"location":"native_sqlite/types/","text":"SQLite Types SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 ) Custom Column Types If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) ) Enums As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Types"},{"location":"native_sqlite/types/#sqlite-types","text":"SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 )","title":"SQLite Types"},{"location":"native_sqlite/types/#custom-column-types","text":"If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = if ( databaseValue . isEmpty ()) { listOf () } else { databaseValue . split ( \",\" ) } override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) )","title":"Custom Column Types"},{"location":"native_sqlite/types/#enums","text":"As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Enums"}]}